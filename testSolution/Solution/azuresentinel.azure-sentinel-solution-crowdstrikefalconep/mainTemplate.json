{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "author": "Microsoft - support@microsoft.com",
    "comments": "Solution template for CrowdStrike Falcon Endpoint Protection"
  },
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace-location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Microsoft Sentinel is setup"
      }
    },
    "workbook1-name": {
      "type": "string",
      "defaultValue": "CrowdStrike Falcon Endpoint Protection",
      "minLength": 1,
      "metadata": {
        "description": "Name for the workbook"
      }
    }
  },
  "resources": [
    {
      "name": "pid-e73b7985-462c-4cc7-922e-ffa9e9254759-partnercenter",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(concat(parameters('workspace'),'-dc-',uniquestring('CrowdstrikeReplicator')),'1.0.0'))]",
      "location": "[parameters('workspace-location')]",
      "apiVersion": "2022-08-01",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', 'azuresentinel.azure-sentinel-solution-crowdstrikefalconep')]"
      ],
      "properties": {
        "contentId": "CrowdstrikeReplicator",
        "displayName": "Crowdstrike Falcon Data Replicator (using Azure Function)",
        "contentKind": "DataConnector",
        "mainTemplate": {
          "resources": [
            {
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/','CrowdstrikeReplicator')]",
              "apiVersion": "2021-03-01-preview",
              "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
              "location": "[parameters('workspace-location')]",
              "kind": "GenericUI",
              "properties": {
                "connectorUiConfig": {
                  "id": "CrowdstrikeReplicator",
                  "title": "Crowdstrike Falcon Data Replicator (using Azure Function)",
                  "publisher": "Crowdstrike",
                  "descriptionMarkdown": "The [Crowdstrike](https://www.crowdstrike.com/) Falcon Data Replicator connector provides the capability to ingest raw event data from the [Falcon Platform](https://www.crowdstrike.com/blog/tech-center/intro-to-falcon-data-replicator/) events into Microsoft Sentinel. The connector provides ability to get events from Falcon Agents which helps to examine potential security risks, analyze your team's use of collaboration, diagnose configuration problems and more.",
                  "additionalRequirementBanner": "These queries and workbooks are dependent on a parser based on Kusto to work as expected. â€‹Follow the steps to use this Kusto functions alias **CrowdstrikeReplicator** in queries and workbooks [Follow steps to get this Kusto functions>](https://aka.ms/sentinel-crowdstrikereplicator-parser).",
                  "graphQueries": [
                    {
                      "metricName": "Total data received",
                      "legend": "CrowdstrikeReplicatorLogs_CL",
                      "baseQuery": "CrowdstrikeReplicatorLogs_CL"
                    }
                  ],
                  "sampleQueries": [
                    {
                      "description": "Data Replicator - All Activities",
                      "query": "CrowdstrikeReplicator\n | sort by TimeGenerated desc"
                    }
                  ],
                  "dataTypes": [
                    {
                      "name": "CrowdstrikeReplicatorLogs_CL",
                      "lastDataReceivedQuery": "CrowdstrikeReplicatorLogs_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
                    }
                  ],
                  "connectivityCriterias": [
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "CrowdstrikeReplicatorLogs_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(3d)"
                      ]
                    }
                  ],
                  "availability": {
                    "status": 1,
                    "isPreview": false
                  },
                  "permissions": {
                    "resourceProvider": [
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces",
                        "permissionsDisplayText": "read and write permissions on the workspace are required.",
                        "providerDisplayName": "Workspace",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "write": true,
                          "read": true,
                          "delete": true
                        }
                      },
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                        "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                        "providerDisplayName": "Keys",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "action": true
                        }
                      }
                    ],
                    "customs": [
                      {
                        "name": "Microsoft.Web/sites permissions",
                        "description": "Read and write permissions to Azure Functions to create a Function App is required. [See the documentation to learn more about Azure Functions](https://docs.microsoft.com/azure/azure-functions/)."
                      },
                      {
                        "name": "SQS and AWS S3 account credentials/permissions",
                        "description": "**AWS_SECRET**, **AWS_REGION_NAME**, **AWS_KEY**, **QUEUE_URL** is required.  [See the documentation to learn more about data pulling](https://www.crowdstrike.com/blog/tech-center/intro-to-falcon-data-replicator/). To start, contact CrowdStrike support. At your request they will create a CrowdStrike managed Amazon Web Services (AWS) S3 bucket for short term storage purposes as well as a SQS (simple queue service) account for monitoring changes to the S3 bucket."
                      }
                    ]
                  },
                  "instructionSteps": [
                    {
                      "description": ">**NOTE:** This connector uses Azure Functions to connect to the S3 bucket to pull logs into Microsoft Sentinel. This might result in additional data ingestion costs. Check the [Azure Functions pricing page](https://azure.microsoft.com/pricing/details/functions/) for details."
                    },
                    {
                      "description": ">**(Optional Step)** Securely store workspace and API authorization key(s) or token(s) in Azure Key Vault. Azure Key Vault provides a secure mechanism to store and retrieve key values. [Follow these instructions](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references) to use Azure Key Vault with an Azure Function App."
                    },
                    {
                      "description": ">**NOTE:** This data connector depends on a parser based on a Kusto Function to work as expected. [Follow these steps](https://aka.ms/sentinel-crowdstrikereplicator-parser) to create the Kusto functions alias, **CrowdstrikeReplicator**."
                    },
                    {
                      "description": "**STEP 1 - Contact CrowdStrike support to obtain the credentials and Queue URL.**\n"
                    },
                    {
                      "description": "**STEP 2 - Choose ONE from the following two deployment options to deploy the connector and the associated Azure Function**\n\n>**IMPORTANT:** Before deploying the Crowdstrike Falcon Data Replicator connector, have the Workspace ID and Workspace Primary Key (can be copied from the following).",
                      "instructions": [
                        {
                          "parameters": {
                            "fillWith": [
                              "WorkspaceId"
                            ],
                            "label": "Workspace ID"
                          },
                          "type": "CopyableLabel"
                        },
                        {
                          "parameters": {
                            "fillWith": [
                              "PrimaryKey"
                            ],
                            "label": "Primary Key"
                          },
                          "type": "CopyableLabel"
                        }
                      ]
                    },
                    {
                      "description": "Use this method for automated deployment of the Crowdstrike Falcon Data Replicator connector using an ARM Tempate.\n\n1. Click the **Deploy to Azure** button below. \n\n\t[![Deploy To Azure](https://aka.ms/deploytoazurebutton)](https://aka.ms/sentinel-CrowdstrikeReplicator-azuredeploy)\n2. Select the preferred **AWS_SECRET**, **AWS_REGION_NAME**, **AWS_KEY**, **QUEUE_URL**. \n> **NOTE:** Within the same resource group, you can't mix Windows and Linux apps in the same region. Select existing resource group without Windows apps in it or create new resource group.\n3. Enter the **AWS_SECRET**, **AWS_REGION_NAME**, **AWS_KEY**, **QUEUE_URL** and deploy. \n4. Mark the checkbox labeled **I agree to the terms and conditions stated above**. \n5. Click **Purchase** to deploy.",
                      "title": "Option 1 - Azure Resource Manager (ARM) Template"
                    },
                    {
                      "description": "Use the following step-by-step instructions to deploy the Crowdstrike Falcon Data Replicator connector manually with Azure Functions (Deployment via Visual Studio Code).",
                      "title": "Option 2 - Manual Deployment of Azure Functions"
                    },
                    {
                      "description": "**1. Deploy a Function App**\n\n> **NOTE:** You will need to [prepare VS code](https://docs.microsoft.com/azure/azure-functions/functions-create-first-function-python#prerequisites) for Azure function development.\n\n1. Download the [Azure Function App](https://aka.ms/sentinel-CrowdstrikeReplicator-functionapp) file. Extract archive to your local development computer.\n2. Start VS Code. Choose File in the main menu and select Open Folder.\n3. Select the top level folder from extracted files.\n4. Choose the Azure icon in the Activity bar, then in the **Azure: Functions** area, choose the **Deploy to function app** button.\nIf you aren't already signed in, choose the Azure icon in the Activity bar, then in the **Azure: Functions** area, choose **Sign in to Azure**\nIf you're already signed in, go to the next step.\n5. Provide the following information at the prompts:\n\n\ta. **Select folder:** Choose a folder from your workspace or browse to one that contains your function app.\n\n\tb. **Select Subscription:** Choose the subscription to use.\n\n\tc. Select **Create new Function App in Azure** (Don't choose the Advanced option)\n\n\td. **Enter a globally unique name for the function app:** Type a name that is valid in a URL path. The name you type is validated to make sure that it's unique in Azure Functions. (e.g. CrowdstrikeReplicatorXXXXX).\n\n\te. **Select a runtime:** Choose Python 3.8.\n\n\tf. Select a location for new resources. For better performance and lower costs choose the same [region](https://azure.microsoft.com/regions/) where Microsoft Sentinel is located.\n\n6. Deployment will begin. A notification is displayed after your function app is created and the deployment package is applied.\n7. Go to Azure Portal for the Function App configuration."
                    },
                    {
                      "description": "**2. Configure the Function App**\n\n1. In the Function App, select the Function App Name and select **Configuration**.\n2. In the **Application settings** tab, select ** New application setting**.\n3. Add each of the following application settings individually, with their respective string values (case-sensitive): \n\t\tAWS_KEY\n\t\tAWS_SECRET\n\t\tAWS_REGION_NAME\n\t\tQUEUE_URL\n\t\tWorkspaceID\n\t\tWorkspaceKey\n\t\tlogAnalyticsUri (optional)\n> - Use logAnalyticsUri to override the log analytics API endpoint for dedicated cloud. For example, for public cloud, leave the value empty; for Azure GovUS cloud environment, specify the value in the following format: `https://<CustomerId>.ods.opinsights.azure.us`.\n4. Once all application settings have been entered, click **Save**."
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', 'CrowdstrikeReplicator'),'/'))))]",
              "properties": {
                "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', 'CrowdstrikeReplicator')]",
                "contentId": "CrowdstrikeReplicator",
                "kind": "DataConnector",
                "version": "1.0.0",
                "source": {
                  "kind": "Solution",
                  "name": "CrowdStrike Falcon Endpoint Protection",
                  "sourceId": "azuresentinel.azure-sentinel-solution-crowdstrikefalconep"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "support@microsoft.com"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "PackageVersion": "2.0.7"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', 'CrowdstrikeReplicator'),'/'))))]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', 'CrowdstrikeReplicator')]"
      ],
      "location": "[parameters('workspace-location')]",
      "properties": {
        "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', 'CrowdstrikeReplicator')]",
        "contentId": "CrowdstrikeReplicator",
        "kind": "DataConnector",
        "version": "1.0.0",
        "source": {
          "kind": "Solution",
          "name": "CrowdStrike Falcon Endpoint Protection",
          "sourceId": "azuresentinel.azure-sentinel-solution-crowdstrikefalconep"
        },
        "author": {
          "name": "Microsoft",
          "email": "support@microsoft.com"
        },
        "support": {
          "name": "Microsoft Corporation",
          "email": "support@microsoft.com",
          "tier": "Microsoft",
          "link": "https://support.microsoft.com"
        }
      }
    },
    {
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/','CrowdstrikeReplicator')]",
      "apiVersion": "2021-03-01-preview",
      "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
      "location": "[parameters('workspace-location')]",
      "kind": "GenericUI",
      "properties": {
        "connectorUiConfig": {
          "title": "Crowdstrike Falcon Data Replicator (using Azure Function)",
          "publisher": "Crowdstrike",
          "descriptionMarkdown": "The [Crowdstrike](https://www.crowdstrike.com/) Falcon Data Replicator connector provides the capability to ingest raw event data from the [Falcon Platform](https://www.crowdstrike.com/blog/tech-center/intro-to-falcon-data-replicator/) events into Microsoft Sentinel. The connector provides ability to get events from Falcon Agents which helps to examine potential security risks, analyze your team's use of collaboration, diagnose configuration problems and more.",
          "graphQueries": [
            {
              "metricName": "Total data received",
              "legend": "CrowdstrikeReplicatorLogs_CL",
              "baseQuery": "CrowdstrikeReplicatorLogs_CL"
            }
          ],
          "dataTypes": [
            {
              "name": "CrowdstrikeReplicatorLogs_CL",
              "lastDataReceivedQuery": "CrowdstrikeReplicatorLogs_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            }
          ],
          "connectivityCriterias": [
            {
              "type": "IsConnectedQuery",
              "value": [
                "CrowdstrikeReplicatorLogs_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(3d)"
              ]
            }
          ],
          "sampleQueries": [
            {
              "description": "Data Replicator - All Activities",
              "query": "CrowdstrikeReplicator\n | sort by TimeGenerated desc"
            }
          ],
          "availability": {
            "status": 1,
            "isPreview": false
          },
          "permissions": {
            "resourceProvider": [
              {
                "provider": "Microsoft.OperationalInsights/workspaces",
                "permissionsDisplayText": "read and write permissions on the workspace are required.",
                "providerDisplayName": "Workspace",
                "scope": "Workspace",
                "requiredPermissions": {
                  "write": true,
                  "read": true,
                  "delete": true
                }
              },
              {
                "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                "providerDisplayName": "Keys",
                "scope": "Workspace",
                "requiredPermissions": {
                  "action": true
                }
              }
            ],
            "customs": [
              {
                "name": "Microsoft.Web/sites permissions",
                "description": "Read and write permissions to Azure Functions to create a Function App is required. [See the documentation to learn more about Azure Functions](https://docs.microsoft.com/azure/azure-functions/)."
              },
              {
                "name": "SQS and AWS S3 account credentials/permissions",
                "description": "**AWS_SECRET**, **AWS_REGION_NAME**, **AWS_KEY**, **QUEUE_URL** is required.  [See the documentation to learn more about data pulling](https://www.crowdstrike.com/blog/tech-center/intro-to-falcon-data-replicator/). To start, contact CrowdStrike support. At your request they will create a CrowdStrike managed Amazon Web Services (AWS) S3 bucket for short term storage purposes as well as a SQS (simple queue service) account for monitoring changes to the S3 bucket."
              }
            ]
          },
          "instructionSteps": [
            {
              "description": ">**NOTE:** This connector uses Azure Functions to connect to the S3 bucket to pull logs into Microsoft Sentinel. This might result in additional data ingestion costs. Check the [Azure Functions pricing page](https://azure.microsoft.com/pricing/details/functions/) for details."
            },
            {
              "description": ">**(Optional Step)** Securely store workspace and API authorization key(s) or token(s) in Azure Key Vault. Azure Key Vault provides a secure mechanism to store and retrieve key values. [Follow these instructions](https://docs.microsoft.com/azure/app-service/app-service-key-vault-references) to use Azure Key Vault with an Azure Function App."
            },
            {
              "description": ">**NOTE:** This data connector depends on a parser based on a Kusto Function to work as expected. [Follow these steps](https://aka.ms/sentinel-crowdstrikereplicator-parser) to create the Kusto functions alias, **CrowdstrikeReplicator**."
            },
            {
              "description": "**STEP 1 - Contact CrowdStrike support to obtain the credentials and Queue URL.**\n"
            },
            {
              "description": "**STEP 2 - Choose ONE from the following two deployment options to deploy the connector and the associated Azure Function**\n\n>**IMPORTANT:** Before deploying the Crowdstrike Falcon Data Replicator connector, have the Workspace ID and Workspace Primary Key (can be copied from the following).",
              "instructions": [
                {
                  "parameters": {
                    "fillWith": [
                      "WorkspaceId"
                    ],
                    "label": "Workspace ID"
                  },
                  "type": "CopyableLabel"
                },
                {
                  "parameters": {
                    "fillWith": [
                      "PrimaryKey"
                    ],
                    "label": "Primary Key"
                  },
                  "type": "CopyableLabel"
                }
              ]
            },
            {
              "description": "Use this method for automated deployment of the Crowdstrike Falcon Data Replicator connector using an ARM Tempate.\n\n1. Click the **Deploy to Azure** button below. \n\n\t[![Deploy To Azure](https://aka.ms/deploytoazurebutton)](https://aka.ms/sentinel-CrowdstrikeReplicator-azuredeploy)\n2. Select the preferred **AWS_SECRET**, **AWS_REGION_NAME**, **AWS_KEY**, **QUEUE_URL**. \n> **NOTE:** Within the same resource group, you can't mix Windows and Linux apps in the same region. Select existing resource group without Windows apps in it or create new resource group.\n3. Enter the **AWS_SECRET**, **AWS_REGION_NAME**, **AWS_KEY**, **QUEUE_URL** and deploy. \n4. Mark the checkbox labeled **I agree to the terms and conditions stated above**. \n5. Click **Purchase** to deploy.",
              "title": "Option 1 - Azure Resource Manager (ARM) Template"
            },
            {
              "description": "Use the following step-by-step instructions to deploy the Crowdstrike Falcon Data Replicator connector manually with Azure Functions (Deployment via Visual Studio Code).",
              "title": "Option 2 - Manual Deployment of Azure Functions"
            },
            {
              "description": "**1. Deploy a Function App**\n\n> **NOTE:** You will need to [prepare VS code](https://docs.microsoft.com/azure/azure-functions/functions-create-first-function-python#prerequisites) for Azure function development.\n\n1. Download the [Azure Function App](https://aka.ms/sentinel-CrowdstrikeReplicator-functionapp) file. Extract archive to your local development computer.\n2. Start VS Code. Choose File in the main menu and select Open Folder.\n3. Select the top level folder from extracted files.\n4. Choose the Azure icon in the Activity bar, then in the **Azure: Functions** area, choose the **Deploy to function app** button.\nIf you aren't already signed in, choose the Azure icon in the Activity bar, then in the **Azure: Functions** area, choose **Sign in to Azure**\nIf you're already signed in, go to the next step.\n5. Provide the following information at the prompts:\n\n\ta. **Select folder:** Choose a folder from your workspace or browse to one that contains your function app.\n\n\tb. **Select Subscription:** Choose the subscription to use.\n\n\tc. Select **Create new Function App in Azure** (Don't choose the Advanced option)\n\n\td. **Enter a globally unique name for the function app:** Type a name that is valid in a URL path. The name you type is validated to make sure that it's unique in Azure Functions. (e.g. CrowdstrikeReplicatorXXXXX).\n\n\te. **Select a runtime:** Choose Python 3.8.\n\n\tf. Select a location for new resources. For better performance and lower costs choose the same [region](https://azure.microsoft.com/regions/) where Microsoft Sentinel is located.\n\n6. Deployment will begin. A notification is displayed after your function app is created and the deployment package is applied.\n7. Go to Azure Portal for the Function App configuration."
            },
            {
              "description": "**2. Configure the Function App**\n\n1. In the Function App, select the Function App Name and select **Configuration**.\n2. In the **Application settings** tab, select ** New application setting**.\n3. Add each of the following application settings individually, with their respective string values (case-sensitive): \n\t\tAWS_KEY\n\t\tAWS_SECRET\n\t\tAWS_REGION_NAME\n\t\tQUEUE_URL\n\t\tWorkspaceID\n\t\tWorkspaceKey\n\t\tlogAnalyticsUri (optional)\n> - Use logAnalyticsUri to override the log analytics API endpoint for dedicated cloud. For example, for public cloud, leave the value empty; for Azure GovUS cloud environment, specify the value in the following format: `https://<CustomerId>.ods.opinsights.azure.us`.\n4. Once all application settings have been entered, click **Save**."
            }
          ],
          "id": "CrowdstrikeReplicator",
          "additionalRequirementBanner": "These queries and workbooks are dependent on a parser based on Kusto to work as expected. â€‹Follow the steps to use this Kusto functions alias **CrowdstrikeReplicator** in queries and workbooks [Follow steps to get this Kusto functions>](https://aka.ms/sentinel-crowdstrikereplicator-parser)."
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(concat(parameters('workspace'),'-dc-',uniquestring('CrowdStrikeFalconEndpointProtection')),'1.0.0'))]",
      "location": "[parameters('workspace-location')]",
      "apiVersion": "2022-08-01",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', 'azuresentinel.azure-sentinel-solution-crowdstrikefalconep')]"
      ],
      "properties": {
        "contentId": "CrowdStrikeFalconEndpointProtection",
        "displayName": "CrowdStrike Falcon Endpoint Protection",
        "contentKind": "DataConnector",
        "mainTemplate": {
          "resources": [
            {
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/','CrowdStrikeFalconEndpointProtection')]",
              "apiVersion": "2021-03-01-preview",
              "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
              "location": "[parameters('workspace-location')]",
              "kind": "GenericUI",
              "properties": {
                "connectorUiConfig": {
                  "id": "CrowdStrikeFalconEndpointProtection",
                  "title": "CrowdStrike Falcon Endpoint Protection",
                  "publisher": "CrowdStrike",
                  "descriptionMarkdown": "The [CrowdStrike Falcon Endpoint Protection](https://www.crowdstrike.com/endpoint-security-products/) connector allows you to easily connect your CrowdStrike Falcon Event Stream with Microsoft Sentinel, to create custom dashboards, alerts, and improve investigation. This gives you more insight into your organization's endpoints and improves your security operation capabilities.",
                  "additionalRequirementBanner": "These queries are dependent on a parser based on a Kusto Function to work as expected. Follow the steps to use this Kusto functions alias **CrowdStrikeFalconEventStream** in queries and workbooks. [Follow these steps to get this Kusto functions.](https://aka.ms/sentinel-crowdstrikefalconendpointprotection-parser)",
                  "graphQueries": [
                    {
                      "metricName": "Total data received",
                      "legend": "CrowdStrikeFalconEventStream",
                      "baseQuery": "CommonSecurityLog \n| where DeviceVendor == \"CrowdStrike\" and DeviceProduct == \"FalconHost\""
                    }
                  ],
                  "sampleQueries": [
                    {
                      "description": "Top 10 Hosts with Detections",
                      "query": "CrowdStrikeFalconEventStream \n | where EventType == \"DetectionSummaryEvent\" \n| summarize count() by DstHostName \n | top 10 by count_"
                    },
                    {
                      "description": "Top 10 Users with Detections",
                      "query": "CrowdStrikeFalconEventStream \n | where EventType == \"DetectionSummaryEvent\" \n| summarize count() by DstUserName \n | top 10 by count_"
                    }
                  ],
                  "connectivityCriterias": [
                    {
                      "type": "IsConnectedQuery",
                      "value": [
                        "CommonSecurityLog \n| where DeviceVendor == \"CrowdStrike\" and DeviceProduct == \"FalconHost\"\n | summarize LastLogReceived = max(TimeGenerated)\n | project IsConnected = LastLogReceived > ago(3d)"
                      ]
                    }
                  ],
                  "dataTypes": [
                    {
                      "name": "CommonSecurityLog (CrowdStrikeFalconEventStream)",
                      "lastDataReceivedQuery": "CommonSecurityLog \n| where DeviceVendor == \"CrowdStrike\" and DeviceProduct == \"FalconHost\"\n | summarize Time = max(TimeGenerated)\n | where isnotempty(Time)"
                    }
                  ],
                  "availability": {
                    "status": 1,
                    "isPreview": false
                  },
                  "permissions": {
                    "resourceProvider": [
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces",
                        "permissionsDisplayText": "read and write permissions are required.",
                        "providerDisplayName": "Workspace",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "read": true,
                          "write": true,
                          "delete": true
                        }
                      },
                      {
                        "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                        "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                        "providerDisplayName": "Keys",
                        "scope": "Workspace",
                        "requiredPermissions": {
                          "action": true
                        }
                      }
                    ]
                  },
                  "instructionSteps": [
                    {
                      "description": ">This data connector depends on a parser based on a Kusto Function to work as expected. [Follow the steps](https://aka.ms/sentinel-crowdstrikefalconendpointprotection-parser) to use the Kusto function alias, **CrowdStrikeFalconEventStream**"
                    },
                    {
                      "description": "Install and configure the Linux agent to collect your Common Event Format (CEF) Syslog messages and forward them to Microsoft Sentinel.\n\n> Notice that the data from all regions will be stored in the selected workspace",
                      "innerSteps": [
                        {
                          "title": "1.1 Select or create a Linux machine",
                          "description": "Select or create a Linux machine that Microsoft Sentinel will use as the proxy between your security solution and Microsoft Sentinel this machine can be on your on-prem environment, Azure or other clouds."
                        },
                        {
                          "title": "1.2 Install the CEF collector on the Linux machine",
                          "description": "Install the Microsoft Monitoring Agent on your Linux machine and configure the machine to listen on the necessary port and forward messages to your Microsoft Sentinel workspace. The CEF collector collects CEF messages on port 514 TCP.\n\n> 1. Make sure that you have Python on your machine using the following command: python -version.\n\n> 2. You must have elevated permissions (sudo) on your machine.",
                          "instructions": [
                            {
                              "parameters": {
                                "fillWith": [
                                  "WorkspaceId",
                                  "PrimaryKey"
                                ],
                                "label": "Run the following command to install and apply the CEF collector:",
                                "value": "sudo wget -O cef_installer.py https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/DataConnectors/CEF/cef_installer.py&&sudo python cef_installer.py {0} {1}"
                              },
                              "type": "CopyableLabel"
                            }
                          ]
                        }
                      ],
                      "title": "1. Linux Syslog agent configuration"
                    },
                    {
                      "description": "Deploy the CrowdStrike Falcon SIEM Collector to forward Syslog messages in CEF format to your Microsoft Sentinel workspace via the Syslog agent.\n1. [Follow these instructions](https://www.crowdstrike.com/blog/tech-center/integrate-with-your-siem/) to deploy the SIEM Collector and forward syslog\n2. Use the IP address or hostname for the Linux device with the Linux agent installed as the Destination IP address.",
                      "title": "2. Forward CrowdStrike Falcon Event Stream logs to a Syslog agent"
                    },
                    {
                      "description": "Follow the instructions to validate your connectivity:\n\nOpen Log Analytics to check if the logs are received using the CommonSecurityLog schema.\n\n>It may take about 20 minutes until the connection streams data to your workspace.\n\nIf the logs are not received, run the following connectivity validation script:\n\n> 1. Make sure that you have Python on your machine using the following command: python -version.\n\n> 2. You must have elevated permissions (sudo) on your machine",
                      "instructions": [
                        {
                          "parameters": {
                            "fillWith": [
                              "WorkspaceId"
                            ],
                            "label": "Run the following command to validate your connectivity:",
                            "value": "sudo wget -O cef_troubleshoot.py https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/DataConnectors/CEF/cef_troubleshoot.py&&sudo python cef_troubleshoot.py  {0}"
                          },
                          "type": "CopyableLabel"
                        }
                      ],
                      "title": "3. Validate connection"
                    },
                    {
                      "description": "Make sure to configure the machine's security according to your organization's security policy\n\n\n[Learn more >](https://aka.ms/SecureCEF)",
                      "title": "4. Secure your machine "
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', 'CrowdStrikeFalconEndpointProtection'),'/'))))]",
              "properties": {
                "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', 'CrowdStrikeFalconEndpointProtection')]",
                "contentId": "CrowdStrikeFalconEndpointProtection",
                "kind": "DataConnector",
                "version": "1.0.0",
                "source": {
                  "kind": "Solution",
                  "name": "CrowdStrike Falcon Endpoint Protection",
                  "sourceId": "azuresentinel.azure-sentinel-solution-crowdstrikefalconep"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "support@microsoft.com"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "PackageVersion": "2.0.7"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('DataConnector-', last(split(extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', 'CrowdStrikeFalconEndpointProtection'),'/'))))]",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', 'CrowdStrikeFalconEndpointProtection')]"
      ],
      "location": "[parameters('workspace-location')]",
      "properties": {
        "parentId": "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/dataConnectors', 'CrowdStrikeFalconEndpointProtection')]",
        "contentId": "CrowdStrikeFalconEndpointProtection",
        "kind": "DataConnector",
        "version": "1.0.0",
        "source": {
          "kind": "Solution",
          "name": "CrowdStrike Falcon Endpoint Protection",
          "sourceId": "azuresentinel.azure-sentinel-solution-crowdstrikefalconep"
        },
        "author": {
          "name": "Microsoft",
          "email": "support@microsoft.com"
        },
        "support": {
          "name": "Microsoft Corporation",
          "email": "support@microsoft.com",
          "tier": "Microsoft",
          "link": "https://support.microsoft.com"
        }
      }
    },
    {
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/','CrowdStrikeFalconEndpointProtection')]",
      "apiVersion": "2021-03-01-preview",
      "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
      "location": "[parameters('workspace-location')]",
      "kind": "GenericUI",
      "properties": {
        "connectorUiConfig": {
          "title": "CrowdStrike Falcon Endpoint Protection",
          "publisher": "CrowdStrike",
          "descriptionMarkdown": "The [CrowdStrike Falcon Endpoint Protection](https://www.crowdstrike.com/endpoint-security-products/) connector allows you to easily connect your CrowdStrike Falcon Event Stream with Microsoft Sentinel, to create custom dashboards, alerts, and improve investigation. This gives you more insight into your organization's endpoints and improves your security operation capabilities.",
          "graphQueries": [
            {
              "metricName": "Total data received",
              "legend": "CrowdStrikeFalconEventStream",
              "baseQuery": "CommonSecurityLog \n| where DeviceVendor == \"CrowdStrike\" and DeviceProduct == \"FalconHost\""
            }
          ],
          "dataTypes": [
            {
              "name": "CommonSecurityLog (CrowdStrikeFalconEventStream)",
              "lastDataReceivedQuery": "CommonSecurityLog \n| where DeviceVendor == \"CrowdStrike\" and DeviceProduct == \"FalconHost\"\n | summarize Time = max(TimeGenerated)\n | where isnotempty(Time)"
            }
          ],
          "connectivityCriterias": [
            {
              "type": "IsConnectedQuery",
              "value": [
                "CommonSecurityLog \n| where DeviceVendor == \"CrowdStrike\" and DeviceProduct == \"FalconHost\"\n | summarize LastLogReceived = max(TimeGenerated)\n | project IsConnected = LastLogReceived > ago(3d)"
              ]
            }
          ],
          "sampleQueries": [
            {
              "description": "Top 10 Hosts with Detections",
              "query": "CrowdStrikeFalconEventStream \n | where EventType == \"DetectionSummaryEvent\" \n| summarize count() by DstHostName \n | top 10 by count_"
            },
            {
              "description": "Top 10 Users with Detections",
              "query": "CrowdStrikeFalconEventStream \n | where EventType == \"DetectionSummaryEvent\" \n| summarize count() by DstUserName \n | top 10 by count_"
            }
          ],
          "availability": {
            "status": 1,
            "isPreview": false
          },
          "permissions": {
            "resourceProvider": [
              {
                "provider": "Microsoft.OperationalInsights/workspaces",
                "permissionsDisplayText": "read and write permissions are required.",
                "providerDisplayName": "Workspace",
                "scope": "Workspace",
                "requiredPermissions": {
                  "read": true,
                  "write": true,
                  "delete": true
                }
              },
              {
                "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                "providerDisplayName": "Keys",
                "scope": "Workspace",
                "requiredPermissions": {
                  "action": true
                }
              }
            ]
          },
          "instructionSteps": [
            {
              "description": ">This data connector depends on a parser based on a Kusto Function to work as expected. [Follow the steps](https://aka.ms/sentinel-crowdstrikefalconendpointprotection-parser) to use the Kusto function alias, **CrowdStrikeFalconEventStream**"
            },
            {
              "description": "Install and configure the Linux agent to collect your Common Event Format (CEF) Syslog messages and forward them to Microsoft Sentinel.\n\n> Notice that the data from all regions will be stored in the selected workspace",
              "innerSteps": [
                {
                  "title": "1.1 Select or create a Linux machine",
                  "description": "Select or create a Linux machine that Microsoft Sentinel will use as the proxy between your security solution and Microsoft Sentinel this machine can be on your on-prem environment, Azure or other clouds."
                },
                {
                  "title": "1.2 Install the CEF collector on the Linux machine",
                  "description": "Install the Microsoft Monitoring Agent on your Linux machine and configure the machine to listen on the necessary port and forward messages to your Microsoft Sentinel workspace. The CEF collector collects CEF messages on port 514 TCP.\n\n> 1. Make sure that you have Python on your machine using the following command: python -version.\n\n> 2. You must have elevated permissions (sudo) on your machine.",
                  "instructions": [
                    {
                      "parameters": {
                        "fillWith": [
                          "WorkspaceId",
                          "PrimaryKey"
                        ],
                        "label": "Run the following command to install and apply the CEF collector:",
                        "value": "sudo wget -O cef_installer.py https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/DataConnectors/CEF/cef_installer.py&&sudo python cef_installer.py {0} {1}"
                      },
                      "type": "CopyableLabel"
                    }
                  ]
                }
              ],
              "title": "1. Linux Syslog agent configuration"
            },
            {
              "description": "Deploy the CrowdStrike Falcon SIEM Collector to forward Syslog messages in CEF format to your Microsoft Sentinel workspace via the Syslog agent.\n1. [Follow these instructions](https://www.crowdstrike.com/blog/tech-center/integrate-with-your-siem/) to deploy the SIEM Collector and forward syslog\n2. Use the IP address or hostname for the Linux device with the Linux agent installed as the Destination IP address.",
              "title": "2. Forward CrowdStrike Falcon Event Stream logs to a Syslog agent"
            },
            {
              "description": "Follow the instructions to validate your connectivity:\n\nOpen Log Analytics to check if the logs are received using the CommonSecurityLog schema.\n\n>It may take about 20 minutes until the connection streams data to your workspace.\n\nIf the logs are not received, run the following connectivity validation script:\n\n> 1. Make sure that you have Python on your machine using the following command: python -version.\n\n> 2. You must have elevated permissions (sudo) on your machine",
              "instructions": [
                {
                  "parameters": {
                    "fillWith": [
                      "WorkspaceId"
                    ],
                    "label": "Run the following command to validate your connectivity:",
                    "value": "sudo wget -O cef_troubleshoot.py https://raw.githubusercontent.com/Azure/Azure-Sentinel/master/DataConnectors/CEF/cef_troubleshoot.py&&sudo python cef_troubleshoot.py  {0}"
                  },
                  "type": "CopyableLabel"
                }
              ],
              "title": "3. Validate connection"
            },
            {
              "description": "Make sure to configure the machine's security according to your organization's security policy\n\n\n[Learn more >](https://aka.ms/SecureCEF)",
              "title": "4. Secure your machine "
            }
          ],
          "id": "CrowdStrikeFalconEndpointProtection",
          "additionalRequirementBanner": "These queries are dependent on a parser based on a Kusto Function to work as expected. Follow the steps to use this Kusto functions alias **CrowdStrikeFalconEventStream** in queries and workbooks. [Follow these steps to get this Kusto functions.](https://aka.ms/sentinel-crowdstrikefalconendpointprotection-parser)"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(concat(parameters('workspace'),'-pr-',uniquestring('CrowdstrikeFalconEventStream-Parser')),'1.0.0'))]",
      "location": "[parameters('workspace-location')]",
      "apiVersion": "2022-08-01",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', 'azuresentinel.azure-sentinel-solution-crowdstrikefalconep')]"
      ],
      "properties": {
        "contentId": "CrowdstrikeFalconEventStream-Parser",
        "displayName": "CrowdStrikeFalconEventStream",
        "contentKind": "Parser",
        "mainTemplate": {
          "resources": [
            {
              "name": "[concat(parameters('workspace'),'/','CrowdstrikeFalconEventStream')]",
              "apiVersion": "2020-08-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "CrowdStrikeFalconEventStream",
                "category": "Samples",
                "functionAlias": "CrowdStrikeFalconEventStream",
                "query": "\nCommonSecurityLog\r\n| where DeviceVendor == \"CrowdStrike\" and DeviceProduct == \"FalconHost\"\r\n| extend DeviceCustomNumber1 = coalesce(column_ifexists(\"FieldDeviceCustomNumber1\", long(null)),DeviceCustomNumber1),\r\n         DeviceCustomNumber2 = coalesce(column_ifexists(\"FieldDeviceCustomNumber2\", long(null)),DeviceCustomNumber2),\r\n         DeviceCustomNumber3 = coalesce(column_ifexists(\"FieldDeviceCustomNumber3\", long(null)),DeviceCustomNumber3)\r\n| extend EventType = extract(@\"cat=([^;]+)(\\;|$)\",1,AdditionalExtensions),\r\n         Outcome = extract(@\"outcome=([^;]+)(\\;|$)\",1,AdditionalExtensions),\r\n         Technique = extract(@\"reason=([^;]+)(\\;|$)\",1,AdditionalExtensions),\r\n         PatternDisposition = extract(@\"CSMTRPatternDisposition=([^;]+)(\\;|$)\",1,AdditionalExtensions),\r\n         SessionStartTime = unixtime_seconds_todatetime(toint(extract(@\"sessionStartTimestamp=([^;]+)(\\;|$)\",1,AdditionalExtensions))),\r\n         SessionEndTime = unixtime_seconds_todatetime(toint(extract(@\"sessionEndTimestamp=([^;]+)(\\;|$)\",1,AdditionalExtensions)))\r\n| extend EventType = coalesce(column_ifexists(\"DeviceEventCategory\",\"\"),EventType), \r\n         Outcome = coalesce(column_ifexists(\"EventOutcome\",\"\"),Outcome),\r\n\t\t Technique = coalesce(column_ifexists(\"Reason\",\"\"),Technique)\r\n| extend ParentProcessId = iif(DeviceCustomNumber1Label == \"ParentProcessId\" , DeviceCustomNumber1, toint(\"\")),\r\n         ChildProcessId = iif(DeviceCustomNumber2Label == \"ProcessId\" , DeviceCustomNumber2, toint(\"\")),\r\n         Offset = iif(DeviceCustomNumber3Label == \"Offset\", DeviceCustomNumber3, toint(\"\"))\r\n| project-away DeviceCustomNumber1Label, DeviceCustomNumber1,DeviceCustomNumber2Label, DeviceCustomNumber2,DeviceCustomNumber3Label, DeviceCustomNumber3\r\n| extend EventTimestamp = iif(DeviceCustomDate1Label == \"Timestamp\", todatetime(DeviceCustomDate1), todatetime(\"\")),\r\n         ExeWrittenTime = iif(DeviceCustomDate1Label == \"ExeWrittenTimestamp\", todatetime(DeviceCustomDate1), todatetime(\"\")),\r\n         DnsRequestTime = iif(DeviceCustomDate1Label == \"DNS Request Time\", todatetime(DeviceCustomDate1), todatetime(\"\")),\r\n         NetworkAccessTime = iif(DeviceCustomDate1Label == \"Network Access Timestamp\", todatetime(DeviceCustomDate1), todatetime(\"\")),\r\n         DocAccessTime = iif(DeviceCustomDate1Label == \"DocAccessTimestamp\" or DeviceCustomDate1Label == \"Document Accessed Timestamp\", todatetime(DeviceCustomDate1), todatetime(\"\")),\r\n         HashSpreadingEventTime = iif(DeviceCustomDate2Label == \"HashSpreadingEventTime\", todatetime(DeviceCustomDate2), todatetime(\"\")),\r\n         HashSpreadingSensorTime = iif(DeviceCustomDate2Label == \"HashSpreadingSensorEventTime\", todatetime(DeviceCustomDate2), todatetime(\"\"))\r\n| project-away DeviceCustomDate1Label, DeviceCustomDate1, DeviceCustomDate2Label, DeviceCustomDate2\r\n| extend ScanResultName = iif(DeviceCustomString1Label == \"ScanResultNam\", DeviceCustomString1, \"\"),\r\n         WrittenExeFileName = iif(DeviceCustomString2Label == \"WrittenExeFileName\", DeviceCustomString2, \"\"),\r\n         QuarantineFileSHA256 = iif(DeviceCustomString2Label == \"QuarantineFileSHA256\", DeviceCustomString2, \"\"),\r\n         ScanResultEngine = iif(DeviceCustomString2Label == \"ScanResultEngine\", DeviceCustomString2, \"\"),\r\n         AccessedDocFileName = iif(DeviceCustomString2Label == \"AccessedDocFileName\", DeviceCustomString2, \"\"),\r\n         WrittenExeFilePath = iif(DeviceCustomString3Label == \"WrittenExeFilePath\", DeviceCustomString3, \"\"),\r\n         AccessedDocFilePath = iif(DeviceCustomString3Label == \"AccessedDocFilePath\", DeviceCustomString3, \"\"),\r\n         QuarantineFilePath = iif(DeviceCustomString3Label == \"QuarantineFilePath\", DeviceCustomString3, \"\"),\r\n         ScanResultVersion = iif(DeviceCustomString4Label == \"ScanResultVersion\", DeviceCustomString4, \"\"),\r\n         CommandLine = iif(DeviceCustomString5Label == \"CommandLine\", DeviceCustomString5, \"\"),\r\n         FalconHostLink = iif(DeviceCustomString6Label == \"FalconHostLink\", DeviceCustomString6, \"\")\r\n| project-away DeviceCustomString1Label, DeviceCustomString1, DeviceCustomString2Label, DeviceCustomString2, DeviceCustomString3Label, DeviceCustomString3, DeviceCustomString4Label, DeviceCustomString4, DeviceCustomString5Label, DeviceCustomString5, DeviceCustomString6Label, DeviceCustomString6\r\n| project-rename DstHostName = DestinationHostName,\r\n         DstNtDomain = DestinationNTDomain,\r\n         DstUserName = DestinationUserName,\r\n         DstIpAddr = DestinationTranslatedAddress,\r\n         SrcMacAddr = SourceMACAddress,\r\n         SrcIpAddr = SourceIP\r\n| extend EventType = iif(DeviceEventClassID == \"DetectionSummaryEvent\" or DeviceEventClassID contains \"Detection Summary Event\", \"DetectionSummaryEvent\", EventType), \r\n         ReceiptTime = unixtime_milliseconds_todatetime(tolong(ReceiptTime)),\r\n         SensorId = extract(@\"/detail/([^/]+)\\/\",1,FalconHostLink),\r\n         Severity = case(LogSeverity == 1, \"Informational\",\r\n                         LogSeverity == 2, \"Low\",\r\n                         LogSeverity == 3, \"Medium\",\r\n                         LogSeverity == 4, \"High\",\r\n                         LogSeverity == 5, \"Critical\",\r\n                         LogSeverity)",
                "version": 1,
                "tags": [
                  {
                    "name": "description",
                    "value": "CrowdstrikeFalconEventStream"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'CrowdstrikeFalconEventStream'),'/'))))]",
              "dependsOn": [
                "[concat(parameters('workspace'),'/','CrowdstrikeFalconEventStream')]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'CrowdstrikeFalconEventStream')]",
                "contentId": "CrowdstrikeFalconEventStream-Parser",
                "kind": "Parser",
                "version": "1.0.0",
                "source": {
                  "name": "CrowdStrike Falcon Endpoint Protection",
                  "kind": "Solution",
                  "sourceId": "azuresentinel.azure-sentinel-solution-crowdstrikefalconep"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "support@microsoft.com"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "PackageVersion": "2.0.7"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2021-06-01",
      "name": "[concat(parameters('workspace'),'/','CrowdstrikeFalconEventStream')]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "CrowdstrikeFalconEventStream",
        "category": "Samples",
        "functionAlias": "CrowdStrikeFalconEventStream",
        "query": "\nCommonSecurityLog\r\n| where DeviceVendor == \"CrowdStrike\" and DeviceProduct == \"FalconHost\"\r\n| extend DeviceCustomNumber1 = coalesce(column_ifexists(\"FieldDeviceCustomNumber1\", long(null)),DeviceCustomNumber1),\r\n         DeviceCustomNumber2 = coalesce(column_ifexists(\"FieldDeviceCustomNumber2\", long(null)),DeviceCustomNumber2),\r\n         DeviceCustomNumber3 = coalesce(column_ifexists(\"FieldDeviceCustomNumber3\", long(null)),DeviceCustomNumber3)\r\n| extend EventType = extract(@\"cat=([^;]+)(\\;|$)\",1,AdditionalExtensions),\r\n         Outcome = extract(@\"outcome=([^;]+)(\\;|$)\",1,AdditionalExtensions),\r\n         Technique = extract(@\"reason=([^;]+)(\\;|$)\",1,AdditionalExtensions),\r\n         PatternDisposition = extract(@\"CSMTRPatternDisposition=([^;]+)(\\;|$)\",1,AdditionalExtensions),\r\n         SessionStartTime = unixtime_seconds_todatetime(toint(extract(@\"sessionStartTimestamp=([^;]+)(\\;|$)\",1,AdditionalExtensions))),\r\n         SessionEndTime = unixtime_seconds_todatetime(toint(extract(@\"sessionEndTimestamp=([^;]+)(\\;|$)\",1,AdditionalExtensions)))\r\n| extend EventType = coalesce(column_ifexists(\"DeviceEventCategory\",\"\"),EventType), \r\n         Outcome = coalesce(column_ifexists(\"EventOutcome\",\"\"),Outcome),\r\n\t\t Technique = coalesce(column_ifexists(\"Reason\",\"\"),Technique)\r\n| extend ParentProcessId = iif(DeviceCustomNumber1Label == \"ParentProcessId\" , DeviceCustomNumber1, toint(\"\")),\r\n         ChildProcessId = iif(DeviceCustomNumber2Label == \"ProcessId\" , DeviceCustomNumber2, toint(\"\")),\r\n         Offset = iif(DeviceCustomNumber3Label == \"Offset\", DeviceCustomNumber3, toint(\"\"))\r\n| project-away DeviceCustomNumber1Label, DeviceCustomNumber1,DeviceCustomNumber2Label, DeviceCustomNumber2,DeviceCustomNumber3Label, DeviceCustomNumber3\r\n| extend EventTimestamp = iif(DeviceCustomDate1Label == \"Timestamp\", todatetime(DeviceCustomDate1), todatetime(\"\")),\r\n         ExeWrittenTime = iif(DeviceCustomDate1Label == \"ExeWrittenTimestamp\", todatetime(DeviceCustomDate1), todatetime(\"\")),\r\n         DnsRequestTime = iif(DeviceCustomDate1Label == \"DNS Request Time\", todatetime(DeviceCustomDate1), todatetime(\"\")),\r\n         NetworkAccessTime = iif(DeviceCustomDate1Label == \"Network Access Timestamp\", todatetime(DeviceCustomDate1), todatetime(\"\")),\r\n         DocAccessTime = iif(DeviceCustomDate1Label == \"DocAccessTimestamp\" or DeviceCustomDate1Label == \"Document Accessed Timestamp\", todatetime(DeviceCustomDate1), todatetime(\"\")),\r\n         HashSpreadingEventTime = iif(DeviceCustomDate2Label == \"HashSpreadingEventTime\", todatetime(DeviceCustomDate2), todatetime(\"\")),\r\n         HashSpreadingSensorTime = iif(DeviceCustomDate2Label == \"HashSpreadingSensorEventTime\", todatetime(DeviceCustomDate2), todatetime(\"\"))\r\n| project-away DeviceCustomDate1Label, DeviceCustomDate1, DeviceCustomDate2Label, DeviceCustomDate2\r\n| extend ScanResultName = iif(DeviceCustomString1Label == \"ScanResultNam\", DeviceCustomString1, \"\"),\r\n         WrittenExeFileName = iif(DeviceCustomString2Label == \"WrittenExeFileName\", DeviceCustomString2, \"\"),\r\n         QuarantineFileSHA256 = iif(DeviceCustomString2Label == \"QuarantineFileSHA256\", DeviceCustomString2, \"\"),\r\n         ScanResultEngine = iif(DeviceCustomString2Label == \"ScanResultEngine\", DeviceCustomString2, \"\"),\r\n         AccessedDocFileName = iif(DeviceCustomString2Label == \"AccessedDocFileName\", DeviceCustomString2, \"\"),\r\n         WrittenExeFilePath = iif(DeviceCustomString3Label == \"WrittenExeFilePath\", DeviceCustomString3, \"\"),\r\n         AccessedDocFilePath = iif(DeviceCustomString3Label == \"AccessedDocFilePath\", DeviceCustomString3, \"\"),\r\n         QuarantineFilePath = iif(DeviceCustomString3Label == \"QuarantineFilePath\", DeviceCustomString3, \"\"),\r\n         ScanResultVersion = iif(DeviceCustomString4Label == \"ScanResultVersion\", DeviceCustomString4, \"\"),\r\n         CommandLine = iif(DeviceCustomString5Label == \"CommandLine\", DeviceCustomString5, \"\"),\r\n         FalconHostLink = iif(DeviceCustomString6Label == \"FalconHostLink\", DeviceCustomString6, \"\")\r\n| project-away DeviceCustomString1Label, DeviceCustomString1, DeviceCustomString2Label, DeviceCustomString2, DeviceCustomString3Label, DeviceCustomString3, DeviceCustomString4Label, DeviceCustomString4, DeviceCustomString5Label, DeviceCustomString5, DeviceCustomString6Label, DeviceCustomString6\r\n| project-rename DstHostName = DestinationHostName,\r\n         DstNtDomain = DestinationNTDomain,\r\n         DstUserName = DestinationUserName,\r\n         DstIpAddr = DestinationTranslatedAddress,\r\n         SrcMacAddr = SourceMACAddress,\r\n         SrcIpAddr = SourceIP\r\n| extend EventType = iif(DeviceEventClassID == \"DetectionSummaryEvent\" or DeviceEventClassID contains \"Detection Summary Event\", \"DetectionSummaryEvent\", EventType), \r\n         ReceiptTime = unixtime_milliseconds_todatetime(tolong(ReceiptTime)),\r\n         SensorId = extract(@\"/detail/([^/]+)\\/\",1,FalconHostLink),\r\n         Severity = case(LogSeverity == 1, \"Informational\",\r\n                         LogSeverity == 2, \"Low\",\r\n                         LogSeverity == 3, \"Medium\",\r\n                         LogSeverity == 4, \"High\",\r\n                         LogSeverity == 5, \"Critical\",\r\n                         LogSeverity)",
        "version": 1
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'CrowdstrikeFalconEventStream'),'/'))))]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'CrowdstrikeFalconEventStream')]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'CrowdstrikeFalconEventStream')]",
        "contentId": "CrowdstrikeFalconEventStream-Parser",
        "kind": "Parser",
        "version": "1.0.0",
        "source": {
          "kind": "Solution",
          "name": "CrowdStrike Falcon Endpoint Protection",
          "sourceId": "azuresentinel.azure-sentinel-solution-crowdstrikefalconep"
        },
        "author": {
          "name": "Microsoft",
          "email": "support@microsoft.com"
        },
        "support": {
          "name": "Microsoft Corporation",
          "email": "support@microsoft.com",
          "tier": "Microsoft",
          "link": "https://support.microsoft.com"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(concat(parameters('workspace'),'-pr-',uniquestring('CrowdstrikeReplicator-Parser')),'1.0.0'))]",
      "location": "[parameters('workspace-location')]",
      "apiVersion": "2022-08-01",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', 'azuresentinel.azure-sentinel-solution-crowdstrikefalconep')]"
      ],
      "properties": {
        "contentId": "CrowdstrikeReplicator-Parser",
        "displayName": "CrowdstrikeReplicator",
        "contentKind": "Parser",
        "mainTemplate": {
          "resources": [
            {
              "name": "[concat(parameters('workspace'),'/','CrowdstrikeReplicator')]",
              "apiVersion": "2020-08-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "CrowdstrikeReplicator",
                "category": "Samples",
                "functionAlias": "CrowdstrikeReplicator",
                "query": "\nlet CrowdstrikeReplicatorLogs_view  = view () { \r\n    CrowdstrikeReplicatorLogs_CL\r\n    | extend customFields = parse_json(column_ifexists('custom_fields_message_s', ''))\r\n    | extend \r\n        EventVendor=\"Crowdstrike\",\r\n        EventProduct=\"Replicator\",\r\n        FileMode=column_ifexists('FileMode_s', customFields.FileMode),\r\n        DeviceSerialNumber=column_ifexists('DeviceSerialNumber_s', customFields.DeviceSerialNumber),\r\n        IcmpCode=column_ifexists('IcmpCode_s', customFields.IcmpCode),\r\n        IcmpType=column_ifexists('IcmpType_s', customFields.IcmpType),\r\n        LastUpdateInstalledTime=column_ifexists('LastUpdateInstalledTime_s', customFields.LastUpdateInstalledTime),\r\n        RebootRequired=column_ifexists('RebootRequired_s', customFields.RebootRequired),\r\n        PendingUpdateIds=column_ifexists('PendingUpdateIds_s', customFields.PendingUpdateIds),\r\n        InstalledUpdateIds=column_ifexists('InstalledUpdateIds_s', customFields.InstalledUpdateIds),\r\n        InstalledUpdateExtendedStatus=column_ifexists('InstalledUpdateExtendedStatus_s', customFields.InstalledUpdateExtendedStatus),\r\n        SupersededUpdateIds=column_ifexists('SupersededUpdateIds_s', customFields.SupersededUpdateIds),\r\n        ConfigurationDescriptorValue=column_ifexists('ConfigurationDescriptorValue_s', customFields.ConfigurationDescriptorValue),\r\n        ConfigurationDescriptorAttributes=column_ifexists('ConfigurationDescriptorAttributes_s', customFields.ConfigurationDescriptorAttributes),\r\n        DeviceDescriptorUniqueIdentifier=column_ifexists('DeviceDescriptorUniqueIdentifier_s', customFields.DeviceDescriptorUniqueIdentifier),\r\n        ConfigurationDescriptorName=column_ifexists('ConfigurationDescriptorName_s', customFields.ConfigurationDescriptorName),\r\n        ConfigurationDescriptorNumInterfaces=column_ifexists('ConfigurationDescriptorNumInterfaces_s', customFields.ConfigurationDescriptorNumInterfaces),\r\n        ConfigurationDescriptorMaxPowerDraw=column_ifexists('ConfigurationDescriptorMaxPowerDraw_s', customFields.ConfigurationDescriptorMaxPowerDraw),\r\n        ScreenshotsTakenCount=column_ifexists('ScreenshotsTakenCount_s', customFields.ScreenshotsTakenCount),\r\n        ExitCode=column_ifexists('ExitCode_s', customFields.ExitCode),\r\n        ParentProcessId=column_ifexists('ParentProcessId_s', customFields.ParentProcessId),\r\n        DstUserIdentity=column_ifexists('UserSid_s', customFields.DstUserIdentity),\r\n        NetworkListenCount=column_ifexists('NetworkListenCount_s', customFields.NetworkListenCount),\r\n        SuspiciousRawDiskReadCount=column_ifexists('SuspiciousRawDiskReadCount_s', customFields.SuspiciousRawDiskReadCount),\r\n        NetworkBindCount=column_ifexists('NetworkBindCount_s', customFields.NetworkBindCount),\r\n        NetworkRecvAcceptCount=column_ifexists('NetworkRecvAcceptCount_s', customFields.NetworkRecvAcceptCount),\r\n        ContextData=column_ifexists('ContextData_s', customFields.ContextData),\r\n        Id=column_ifexists('id_g', customFields.Id),\r\n        NewExecutableWrittenCount=column_ifexists('NewExecutableWrittenCount_s', customFields.NewExecutableWrittenCount),\r\n        ExeAndServiceCount=column_ifexists('ExeAndServiceCount_s', customFields.ExeAndServiceCount),\r\n        NetworkCloseCount=column_ifexists('NetworkCloseCount_s', customFields.NetworkCloseCount),\r\n        SuspectStackCount=column_ifexists('SuspectStackCount_s', customFields.SuspectStackCount),\r\n        CLICreationCount=column_ifexists('CLICreationCount_s', customFields.CLICreationCount),\r\n        UnsignedModuleLoadCount=column_ifexists('UnsignedModuleLoadCount_s', customFields.UnsignedModuleLoadCount),\r\n        UserTime=column_ifexists('UserTime_s', customFields.UserTime),\r\n        EventMessage=column_ifexists('event_simpleName_s', customFields.EventMessage),\r\n        RawProcessId=column_ifexists('RawProcessId_s', customFields.RawProcessId),\r\n        ContextTimeStamp=column_ifexists('ContextTimeStamp_s', customFields.ContextTimeStamp),\r\n        AllocateVirtualMemoryCount=column_ifexists('AllocateVirtualMemoryCount_s', customFields.AllocateVirtualMemoryCount),\r\n        ContextProcessId=column_ifexists('ContextProcessId_s', customFields.ContextProcessId),\r\n        ServiceEventCount=column_ifexists('ServiceEventCount_s', customFields.ServiceEventCount),\r\n        SnapshotFileOpenCount=column_ifexists('SnapshotFileOpenCount_s', customFields.SnapshotFileOpenCount),\r\n        RemovableDiskFileWrittenCount=column_ifexists('RemovableDiskFileWrittenCount_s', customFields.RemovableDiskFileWrittenCount),\r\n        InjectedDllCount=column_ifexists('InjectedDllCount_s', customFields.InjectedDllCount),\r\n        ModuleLoadCount=column_ifexists('ModuleLoadCount_s', customFields.ModuleLoadCount),\r\n        UserMemoryProtectExecutableCount=column_ifexists('UserMemoryProtectExecutableCount_s', customFields.UserMemoryProtectExecutableCount),\r\n        NetworkCapableAsepWriteCount=column_ifexists('NetworkCapableAsepWriteCount_s', customFields.NetworkCapableAsepWriteCount),\r\n        TargetProcessId=column_ifexists('TargetProcessId_s', customFields.TargetProcessId),\r\n        DnsRequestCount=column_ifexists('DnsRequestCount_s', customFields.DnsRequestCount),\r\n        ArchiveFileWrittenCount=column_ifexists('ArchiveFileWrittenCount_s', customFields.ArchiveFileWrittenCount),\r\n        Entitlements=column_ifexists('Entitlements_s', customFields.Entitlements),\r\n        Name=column_ifexists('name_s', customFields.Name),\r\n        ProcessStartTime=column_ifexists('ProcessStartTime_s', customFields.ProcessStartTime),\r\n        SetThreadContextCount=column_ifexists('SetThreadContextCount_s', customFields.SetThreadContextCount),\r\n        SuspiciousCredentialModuleLoadCount=column_ifexists('SuspiciousCredentialModuleLoadCount_s', customFields.SuspiciousCredentialModuleLoadCount),\r\n        DvcInterfaceGuid=column_ifexists('aid_g', customFields.DvcInterfaceGuid),\r\n        Cid=column_ifexists('cid_g', customFields.Cid),\r\n        FileDeletedCount=column_ifexists('FileDeletedCount_s', customFields.FileDeletedCount),\r\n        UserMemoryAllocateExecutableCount=column_ifexists('UserMemoryAllocateExecutableCount_s', customFields.UserMemoryAllocateExecutableCount),\r\n        DirectoryCreatedCount=column_ifexists('DirectoryCreatedCount_s', customFields.DirectoryCreatedCount),\r\n        NetworkConnectCountUdp=column_ifexists('NetworkConnectCountUdp_s', customFields.NetworkConnectCountUdp),\r\n        QueueApcCount=column_ifexists('QueueApcCount_s', customFields.QueueApcCount),\r\n        ContextThreadId=column_ifexists('ContextThreadId_s', customFields.ContextThreadId),\r\n        Aip=column_ifexists('aip_s', customFields.Aip),\r\n        SuspiciousFontLoadCount=column_ifexists('SuspiciousFontLoadCount_s', customFields.SuspiciousFontLoadCount),\r\n        ConHostId=column_ifexists('ConHostId_s', customFields.ConHostId),\r\n        NetworkConnectCount=column_ifexists('NetworkConnectCount_s', customFields.NetworkConnectCount),\r\n        BinaryExecutableWrittenCount=column_ifexists('BinaryExecutableWrittenCount_s', customFields.BinaryExecutableWrittenCount),\r\n        CycleTime=column_ifexists('CycleTime_s', customFields.CycleTime),\r\n        DvcOs=column_ifexists('event_platform_s', customFields.DvcOs),\r\n        ConHostProcessId=column_ifexists('ConHostProcessId_s', customFields.ConHostProcessId),\r\n        PrivilegedProcessHandleCount=column_ifexists('PrivilegedProcessHandleCount_s', customFields.PrivilegedProcessHandleCount),\r\n        MaxThreadCount=column_ifexists('MaxThreadCount_s', customFields.MaxThreadCount),\r\n        ImageSubsystem=column_ifexists('ImageSubsystem_s', customFields.ImageSubsystem),\r\n        GenericFileWrittenCount=column_ifexists('GenericFileWrittenCount_s', customFields.GenericFileWrittenCount),\r\n        EffectiveTransmissionClass=column_ifexists('EffectiveTransmissionClass_s', customFields.EffectiveTransmissionClass),\r\n        ScriptEngineInvocationCount=column_ifexists('ScriptEngineInvocationCount_s', customFields.ScriptEngineInvocationCount),\r\n        RunDllInvocationCount=column_ifexists('RunDllInvocationCount_s', customFields.RunDllInvocationCount),\r\n        timestamp=column_ifexists('timestamp_s', customFields.timestamp),\r\n        CreateProcessCount=column_ifexists('CreateProcessCount_s', customFields.CreateProcessCount),\r\n        KernelTime=column_ifexists('KernelTime_s', customFields.KernelTime),\r\n        DirectoryEnumeratedCount=column_ifexists('DirectoryEnumeratedCount_s', customFields.DirectoryEnumeratedCount),\r\n        ConfigStateHash=column_ifexists('ConfigStateHash_s', customFields.ConfigStateHash),\r\n        AsepWrittenCount=column_ifexists('AsepWrittenCount_s', customFields.AsepWrittenCount),\r\n        SuspiciousDnsRequestCount=column_ifexists('SuspiciousDnsRequestCount_s', customFields.SuspiciousDnsRequestCount),\r\n        DocumentFileWrittenCount=column_ifexists('DocumentFileWrittenCount_s', customFields.DocumentFileWrittenCount),\r\n        ProtectVirtualMemoryCount=column_ifexists('ProtectVirtualMemoryCount_s', customFields.ProtectVirtualMemoryCount),\r\n        ProcessHashSha256=column_ifexists('SHA256HashData_s', customFields.ProcessHashSha256),\r\n        UserMemoryProtectExecutableRemoteCount=column_ifexists('UserMemoryProtectExecutableRemoteCount_s', customFields.UserMemoryProtectExecutableRemoteCount),\r\n        ConfigBuild=column_ifexists('ConfigBuild_s', customFields.ConfigBuild),\r\n        UserMemoryAllocateExecutableRemoteCount=column_ifexists('UserMemoryAllocateExecutableRemoteCount_s', customFields.UserMemoryAllocateExecutableRemoteCount),\r\n        ExecutableDeletedCount=column_ifexists('ExecutableDeletedCount_s', customFields.ExecutableDeletedCount),\r\n        RegKeySecurityDecreasedCount=column_ifexists('RegKeySecurityDecreasedCount_s', customFields.RegKeySecurityDecreasedCount),\r\n        InjectedThreadCount=column_ifexists('InjectedThreadCount_s', customFields.InjectedThreadCount),\r\n        NetworkModuleLoadCount=column_ifexists('NetworkModuleLoadCount_s', customFields.NetworkModuleLoadCount),\r\n        WindowTitle=column_ifexists('WindowTitle_s', customFields.WindowTitle),\r\n        ProcessCreateFlags=column_ifexists('ProcessCreateFlags_s', customFields.ProcessCreateFlags),\r\n        IntegrityLevel=column_ifexists('IntegrityLevel_s', customFields.IntegrityLevel),\r\n        SourceProcessId=column_ifexists('SourceProcessId_s', customFields.SourceProcessId),\r\n        ProcessHashSha1=column_ifexists('SHA1HashData_s', customFields.ProcessHashSha1),\r\n        TokenType=column_ifexists('TokenType_s', customFields.TokenType),\r\n        ProcessEndTime=column_ifexists('ProcessEndTime_s', customFields.ProcessEndTime),\r\n        AuthenticodeHashData=column_ifexists('AuthenticodeHashData_s', customFields.AuthenticodeHashData),\r\n        ParentBaseFileName=column_ifexists('ParentBaseFileName_s', customFields.ParentBaseFileName),\r\n        SessionId=column_ifexists('SessionId_s', customFields.SessionId),\r\n        Tags=column_ifexists('Tags_s', customFields.Tags),\r\n        ProcessHashMd5=column_ifexists('MD5HashData_g', customFields.ProcessHashMd5),\r\n        ProcessSxsFlags=column_ifexists('ProcessSxsFlags_s', customFields.ProcessSxsFlags),\r\n        AuthenticationId=column_ifexists('AuthenticationId_s', customFields.AuthenticationId),\r\n        WindowFlags=column_ifexists('WindowFlags_s', customFields.WindowFlags),\r\n        ProcessCommandLine=column_ifexists('CommandLine_s', customFields.ProcessCommandLine),\r\n        ParentAuthenticationId=column_ifexists('ParentAuthenticationId_s', customFields.ParentAuthenticationId),\r\n        FileName=column_ifexists('ImageFileName_s', customFields.FileName),\r\n        SourceThreadId=column_ifexists('SourceThreadId_s', customFields.SourceThreadId),\r\n        ProcessParameterFlags=column_ifexists('ProcessParameterFlags_s', customFields.ProcessParameterFlags),\r\n        SignInfoFlags=column_ifexists('SignInfoFlags_s', customFields.SignInfoFlags),\r\n        ChannelVersion=column_ifexists('ChannelVersion_s', customFields.ChannelVersion),\r\n        ChannelVersionRequired=column_ifexists('ChannelVersionRequired_s', customFields.ChannelVersionRequired),\r\n        ChannelId=column_ifexists('ChannelId_s', customFields.ChannelId),\r\n        DnsResponseType=column_ifexists('DnsResponseType_s', customFields.DnsResponseType),\r\n        IP4Records=column_ifexists('IP4Records_s', customFields.IP4Records),\r\n        CNAMERecords=column_ifexists('CNAMERecords_s', customFields.CNAMERecords),\r\n        QueryStatus=column_ifexists('QueryStatus_s', customFields.QueryStatus),\r\n        InterfaceIndex=column_ifexists('InterfaceIndex_s', customFields.InterfaceIndex),\r\n        DualRequest=column_ifexists('DualRequest_s', customFields.DualRequest),\r\n        FirstIP4Record=column_ifexists('FirstIP4Record_s', customFields.FirstIP4Record),\r\n        UrlDomain=column_ifexists('DomainName_s', customFields.UrlDomain),\r\n        RespondingDnsServer=column_ifexists('RespondingDnsServer_s', customFields.RespondingDnsServer),\r\n        RequestType=column_ifexists('RequestType_s', customFields.RequestType),\r\n        FirewallRuleId=column_ifexists('FirewallRuleId_s', customFields.FirewallRuleId),\r\n        Options=column_ifexists('Options_s', customFields.Options),\r\n        MinorFunction=column_ifexists('MinorFunction_s', customFields.MinorFunction),\r\n        FileIdentifier=column_ifexists('FileIdentifier_s', customFields.FileIdentifier),\r\n        Information=column_ifexists('Information_s', customFields.Information),\r\n        ShareAccess=column_ifexists('ShareAccess_s', customFields.ShareAccess),\r\n        FileObject=column_ifexists('FileObject_s', customFields.FileObject),\r\n        FilePermission=column_ifexists('FileAttributes_s', customFields.FilePermission),\r\n        Status=column_ifexists('Status_s', customFields.Status),\r\n        IrpFlags=column_ifexists('IrpFlags_s', customFields.IrpFlags),\r\n        MajorFunction=column_ifexists('MajorFunction_s', customFields.MajorFunction),\r\n        DesiredAccess=column_ifexists('DesiredAccess_s', customFields.DesiredAccess),\r\n        OperationFlags=column_ifexists('OperationFlags_s', customFields.OperationFlags),\r\n        TargetFileName=column_ifexists('TargetFileName_s', customFields.TargetFileName),\r\n        CallStackModuleNamesVersion=column_ifexists('CallStackModuleNamesVersion_s', customFields.CallStackModuleNamesVersion),\r\n        CsaProcessDataCollectionInstanceId=column_ifexists('CsaProcessDataCollectionInstanceId_s', customFields.CsaProcessDataCollectionInstanceId),\r\n        CallStackModuleNames=column_ifexists('CallStackModuleNames_s', customFields.CallStackModuleNames),\r\n        CreateProcessType=column_ifexists('CreateProcessType_s', customFields.CreateProcessType),\r\n        EtwRawProcessId=column_ifexists('EtwRawProcessId_s', customFields.EtwRawProcessId),\r\n        EventMax=column_ifexists('EventMax_s', customFields.EventMax),\r\n        EtwRawThreadId=column_ifexists('EtwRawThreadId_s', customFields.EtwRawThreadId),\r\n        Flags=column_ifexists('Flags_s', customFields.Flags),\r\n        EventMin=column_ifexists('EventMin_s', customFields.EventMin),\r\n        RawThreadId=column_ifexists('RawThreadId_s', customFields.RawThreadId),\r\n        SrcIpAddr=column_ifexists('LocalAddressIP4_s', customFields.SrcIpAddr),\r\n        ConnectionFlags=column_ifexists('ConnectionFlags_s', customFields.ConnectionFlags),\r\n        DstIpPort=column_ifexists('RemotePort_s', customFields.DstIpPort),\r\n        SrcIpPort=column_ifexists('LocalPort_s', customFields.SrcIpPort),\r\n        Protocol=column_ifexists('Protocol_s', customFields.Protocol),\r\n        DstIpAddr=column_ifexists('RemoteAddressIP4_s', customFields.DstIpAddr),\r\n        ConnectionDirection=column_ifexists('ConnectionDirection_s', customFields.ConnectionDirection),\r\n        InContext=column_ifexists('InContext_s', customFields.InContext),\r\n        NetworkContainmentState=column_ifexists('NetworkContainmentState_s', customFields.NetworkContainmentState),\r\n        ConfigIDBase=column_ifexists('ConfigIDBase_s', customFields.ConfigIDBase),\r\n        SensorStateBitMap=column_ifexists('SensorStateBitMap_s', customFields.SensorStateBitMap),\r\n        ConfigurationVersion=column_ifexists('ConfigurationVersion_s', customFields.ConfigurationVersion),\r\n        ConfigIDPlatform=column_ifexists('ConfigIDPlatform_s', customFields.ConfigIDPlatform),\r\n        ConfigIDBuild=column_ifexists('ConfigIDBuild_s', customFields.ConfigIDBuild),\r\n        ProvisionState=column_ifexists('ProvisionState_s', customFields.ProvisionState),\r\n        Size=column_ifexists('Size_s', customFields.Size),\r\n        IsOnNetwork=column_ifexists('IsOnNetwork_s', customFields.IsOnNetwork),\r\n        DiskParentDeviceInstanceId=column_ifexists('DiskParentDeviceInstanceId_s', customFields.DiskParentDeviceInstanceId),\r\n        TemporaryFileName=column_ifexists('TemporaryFileName_s', customFields.TemporaryFileName),\r\n        FileEcpBitmask=column_ifexists('FileEcpBitmask_s', customFields.FileEcpBitmask),\r\n        IsOnRemovableDisk=column_ifexists('IsOnRemovableDisk_s', customFields.IsOnRemovableDisk),\r\n        ModuleCharacteristics=column_ifexists('ModuleCharacteristics_s', customFields.ModuleCharacteristics),\r\n        OriginalEventTimeStamp=column_ifexists('OriginalEventTimeStamp_s', customFields.OriginalEventTimeStamp),\r\n        MappedFromUserMode=column_ifexists('MappedFromUserMode_s', customFields.MappedFromUserMode),\r\n        TreeId=column_ifexists('TreeId_s', customFields.TreeId),\r\n        PrimaryModule=column_ifexists('PrimaryModule_s', customFields.PrimaryModule),\r\n        UserIsAdmin=column_ifexists('UserIsAdmin_s', customFields.UserIsAdmin),\r\n        LogoffTime=column_ifexists('LogoffTime_s', customFields.LogoffTime),\r\n        LogonTime=column_ifexists('LogonTime_s', customFields.LogonTime),\r\n        LogonDomain=column_ifexists('LogonDomain_s', customFields.LogonDomain),\r\n        RemoteAccount=column_ifexists('RemoteAccount_s', customFields.RemoteAccount),\r\n        UserFlags=column_ifexists('UserFlags_s', customFields.UserFlags),\r\n        LogonServer=column_ifexists('LogonServer_s', customFields.LogonServer),\r\n        DstUserName=column_ifexists('UserName_s', customFields.DstUserName),\r\n        LogonType=column_ifexists('LogonType_s', customFields.LogonType),\r\n        AuthenticationPackage=column_ifexists('AuthenticationPackage_s', customFields.AuthenticationPackage),\r\n        UserPrincipal=column_ifexists('UserPrincipal_s', customFields.UserPrincipal),\r\n        PasswordLastSet=column_ifexists('PasswordLastSet_s', customFields.PasswordLastSet),\r\n        UserLogoffType=column_ifexists('UserLogoffType_s', customFields.UserLogoffType),\r\n        UserLogonFlags=column_ifexists('UserLogonFlags_s', customFields.UserLogonFlags),\r\n        Parameter2=column_ifexists('Parameter2_s', customFields.Parameter2),\r\n        Parameter1=column_ifexists('Parameter1_s', customFields.Parameter1),\r\n        Parameter3=column_ifexists('Parameter3_s', customFields.Parameter3),\r\n        Line=column_ifexists('Line_s', customFields.Line),\r\n        ErrorStatus=column_ifexists('ErrorStatus_s', customFields.ErrorStatus),\r\n        Facility=column_ifexists('Facility_s', customFields.Facility),\r\n        File=column_ifexists('File_s', customFields.File),\r\n        PublicKeys=column_ifexists('PublicKeys_s', customFields.PublicKeys),\r\n        HandleCreated=column_ifexists('HandleCreated_s', customFields.HandleCreated),\r\n        ExtendedKeyUsages=column_ifexists('ExtendedKeyUsages_s', customFields.ExtendedKeyUsages),\r\n        FileSigningTime=column_ifexists('FileSigningTime_s', customFields.FileSigningTime),\r\n        Object1Name=column_ifexists('Object1Name_s', customFields.Object1Name),\r\n        Object1Type=column_ifexists('Object1Type_s', customFields.Object1Type),\r\n        Certificate=column_ifexists('Certificate_s', customFields.Certificate),\r\n        RpcClientProcessId=column_ifexists('RpcClientProcessId_s', customFields.RpcClientProcessId),\r\n        SyntheticPR2Flags=column_ifexists('SyntheticPR2Flags_s', customFields.SyntheticPR2Flags),\r\n        MachOSubType=column_ifexists('MachOSubType_s', customFields.MachOSubType),\r\n        SessionProcessId=column_ifexists('SessionProcessId_s', customFields.SessionProcessId),\r\n        SVUID=column_ifexists('SVUID_s', customFields.SVUID),\r\n        ProcessGroupId=column_ifexists('ProcessGroupId_s', customFields.ProcessGroupId),\r\n        GID=column_ifexists('GID_s', customFields.GID),\r\n        SVGID=column_ifexists('SVGID_s', customFields.SVGID),\r\n        UID=column_ifexists('UID_s', customFields.UID),\r\n        RGID=column_ifexists('RGID_s', customFields.RGID),\r\n        RUID=column_ifexists('RUID_s', customFields.RUID),\r\n        NeighborList=column_ifexists('NeighborList_s', customFields.NeighborList),\r\n        DownloadServer=column_ifexists('DownloadServer_s', customFields.DownloadServer),\r\n        DownloadPath=column_ifexists('DownloadPath_s', customFields.DownloadPath),\r\n        DownloadPort=column_ifexists('DownloadPort_s', customFields.DownloadPort),\r\n        CompletionEventId=column_ifexists('CompletionEventId_s', customFields.CompletionEventId),\r\n        IsTransactedFile=column_ifexists('IsTransactedFile_s', customFields.IsTransactedFile),\r\n        WindowStation=column_ifexists('WindowStation_s', customFields.WindowStation),\r\n        BoundingLimitCount=column_ifexists('BoundingLimitCount_s', customFields.BoundingLimitCount),\r\n        ProcessBehaviorBitfield=column_ifexists('ProcessBehaviorBitfield_s', customFields.ProcessBehaviorBitfield),\r\n        Desktop=column_ifexists('Desktop_s', customFields.Desktop),\r\n        PatternId=column_ifexists('PatternId_s', customFields.PatternId),\r\n        ExclusionType=column_ifexists('ExclusionType_s', customFields.ExclusionType),\r\n        ExclusionSource=column_ifexists('ExclusionSource_s', customFields.ExclusionSource),\r\n        DriverLoadFlags=column_ifexists('DriverLoadFlags_s', customFields.DriverLoadFlags),\r\n        CompanyName=column_ifexists('CompanyName_s', customFields.CompanyName),\r\n        OriginalFilename=column_ifexists('OriginalFilename_s', customFields.OriginalFilename),\r\n        FileVersion=column_ifexists('FileVersion_s', customFields.FileVersion),\r\n        GrandParentBaseFileName=column_ifexists('GrandParentBaseFileName_s', customFields.GrandParentBaseFileName),\r\n        ShowWindowFlags=column_ifexists('ShowWindowFlags_s', customFields.ShowWindowFlags),\r\n        ThreadStartAddress=column_ifexists('ThreadStartAddress_s', customFields.ThreadStartAddress),\r\n        InjectedThreadFlag=column_ifexists('InjectedThreadFlag_s', customFields.InjectedThreadFlag),\r\n        UserThread=column_ifexists('UserThread_s', customFields.UserThread),\r\n        TargetThreadModule=column_ifexists('TargetThreadModule_s', customFields.TargetThreadModule),\r\n        TargetThreadId=column_ifexists('TargetThreadId_s', customFields.TargetThreadId),\r\n        ThreadStartContext=column_ifexists('ThreadStartContext_s', customFields.ThreadStartContext),\r\n        SourceThreadStartAddress=column_ifexists('SourceThreadStartAddress_s', customFields.SourceThreadStartAddress),\r\n        InterfaceGuid=column_ifexists('InterfaceGuid_g', customFields.InterfaceGuid),\r\n        InterfaceVersion=column_ifexists('InterfaceVersion_s', customFields.InterfaceVersion),\r\n        RpcClientThreadId=column_ifexists('RpcClientThreadId_s', customFields.RpcClientThreadId),\r\n        TaskXml=column_ifexists('TaskXml_s', customFields.TaskXml),\r\n        TaskAuthor=column_ifexists('TaskAuthor_s', customFields.TaskAuthor),\r\n        TaskName=column_ifexists('TaskName_s', customFields.TaskName),\r\n        RpcOpNum=column_ifexists('RpcOpNum_s', customFields.RpcOpNum),\r\n        TaskExecArguments=column_ifexists('TaskExecArguments_s', customFields.TaskExecArguments),\r\n        TaskExecCommand=column_ifexists('TaskExecCommand_s', customFields.TaskExecCommand),\r\n        RpcNestingLevel=column_ifexists('RpcNestingLevel_s', customFields.RpcNestingLevel),\r\n        ErrorLocation=column_ifexists('ErrorLocation_s', customFields.ErrorLocation),\r\n        ErrorReason=column_ifexists('ErrorReason_s', customFields.ErrorReason),\r\n        Parameter64_1=column_ifexists('Parameter64_1_s', customFields.Parameter64_1),\r\n        ErrorSource=column_ifexists('ErrorSource_s', customFields.ErrorSource),\r\n        ParameterSizedBuffer_1=column_ifexists('ParameterSizedBuffer_1_g', customFields.ParameterSizedBuffer_1),\r\n        ErrorCode=column_ifexists('ErrorCode_s', customFields.ErrorCode),\r\n        DeviceProductId=column_ifexists('DeviceProductId_s', customFields.DeviceProductId),\r\n        DeviceVersion=column_ifexists('DeviceVersion_s', customFields.DeviceVersion),\r\n        DeviceTimeStamp=column_ifexists('DeviceTimeStamp_s', customFields.DeviceTimeStamp),\r\n        DeviceInstanceId=column_ifexists('DeviceInstanceId_s', customFields.DeviceInstanceId),\r\n        DeviceDescriptorSetHash=column_ifexists('DeviceDescriptorSetHash_s', customFields.DeviceDescriptorSetHash),\r\n        DeviceVendorId=column_ifexists('DeviceVendorId_s', customFields.DeviceVendorId),\r\n        DeviceManufacturer=column_ifexists('DeviceManufacturer_s', customFields.DeviceManufacturer),\r\n        DeviceProduct=column_ifexists('DeviceProduct_s', customFields.DeviceProduct),\r\n        GroupRid=column_ifexists('GroupRid_s', customFields.GroupRid),\r\n        UserRid=column_ifexists('UserRid_s', customFields.UserRid),\r\n        DomainSid=column_ifexists('DomainSid_s', customFields.DomainSid),\r\n        LightningLatencyState=column_ifexists('LightningLatencyState_s', customFields.LightningLatencyState),\r\n        UnixMode=column_ifexists('UnixMode_s', customFields.UnixMode),\r\n        VnodeType=column_ifexists('VnodeType_s', customFields.VnodeType),\r\n        TargetDirectoryName=column_ifexists('TargetDirectoryName_s', customFields.TargetDirectoryName),\r\n        ApiReturnValue=column_ifexists('ApiReturnValue_s', customFields.ApiReturnValue),\r\n        ServiceDisplayName=column_ifexists('ServiceDisplayName_s', customFields.ServiceDisplayName),\r\n        LinkName=column_ifexists('LinkName_s', customFields.LinkName),\r\n        VersionInfo=column_ifexists('VersionInfo_s', customFields.VersionInfo),\r\n        LanguageId=column_ifexists('LanguageId_s', customFields.LanguageId),\r\n        AsepFlags=column_ifexists('AsepFlags_s', customFields.AsepFlags),\r\n        RegObjectName=column_ifexists('RegObjectName_s', customFields.RegObjectName),\r\n        Data1=column_ifexists('Data1_s', customFields.Data1),\r\n        RegOperationType=column_ifexists('RegOperationType_s', customFields.RegOperationType),\r\n        ProcessArgs=column_ifexists('TargetCommandLineParameters_s', customFields.ProcessArgs),\r\n        RegStringValue=column_ifexists('RegStringValue_s', customFields.RegStringValue),\r\n        RegType=column_ifexists('RegType_s', customFields.RegType),\r\n        AsepClass=column_ifexists('AsepClass_s', customFields.AsepClass),\r\n        AsepIndex=column_ifexists('AsepIndex_s', customFields.AsepIndex),\r\n        RegValueName=column_ifexists('RegValueName_s', customFields.RegValueName),\r\n        AsepValueType=column_ifexists('AsepValueType_s', customFields.AsepValueType),\r\n        LocalSession=column_ifexists('LocalSession_s', customFields.LocalSession),\r\n        DstDvcHostname=column_ifexists('ClientComputerName_s', customFields.DstDvcHostname),\r\n        PrivilegesBitmask=column_ifexists('PrivilegesBitmask_s', customFields.PrivilegesBitmask),\r\n        EnabledPrivilegesBitmask=column_ifexists('EnabledPrivilegesBitmask_s', customFields.EnabledPrivilegesBitmask),\r\n        UserGroupsBitmask=column_ifexists('UserGroupsBitmask_s', customFields.UserGroupsBitmask),\r\n        Timeout=column_ifexists('Timeout_s', customFields.Timeout),\r\n        ProcessCount=column_ifexists('ProcessCount_s', customFields.ProcessCount),\r\n        SuppressType=column_ifexists('SuppressType_s', customFields.SuppressType),\r\n        BoundedCount=column_ifexists('BoundedCount_s', customFields.BoundedCount),\r\n        IP6Records=column_ifexists('IP6Records_s', customFields.IP6Records),\r\n        FirstIP6Record=column_ifexists('FirstIP6Record_s', customFields.FirstIP6Record),\r\n        WmiQuery=column_ifexists('WmiQuery_s', customFields.WmiQuery),\r\n        WmiNamespaceName=column_ifexists('WmiNamespaceName_s', customFields.WmiNamespaceName),\r\n        RegClassificationIndex=column_ifexists('RegClassificationIndex_s', customFields.RegClassificationIndex),\r\n        RegClassificationFlags=column_ifexists('RegClassificationFlags_s', customFields.RegClassificationFlags),\r\n        RegClassification=column_ifexists('RegClassification_s', customFields.RegClassification),\r\n        SystemTableIndex=column_ifexists('SystemTableIndex_s', customFields.SystemTableIndex),\r\n        ScreenshotType=column_ifexists('ScreenshotType_s', customFields.ScreenshotType),\r\n        SubStatus=column_ifexists('SubStatus_s', customFields.SubStatus),\r\n        UmppaInjectAbortCount=column_ifexists('UmppaInjectAbortCount_s', customFields.UmppaInjectAbortCount),\r\n        UmppaInjectFailedCount=column_ifexists('UmppaInjectFailedCount_s', customFields.UmppaInjectFailedCount),\r\n        UmppaInjectionType=column_ifexists('UmppaInjectionType_s', customFields.UmppaInjectionType),\r\n        UmppaInjectLoadFailCount=column_ifexists('UmppaInjectLoadFailCount_s', customFields.UmppaInjectLoadFailCount),\r\n        UmppaInjectCfgCheckCount=column_ifexists('UmppaInjectCfgCheckCount_s', customFields.UmppaInjectCfgCheckCount),\r\n        UmppaInjectExtensionErrorCount=column_ifexists('UmppaInjectExtensionErrorCount_s', customFields.UmppaInjectExtensionErrorCount),\r\n        UmppaInjectInvalidThreadCount=column_ifexists('UmppaInjectInvalidThreadCount_s', customFields.UmppaInjectInvalidThreadCount),\r\n        UmppaInjectFileSectionCount=column_ifexists('UmppaInjectFileSectionCount_s', customFields.UmppaInjectFileSectionCount),\r\n        TotalCount=column_ifexists('TotalCount_s', customFields.TotalCount),\r\n        UmppaInjectLoadErrorCount=column_ifexists('UmppaInjectLoadErrorCount_s', customFields.UmppaInjectLoadErrorCount),\r\n        UmppaInjectBadAlertCount=column_ifexists('UmppaInjectBadAlertCount_s', customFields.UmppaInjectBadAlertCount),\r\n        UmppaInjectApcInsertionCount=column_ifexists('UmppaInjectApcInsertionCount_s', customFields.UmppaInjectApcInsertionCount),\r\n        UmppaInjectCopyFailCount=column_ifexists('UmppaInjectCopyFailCount_s', customFields.UmppaInjectCopyFailCount),\r\n        FirewallRule=column_ifexists('FirewallRule_s', customFields.FirewallRule),\r\n        RegNumericValue=column_ifexists('RegNumericValue_s', customFields.RegNumericValue),\r\n        VolumeDriveLetter=column_ifexists('VolumeDriveLetter_s', customFields.VolumeDriveLetter),\r\n        VolumeSnapshotName=column_ifexists('VolumeSnapshotName_s', customFields.VolumeSnapshotName),\r\n        VolumeName=column_ifexists('VolumeName_s', customFields.VolumeName),\r\n        UserCanonical=column_ifexists('UserCanonical_s', customFields.UserCanonical),\r\n        LogonId=column_ifexists('LogonId_s', customFields.LogonId),\r\n        ConfigStateData=column_ifexists('ConfigStateData_s', customFields.ConfigStateData),\r\n        FirewallProfile=column_ifexists('FirewallProfile_s', customFields.FirewallProfile),\r\n        FirewallOption=column_ifexists('FirewallOption_s', customFields.FirewallOption),\r\n        FirewallOptionNumericValue=column_ifexists('FirewallOptionNumericValue_s', customFields.FirewallOptionNumericValue),\r\n        SmbShareName=column_ifexists('SmbShareName_s', customFields.SmbShareName),\r\n        TargetSHA256HashData=column_ifexists('TargetSHA256HashData_s', customFields.TargetSHA256HashData),\r\n        IsCpuDataCommonOnAllCores=column_ifexists('IsCpuDataCommonOnAllCores_s', customFields.IsCpuDataCommonOnAllCores),\r\n        SpibarDataFrap=column_ifexists('SpibarDataFrap_s', customFields.SpibarDataFrap),\r\n        EfiVariableDbxSha256Hash=column_ifexists('EfiVariableDbxSha256Hash_s', customFields.EfiVariableDbxSha256Hash),\r\n        PciConfigDataBgsm=column_ifexists('PciConfigDataBgsm_s', customFields.PciConfigDataBgsm),\r\n        PciConfigDataDpr=column_ifexists('PciConfigDataDpr_s', customFields.PciConfigDataDpr),\r\n        CpuDataCommonSmrrSupported=column_ifexists('CpuDataCommonSmrrSupported_s', customFields.CpuDataCommonSmrrSupported),\r\n        SpibarDataHsfc=column_ifexists('SpibarDataHsfc_s', customFields.SpibarDataHsfc),\r\n        EfiVariableSecureBoot=column_ifexists('EfiVariableSecureBoot_s', customFields.EfiVariableSecureBoot),\r\n        PciConfigDataMesegMask=column_ifexists('PciConfigDataMesegMask_s', customFields.PciConfigDataMesegMask),\r\n        PciConfigDataTolud=column_ifexists('PciConfigDataTolud_s', customFields.PciConfigDataTolud),\r\n        EfiVariableDbxAttributes=column_ifexists('EfiVariableDbxAttributes_s', customFields.EfiVariableDbxAttributes),\r\n        PciConfigDataPavpc=column_ifexists('PciConfigDataPavpc_s', customFields.PciConfigDataPavpc),\r\n        EfiVariableCustomModeAttributes=column_ifexists('EfiVariableCustomModeAttributes_s', customFields.EfiVariableCustomModeAttributes),\r\n        SpibarDataFreg3=column_ifexists('SpibarDataFreg3_s', customFields.SpibarDataFreg3),\r\n        SpibarDataFreg4=column_ifexists('SpibarDataFreg4_s', customFields.SpibarDataFreg4),\r\n        SpibarDataFreg1=column_ifexists('SpibarDataFreg1_s', customFields.SpibarDataFreg1),\r\n        SpibarDataFreg2=column_ifexists('SpibarDataFreg2_s', customFields.SpibarDataFreg2),\r\n        SpibarDataFreg0=column_ifexists('SpibarDataFreg0_s', customFields.SpibarDataFreg0),\r\n        EfiSupported=column_ifexists('EfiSupported_s', customFields.EfiSupported),\r\n        EfiVariablePkAttributes=column_ifexists('EfiVariablePkAttributes_s', customFields.EfiVariablePkAttributes),\r\n        CpuDataCommonPrmrrUncorePhysicalMask=column_ifexists('CpuDataCommonPrmrrUncorePhysicalMask_s', customFields.CpuDataCommonPrmrrUncorePhysicalMask),\r\n        PciConfigDataGenPmconA=column_ifexists('PciConfigDataGenPmconA_s', customFields.PciConfigDataGenPmconA),\r\n        PciConfigDataTsegmb=column_ifexists('PciConfigDataTsegmb_s', customFields.PciConfigDataTsegmb),\r\n        SpibarDataVscc0=column_ifexists('SpibarDataVscc0_s', customFields.SpibarDataVscc0),\r\n        EfiVariablePkSha256Hash=column_ifexists('EfiVariablePkSha256Hash_s', customFields.EfiVariablePkSha256Hash),\r\n        SpibarDataVscc1=column_ifexists('SpibarDataVscc1_s', customFields.SpibarDataVscc1),\r\n        CpuDataCommonSmrrPhysicalMask=column_ifexists('CpuDataCommonSmrrPhysicalMask_s', customFields.CpuDataCommonSmrrPhysicalMask),\r\n        NorthBridgeDeviceId=column_ifexists('NorthBridgeDeviceId_s', customFields.NorthBridgeDeviceId),\r\n        IsNorthBridgeSupported=column_ifexists('IsNorthBridgeSupported_s', customFields.IsNorthBridgeSupported),\r\n        PciConfigDataTom=column_ifexists('PciConfigDataTom_s', customFields.PciConfigDataTom),\r\n        EfiVariableKekSha256Hash=column_ifexists('EfiVariableKekSha256Hash_s', customFields.EfiVariableKekSha256Hash),\r\n        SouthBridgeVendorId=column_ifexists('SouthBridgeVendorId_s', customFields.SouthBridgeVendorId),\r\n        EfiVariableSignatureSupport=column_ifexists('EfiVariableSignatureSupport_s', customFields.EfiVariableSignatureSupport),\r\n        MmioDataTco1Cnt=column_ifexists('MmioDataTco1Cnt_s', customFields.MmioDataTco1Cnt),\r\n        EfiVariableKekAttributes=column_ifexists('EfiVariableKekAttributes_s', customFields.EfiVariableKekAttributes),\r\n        FirmwareAnalysisCpuSupported=column_ifexists('FirmwareAnalysisCpuSupported_s', customFields.FirmwareAnalysisCpuSupported),\r\n        MmioDataSmiEn=column_ifexists('MmioDataSmiEn_s', customFields.MmioDataSmiEn),\r\n        CpuDataCommonPrmrrUncoreSupported=column_ifexists('CpuDataCommonPrmrrUncoreSupported_s', customFields.CpuDataCommonPrmrrUncoreSupported),\r\n        NorthBridgeVendorId=column_ifexists('NorthBridgeVendorId_s', customFields.NorthBridgeVendorId),\r\n        CpuDataCommonMsrApicBase=column_ifexists('CpuDataCommonMsrApicBase_s', customFields.CpuDataCommonMsrApicBase),\r\n        EfiVariableDbAttributes=column_ifexists('EfiVariableDbAttributes_s', customFields.EfiVariableDbAttributes),\r\n        SpibarDataPr2=column_ifexists('SpibarDataPr2_s', customFields.SpibarDataPr2),\r\n        SpibarDataBfpr=column_ifexists('SpibarDataBfpr_s', customFields.SpibarDataBfpr),\r\n        SpibarDataPr1=column_ifexists('SpibarDataPr1_s', customFields.SpibarDataPr1),\r\n        EfiVariableSecureBootAttributes=column_ifexists('EfiVariableSecureBootAttributes_s', customFields.EfiVariableSecureBootAttributes),\r\n        SpibarDataPr0=column_ifexists('SpibarDataPr0_s', customFields.SpibarDataPr0),\r\n        IsSouthBridgeSupported=column_ifexists('IsSouthBridgeSupported_s', customFields.IsSouthBridgeSupported),\r\n        PciConfigDataHfsts1=column_ifexists('PciConfigDataHfsts1_s', customFields.PciConfigDataHfsts1),\r\n        CpuDataCommonMsrFeatureControl=column_ifexists('CpuDataCommonMsrFeatureControl_s', customFields.CpuDataCommonMsrFeatureControl),\r\n        PciConfigDataRemaplimit=column_ifexists('PciConfigDataRemaplimit_s', customFields.PciConfigDataRemaplimit),\r\n        CpuDataCommonSiliconDebugFeatureControl=column_ifexists('CpuDataCommonSiliconDebugFeatureControl_s', customFields.CpuDataCommonSiliconDebugFeatureControl),\r\n        CpuDataCommonSmrrPhysicalBase=column_ifexists('CpuDataCommonSmrrPhysicalBase_s', customFields.CpuDataCommonSmrrPhysicalBase),\r\n        SouthBridgeDeviceId=column_ifexists('SouthBridgeDeviceId_s', customFields.SouthBridgeDeviceId),\r\n        CpuDataCommonPrmrrPhysicalMask=column_ifexists('CpuDataCommonPrmrrPhysicalMask_s', customFields.CpuDataCommonPrmrrPhysicalMask),\r\n        EfiVariableDbSha256Hash=column_ifexists('EfiVariableDbSha256Hash_s', customFields.EfiVariableDbSha256Hash),\r\n        SpibarDataHsfs=column_ifexists('SpibarDataHsfs_s', customFields.SpibarDataHsfs),\r\n        PciConfigDataRemapbase=column_ifexists('PciConfigDataRemapbase_s', customFields.PciConfigDataRemapbase),\r\n        EfiVariableCustomMode=column_ifexists('EfiVariableCustomMode_s', customFields.EfiVariableCustomMode),\r\n        PciConfigDataGgc=column_ifexists('PciConfigDataGgc_s', customFields.PciConfigDataGgc),\r\n        PciConfigDataTouud=column_ifexists('PciConfigDataTouud_s', customFields.PciConfigDataTouud),\r\n        SpibarDataPr4=column_ifexists('SpibarDataPr4_s', customFields.SpibarDataPr4),\r\n        SpibarDataPr3=column_ifexists('SpibarDataPr3_s', customFields.SpibarDataPr3),\r\n        CpuDataCommonPrmrrSupported=column_ifexists('CpuDataCommonPrmrrSupported_s', customFields.CpuDataCommonPrmrrSupported),\r\n        PciConfigDataSmramc=column_ifexists('PciConfigDataSmramc_s', customFields.PciConfigDataSmramc),\r\n        EfiVariableSignatureSupportAttributes=column_ifexists('EfiVariableSignatureSupportAttributes_s', customFields.EfiVariableSignatureSupportAttributes),\r\n        PciConfigDataBdsm=column_ifexists('PciConfigDataBdsm_s', customFields.PciConfigDataBdsm),\r\n        EfiVariableSetupModeAttributes=column_ifexists('EfiVariableSetupModeAttributes_s', customFields.EfiVariableSetupModeAttributes),\r\n        EfiVariableSetupMode=column_ifexists('EfiVariableSetupMode_s', customFields.EfiVariableSetupMode),\r\n        PciConfigDataBiosCntl=column_ifexists('PciConfigDataBiosCntl_s', customFields.PciConfigDataBiosCntl),\r\n        PciConfigDataMesegBase=column_ifexists('PciConfigDataMesegBase_s', customFields.PciConfigDataMesegBase),\r\n        SourceFileName=column_ifexists('SourceFileName_s', customFields.SourceFileName),\r\n        NewFileIdentifier=column_ifexists('NewFileIdentifier_s', customFields.NewFileIdentifier),\r\n        FeatureVector=column_ifexists('FeatureVector_s', customFields.FeatureVector),\r\n        ModelPrediction=column_ifexists('ModelPrediction_s', customFields.ModelPrediction),\r\n        Malicious=column_ifexists('Malicious_s', customFields.Malicious),\r\n        FeatureExtractionVersion=column_ifexists('FeatureExtractionVersion_s', customFields.FeatureExtractionVersion),\r\n        FXFileSize=column_ifexists('FXFileSize_s', customFields.FXFileSize),\r\n        MLModelVersion=column_ifexists('MLModelVersion_s', customFields.MLModelVersion),\r\n        FontBufferLength=column_ifexists('FontBufferLength_s', customFields.FontBufferLength),\r\n        FontFileCount=column_ifexists('FontFileCount_s', customFields.FontFileCount),\r\n        FontLoadOperation=column_ifexists('FontLoadOperation_s', customFields.FontLoadOperation),\r\n        FontBuffer=column_ifexists('FontBuffer_s', customFields.FontBuffer),\r\n        FontFileName=column_ifexists('FontFileName_s', customFields.FontFileName),\r\n        TemplateInstanceId=column_ifexists('TemplateInstanceId_s', customFields.TemplateInstanceId),\r\n        PatternDisposition=column_ifexists('PatternDisposition_s', customFields.PatternDisposition),\r\n        ServicePackMajor=column_ifexists('ServicePackMajor_s', customFields.ServicePackMajor),\r\n        ProductSku=column_ifexists('ProductSku_s', customFields.ProductSku),\r\n        PointerSize=column_ifexists('PointerSize_s', customFields.PointerSize),\r\n        ProductName=column_ifexists('ProductName_s', customFields.ProductName),\r\n        AgentVersion=column_ifexists('AgentVersion_s', customFields.AgentVersion),\r\n        ServicePackMinor=column_ifexists('ServicePackMinor_s', customFields.ServicePackMinor),\r\n        SuiteMask=column_ifexists('SuiteMask_s', customFields.SuiteMask),\r\n        SubBuildNumber=column_ifexists('SubBuildNumber_s', customFields.SubBuildNumber),\r\n        PlatformId=column_ifexists('PlatformId_s', customFields.PlatformId),\r\n        BuildType=column_ifexists('BuildType_s', customFields.BuildType),\r\n        MajorVersion=column_ifexists('MajorVersion_s', customFields.MajorVersion),\r\n        ProductType=column_ifexists('ProductType_s', customFields.ProductType),\r\n        MinorVersion=column_ifexists('MinorVersion_s', customFields.MinorVersion),\r\n        CheckedBuild=column_ifexists('CheckedBuild_s', customFields.CheckedBuild),\r\n        BuildNumber=column_ifexists('BuildNumber_s', customFields.BuildNumber),\r\n        RFMState=column_ifexists('RFMState_s', customFields.RFMState),\r\n        FirmwareAnalysisEclControlInterfaceVersion=column_ifexists('FirmwareAnalysisEclControlInterfaceVersion_s', customFields.FirmwareAnalysisEclControlInterfaceVersion),\r\n        FirmwareAnalysisEclConsumerInterfaceVersion=column_ifexists('FirmwareAnalysisEclConsumerInterfaceVersion_s', customFields.FirmwareAnalysisEclConsumerInterfaceVersion),\r\n        BootTimeFunctionalityLevel=column_ifexists('BootTimeFunctionalityLevel_s', customFields.BootTimeFunctionalityLevel),\r\n        ReasonOfFunctionalityLevel=column_ifexists('ReasonOfFunctionalityLevel_s', customFields.ReasonOfFunctionalityLevel),\r\n        CurrentFunctionalityLevel=column_ifexists('CurrentFunctionalityLevel_s', customFields.CurrentFunctionalityLevel),\r\n        PciAttachmentState=column_ifexists('PciAttachmentState_s', customFields.PciAttachmentState),\r\n        LocalAddressIP6=column_ifexists('LocalAddressIP6_s', customFields.LocalAddressIP6),\r\n        RemoteAddressIP6=column_ifexists('RemoteAddressIP6_s', customFields.RemoteAddressIP6),\r\n        RegBinaryValue=column_ifexists('RegBinaryValue_s', customFields.RegBinaryValue),\r\n        ServiceDescription=column_ifexists('ServiceDescription_s', customFields.ServiceDescription),\r\n        ServiceSecurity=column_ifexists('ServiceSecurity_s', customFields.ServiceSecurity),\r\n        ServiceImagePath=column_ifexists('ServiceImagePath_s', customFields.ServiceImagePath),\r\n        ServiceStart=column_ifexists('ServiceStart_s', customFields.ServiceStart),\r\n        ServiceType=column_ifexists('ServiceType_s', customFields.ServiceType),\r\n        ServiceFailureActions=column_ifexists('ServiceFailureActions_s', customFields.ServiceFailureActions),\r\n        ServiceErrorControl=column_ifexists('ServiceErrorControl_s', customFields.ServiceErrorControl),\r\n        SymbolicLinkName=column_ifexists('SymbolicLinkName_s', customFields.SymbolicLinkName),\r\n        SymbolicLinkTarget=column_ifexists('SymbolicLinkTarget_s', customFields.SymbolicLinkTarget),\r\n        DevicePropertyClassName=column_ifexists('DevicePropertyClassName_s', customFields.DevicePropertyClassName),\r\n        DeviceActiveConfigurationNumber=column_ifexists('DeviceActiveConfigurationNumber_s', customFields.DeviceActiveConfigurationNumber),\r\n        DevicePropertyClassGuid=column_ifexists('DevicePropertyClassGuid_g', customFields.DevicePropertyClassGuid),\r\n        DeviceUsbSubclass=column_ifexists('DeviceUsbSubclass_s', customFields.DeviceUsbSubclass),\r\n        ParentHubInstanceId=column_ifexists('ParentHubInstanceId_s', customFields.ParentHubInstanceId),\r\n        DeviceConnectionStatus=column_ifexists('DeviceConnectionStatus_s', customFields.DeviceConnectionStatus),\r\n        DeviceUsbClass=column_ifexists('DeviceUsbClass_s', customFields.DeviceUsbClass),\r\n        ParentHubPort=column_ifexists('ParentHubPort_s', customFields.ParentHubPort),\r\n        DevicePropertyManufacturer=column_ifexists('DevicePropertyManufacturer_s', customFields.DevicePropertyManufacturer),\r\n        DevicePropertyLocationInformation=column_ifexists('DevicePropertyLocationInformation_s', customFields.DevicePropertyLocationInformation),\r\n        DeviceProtocol=column_ifexists('DeviceProtocol_s', customFields.DeviceProtocol),\r\n        DevicePropertyDeviceDescription=column_ifexists('DevicePropertyDeviceDescription_s', customFields.DevicePropertyDeviceDescription),\r\n        DeviceUsbVersion=column_ifexists('DeviceUsbVersion_s', customFields.DeviceUsbVersion),\r\n        ModuleBaseAddress=column_ifexists('ModuleBaseAddress_s', customFields.ModuleBaseAddress),\r\n        ModuleSize=column_ifexists('ModuleSize_s', customFields.ModuleSize),\r\n        IsOnClearCaseMvfs=column_ifexists('IsOnClearCaseMvfs_s', customFields.IsOnClearCaseMvfs),\r\n        DllCharacteristics=column_ifexists('DllCharacteristics_s', customFields.DllCharacteristics),\r\n        ActiveCpuCount=column_ifexists('ActiveCpuCount_s', customFields.ActiveCpuCount),\r\n        MemoryTotal=column_ifexists('MemoryTotal_s', customFields.MemoryTotal),\r\n        BillingType=column_ifexists('BillingType_s', customFields.BillingType),\r\n        ConnectionCipher=column_ifexists('ConnectionCipher_s', customFields.ConnectionCipher),\r\n        ConnectType=column_ifexists('ConnectType_s', customFields.ConnectType),\r\n        ConnectionProtocol=column_ifexists('ConnectionProtocol_s', customFields.ConnectionProtocol),\r\n        ConnectionHash=column_ifexists('ConnectionHash_s', customFields.ConnectionHash),\r\n        ConnectTime=column_ifexists('ConnectTime_s', customFields.ConnectTime),\r\n        ConnectionHashStrength=column_ifexists('ConnectionHashStrength_s', customFields.ConnectionHashStrength),\r\n        FailedConnectCount=column_ifexists('FailedConnectCount_s', customFields.FailedConnectCount),\r\n        ConnectionCipherStrength=column_ifexists('ConnectionCipherStrength_s', customFields.ConnectionCipherStrength),\r\n        ConnectionExchangeStrength=column_ifexists('ConnectionExchangeStrength_s', customFields.ConnectionExchangeStrength),\r\n        ConnectionExchange=column_ifexists('ConnectionExchange_s', customFields.ConnectionExchange),\r\n        PreviousConnectTime=column_ifexists('PreviousConnectTime_s', customFields.PreviousConnectTime),\r\n        FalconServiceServletErrors=column_ifexists('FalconServiceServletErrors_s', customFields.FalconServiceServletErrors),\r\n        FalconServiceComponent=column_ifexists('FalconServiceComponent_s', customFields.FalconServiceComponent),\r\n        FalconServiceServletStarts=column_ifexists('FalconServiceServletStarts_s', customFields.FalconServiceServletStarts),\r\n        FalconServiceState=column_ifexists('FalconServiceState_s', customFields.FalconServiceState),\r\n        ScriptContent=column_ifexists('ScriptContent_s', customFields.ScriptContent),\r\n        OriginalContentLength=column_ifexists('OriginalContentLength_s', customFields.OriginalContentLength),\r\n        ScriptingLanguageId=column_ifexists('ScriptingLanguageId_s', customFields.ScriptingLanguageId),\r\n        ParentImageFileName=column_ifexists('ParentImageFileName_s', customFields.ParentImageFileName),\r\n        GrandparentImageFileName=column_ifexists('GrandparentImageFileName_s', customFields.GrandparentImageFileName),\r\n        ScriptContentName=column_ifexists('ScriptContentName_s', customFields.ScriptContentName),\r\n        HostProcessType=column_ifexists('HostProcessType_s', customFields.HostProcessType),\r\n        ProcessParentCommandLine=column_ifexists('ParentCommandLine_s', customFields.ProcessParentCommandLine),\r\n        ContentSHA256HashData=column_ifexists('ContentSHA256HashData_s', customFields.ContentSHA256HashData),\r\n        ProcessGrandparentCommandLine=column_ifexists('GrandparentCommandLine_s', customFields.ProcessGrandparentCommandLine)\r\n    | project\r\n        TimeGenerated, \r\n        EventVendor,\r\n        EventProduct,\r\n        FileMode,\r\n        DeviceSerialNumber,\r\n        IcmpCode,\r\n        IcmpType,\r\n        LastUpdateInstalledTime,\r\n        RebootRequired,\r\n        PendingUpdateIds,\r\n        InstalledUpdateIds,\r\n        InstalledUpdateExtendedStatus,\r\n        SupersededUpdateIds,\r\n        ConfigurationDescriptorValue,\r\n        ConfigurationDescriptorAttributes,\r\n        DeviceDescriptorUniqueIdentifier,\r\n        ConfigurationDescriptorName,\r\n        ConfigurationDescriptorNumInterfaces,\r\n        ConfigurationDescriptorMaxPowerDraw,\r\n        ScreenshotsTakenCount,\r\n        ExitCode,\r\n        ParentProcessId,\r\n        DstUserIdentity,\r\n        NetworkListenCount,\r\n        SuspiciousRawDiskReadCount,\r\n        NetworkBindCount,\r\n        NetworkRecvAcceptCount,\r\n        ContextData,\r\n        Id,\r\n        NewExecutableWrittenCount,\r\n        ExeAndServiceCount,\r\n        NetworkCloseCount,\r\n        SuspectStackCount,\r\n        CLICreationCount,\r\n        UnsignedModuleLoadCount,\r\n        UserTime,\r\n        EventMessage,\r\n        RawProcessId,\r\n        ContextTimeStamp,\r\n        AllocateVirtualMemoryCount,\r\n        ContextProcessId,\r\n        ServiceEventCount,\r\n        SnapshotFileOpenCount,\r\n        RemovableDiskFileWrittenCount,\r\n        InjectedDllCount,\r\n        ModuleLoadCount,\r\n        UserMemoryProtectExecutableCount,\r\n        NetworkCapableAsepWriteCount,\r\n        TargetProcessId,\r\n        DnsRequestCount,\r\n        ArchiveFileWrittenCount,\r\n        Entitlements,\r\n        Name,\r\n        ProcessStartTime,\r\n        SetThreadContextCount,\r\n        SuspiciousCredentialModuleLoadCount,\r\n        DvcInterfaceGuid,\r\n        Cid,\r\n        FileDeletedCount,\r\n        UserMemoryAllocateExecutableCount,\r\n        DirectoryCreatedCount,\r\n        NetworkConnectCountUdp,\r\n        QueueApcCount,\r\n        ContextThreadId,\r\n        Aip,\r\n        SuspiciousFontLoadCount,\r\n        ConHostId,\r\n        NetworkConnectCount,\r\n        BinaryExecutableWrittenCount,\r\n        CycleTime,\r\n        DvcOs,\r\n        ConHostProcessId,\r\n        PrivilegedProcessHandleCount,\r\n        MaxThreadCount,\r\n        ImageSubsystem,\r\n        GenericFileWrittenCount,\r\n        EffectiveTransmissionClass,\r\n        ScriptEngineInvocationCount,\r\n        RunDllInvocationCount,\r\n        timestamp,\r\n        CreateProcessCount,\r\n        KernelTime,\r\n        DirectoryEnumeratedCount,\r\n        ConfigStateHash,\r\n        AsepWrittenCount,\r\n        SuspiciousDnsRequestCount,\r\n        DocumentFileWrittenCount,\r\n        ProtectVirtualMemoryCount,\r\n        ProcessHashSha256,\r\n        UserMemoryProtectExecutableRemoteCount,\r\n        ConfigBuild,\r\n        UserMemoryAllocateExecutableRemoteCount,\r\n        ExecutableDeletedCount,\r\n        RegKeySecurityDecreasedCount,\r\n        InjectedThreadCount,\r\n        NetworkModuleLoadCount,\r\n        WindowTitle,\r\n        ProcessCreateFlags,\r\n        IntegrityLevel,\r\n        SourceProcessId,\r\n        ProcessHashSha1,\r\n        TokenType,\r\n        ProcessEndTime,\r\n        AuthenticodeHashData,\r\n        ParentBaseFileName,\r\n        SessionId,\r\n        Tags,\r\n        ProcessHashMd5,\r\n        ProcessSxsFlags,\r\n        AuthenticationId,\r\n        WindowFlags,\r\n        ProcessCommandLine,\r\n        ParentAuthenticationId,\r\n        FileName,\r\n        SourceThreadId,\r\n        ProcessParameterFlags,\r\n        SignInfoFlags,\r\n        ChannelVersion,\r\n        ChannelVersionRequired,\r\n        ChannelId,\r\n        DnsResponseType,\r\n        IP4Records,\r\n        CNAMERecords,\r\n        QueryStatus,\r\n        InterfaceIndex,\r\n        DualRequest,\r\n        FirstIP4Record,\r\n        UrlDomain,\r\n        RespondingDnsServer,\r\n        RequestType,\r\n        FirewallRuleId,\r\n        Options,\r\n        MinorFunction,\r\n        FileIdentifier,\r\n        Information,\r\n        ShareAccess,\r\n        FileObject,\r\n        FilePermission,\r\n        Status,\r\n        IrpFlags,\r\n        MajorFunction,\r\n        DesiredAccess,\r\n        OperationFlags,\r\n        TargetFileName,\r\n        CallStackModuleNamesVersion,\r\n        CsaProcessDataCollectionInstanceId,\r\n        CallStackModuleNames,\r\n        CreateProcessType,\r\n        EtwRawProcessId,\r\n        EventMax,\r\n        EtwRawThreadId,\r\n        Flags,\r\n        EventMin,\r\n        RawThreadId,\r\n        SrcIpAddr,\r\n        ConnectionFlags,\r\n        DstIpPort,\r\n        SrcIpPort,\r\n        Protocol,\r\n        DstIpAddr,\r\n        ConnectionDirection,\r\n        InContext,\r\n        NetworkContainmentState,\r\n        ConfigIDBase,\r\n        SensorStateBitMap,\r\n        ConfigurationVersion,\r\n        ConfigIDPlatform,\r\n        ConfigIDBuild,\r\n        ProvisionState,\r\n        Size,\r\n        IsOnNetwork,\r\n        DiskParentDeviceInstanceId,\r\n        TemporaryFileName,\r\n        FileEcpBitmask,\r\n        IsOnRemovableDisk,\r\n        ModuleCharacteristics,\r\n        OriginalEventTimeStamp,\r\n        MappedFromUserMode,\r\n        TreeId,\r\n        PrimaryModule,\r\n        UserIsAdmin,\r\n        LogoffTime,\r\n        LogonTime,\r\n        LogonDomain,\r\n        RemoteAccount,\r\n        UserFlags,\r\n        LogonServer,\r\n        DstUserName,\r\n        LogonType,\r\n        AuthenticationPackage,\r\n        UserPrincipal,\r\n        PasswordLastSet,\r\n        UserLogoffType,\r\n        UserLogonFlags,\r\n        Parameter2,\r\n        Parameter1,\r\n        Parameter3,\r\n        Line,\r\n        ErrorStatus,\r\n        Facility,\r\n        File,\r\n        PublicKeys,\r\n        HandleCreated,\r\n        ExtendedKeyUsages,\r\n        FileSigningTime,\r\n        Object1Name,\r\n        Object1Type,\r\n        Certificate,\r\n        RpcClientProcessId,\r\n        SyntheticPR2Flags,\r\n        MachOSubType,\r\n        SessionProcessId,\r\n        SVUID,\r\n        ProcessGroupId,\r\n        GID,\r\n        SVGID,\r\n        UID,\r\n        RGID,\r\n        RUID,\r\n        NeighborList,\r\n        DownloadServer,\r\n        DownloadPath,\r\n        DownloadPort,\r\n        CompletionEventId,\r\n        IsTransactedFile,\r\n        WindowStation,\r\n        BoundingLimitCount,\r\n        ProcessBehaviorBitfield,\r\n        Desktop,\r\n        PatternId,\r\n        ExclusionType,\r\n        ExclusionSource,\r\n        DriverLoadFlags,\r\n        CompanyName,\r\n        OriginalFilename,\r\n        FileVersion,\r\n        GrandParentBaseFileName,\r\n        ShowWindowFlags,\r\n        ThreadStartAddress,\r\n        InjectedThreadFlag,\r\n        UserThread,\r\n        TargetThreadModule,\r\n        TargetThreadId,\r\n        ThreadStartContext,\r\n        SourceThreadStartAddress,\r\n        InterfaceGuid,\r\n        InterfaceVersion,\r\n        RpcClientThreadId,\r\n        TaskXml,\r\n        TaskAuthor,\r\n        TaskName,\r\n        RpcOpNum,\r\n        TaskExecArguments,\r\n        TaskExecCommand,\r\n        RpcNestingLevel,\r\n        ErrorLocation,\r\n        ErrorReason,\r\n        Parameter64_1,\r\n        ErrorSource,\r\n        ParameterSizedBuffer_1,\r\n        ErrorCode,\r\n        DeviceProductId,\r\n        DeviceVersion,\r\n        DeviceTimeStamp,\r\n        DeviceInstanceId,\r\n        DeviceDescriptorSetHash,\r\n        DeviceVendorId,\r\n        DeviceManufacturer,\r\n        DeviceProduct,\r\n        GroupRid,\r\n        UserRid,\r\n        DomainSid,\r\n        LightningLatencyState,\r\n        UnixMode,\r\n        VnodeType,\r\n        TargetDirectoryName,\r\n        ApiReturnValue,\r\n        ServiceDisplayName,\r\n        LinkName,\r\n        VersionInfo,\r\n        LanguageId,\r\n        AsepFlags,\r\n        RegObjectName,\r\n        Data1,\r\n        RegOperationType,\r\n        ProcessArgs,\r\n        RegStringValue,\r\n        RegType,\r\n        AsepClass,\r\n        AsepIndex,\r\n        RegValueName,\r\n        AsepValueType,\r\n        LocalSession,\r\n        DstDvcHostname,\r\n        PrivilegesBitmask,\r\n        EnabledPrivilegesBitmask,\r\n        UserGroupsBitmask,\r\n        Timeout,\r\n        ProcessCount,\r\n        SuppressType,\r\n        BoundedCount,\r\n        IP6Records,\r\n        FirstIP6Record,\r\n        WmiQuery,\r\n        WmiNamespaceName,\r\n        RegClassificationIndex,\r\n        RegClassificationFlags,\r\n        RegClassification,\r\n        SystemTableIndex,\r\n        ScreenshotType,\r\n        SubStatus,\r\n        UmppaInjectAbortCount,\r\n        UmppaInjectFailedCount,\r\n        UmppaInjectionType,\r\n        UmppaInjectLoadFailCount,\r\n        UmppaInjectCfgCheckCount,\r\n        UmppaInjectExtensionErrorCount,\r\n        UmppaInjectInvalidThreadCount,\r\n        UmppaInjectFileSectionCount,\r\n        TotalCount,\r\n        UmppaInjectLoadErrorCount,\r\n        UmppaInjectBadAlertCount,\r\n        UmppaInjectApcInsertionCount,\r\n        UmppaInjectCopyFailCount,\r\n        FirewallRule,\r\n        RegNumericValue,\r\n        VolumeDriveLetter,\r\n        VolumeSnapshotName,\r\n        VolumeName,\r\n        UserCanonical,\r\n        LogonId,\r\n        ConfigStateData,\r\n        FirewallProfile,\r\n        FirewallOption,\r\n        FirewallOptionNumericValue,\r\n        SmbShareName,\r\n        TargetSHA256HashData,\r\n        IsCpuDataCommonOnAllCores,\r\n        SpibarDataFrap,\r\n        EfiVariableDbxSha256Hash,\r\n        PciConfigDataBgsm,\r\n        PciConfigDataDpr,\r\n        CpuDataCommonSmrrSupported,\r\n        SpibarDataHsfc,\r\n        EfiVariableSecureBoot,\r\n        PciConfigDataMesegMask,\r\n        PciConfigDataTolud,\r\n        EfiVariableDbxAttributes,\r\n        PciConfigDataPavpc,\r\n        EfiVariableCustomModeAttributes,\r\n        SpibarDataFreg3,\r\n        SpibarDataFreg4,\r\n        SpibarDataFreg1,\r\n        SpibarDataFreg2,\r\n        SpibarDataFreg0,\r\n        EfiSupported,\r\n        EfiVariablePkAttributes,\r\n        CpuDataCommonPrmrrUncorePhysicalMask,\r\n        PciConfigDataGenPmconA,\r\n        PciConfigDataTsegmb,\r\n        SpibarDataVscc0,\r\n        EfiVariablePkSha256Hash,\r\n        SpibarDataVscc1,\r\n        CpuDataCommonSmrrPhysicalMask,\r\n        NorthBridgeDeviceId,\r\n        IsNorthBridgeSupported,\r\n        PciConfigDataTom,\r\n        EfiVariableKekSha256Hash,\r\n        SouthBridgeVendorId,\r\n        EfiVariableSignatureSupport,\r\n        MmioDataTco1Cnt,\r\n        EfiVariableKekAttributes,\r\n        FirmwareAnalysisCpuSupported,\r\n        MmioDataSmiEn,\r\n        CpuDataCommonPrmrrUncoreSupported,\r\n        NorthBridgeVendorId,\r\n        CpuDataCommonMsrApicBase,\r\n        EfiVariableDbAttributes,\r\n        SpibarDataPr2,\r\n        SpibarDataBfpr,\r\n        SpibarDataPr1,\r\n        EfiVariableSecureBootAttributes,\r\n        SpibarDataPr0,\r\n        IsSouthBridgeSupported,\r\n        PciConfigDataHfsts1,\r\n        CpuDataCommonMsrFeatureControl,\r\n        PciConfigDataRemaplimit,\r\n        CpuDataCommonSiliconDebugFeatureControl,\r\n        CpuDataCommonSmrrPhysicalBase,\r\n        SouthBridgeDeviceId,\r\n        CpuDataCommonPrmrrPhysicalMask,\r\n        EfiVariableDbSha256Hash,\r\n        SpibarDataHsfs,\r\n        PciConfigDataRemapbase,\r\n        EfiVariableCustomMode,\r\n        PciConfigDataGgc,\r\n        PciConfigDataTouud,\r\n        SpibarDataPr4,\r\n        SpibarDataPr3,\r\n        CpuDataCommonPrmrrSupported,\r\n        PciConfigDataSmramc,\r\n        EfiVariableSignatureSupportAttributes,\r\n        PciConfigDataBdsm,\r\n        EfiVariableSetupModeAttributes,\r\n        EfiVariableSetupMode,\r\n        PciConfigDataBiosCntl,\r\n        PciConfigDataMesegBase,\r\n        SourceFileName,\r\n        NewFileIdentifier,\r\n        FeatureVector,\r\n        ModelPrediction,\r\n        Malicious,\r\n        FeatureExtractionVersion,\r\n        FXFileSize,\r\n        MLModelVersion,\r\n        FontBufferLength,\r\n        FontFileCount,\r\n        FontLoadOperation,\r\n        FontBuffer,\r\n        FontFileName,\r\n        TemplateInstanceId,\r\n        PatternDisposition,\r\n        ServicePackMajor,\r\n        ProductSku,\r\n        PointerSize,\r\n        ProductName,\r\n        AgentVersion,\r\n        ServicePackMinor,\r\n        SuiteMask,\r\n        SubBuildNumber,\r\n        PlatformId,\r\n        BuildType,\r\n        MajorVersion,\r\n        ProductType,\r\n        MinorVersion,\r\n        CheckedBuild,\r\n        BuildNumber,\r\n        RFMState,\r\n        FirmwareAnalysisEclControlInterfaceVersion,\r\n        FirmwareAnalysisEclConsumerInterfaceVersion,\r\n        BootTimeFunctionalityLevel,\r\n        ReasonOfFunctionalityLevel,\r\n        CurrentFunctionalityLevel,\r\n        PciAttachmentState,\r\n        LocalAddressIP6,\r\n        RemoteAddressIP6,\r\n        RegBinaryValue,\r\n        ServiceDescription,\r\n        ServiceSecurity,\r\n        ServiceImagePath,\r\n        ServiceStart,\r\n        ServiceType,\r\n        ServiceFailureActions,\r\n        ServiceErrorControl,\r\n        SymbolicLinkName,\r\n        SymbolicLinkTarget,\r\n        DevicePropertyClassName,\r\n        DeviceActiveConfigurationNumber,\r\n        DevicePropertyClassGuid,\r\n        DeviceUsbSubclass,\r\n        ParentHubInstanceId,\r\n        DeviceConnectionStatus,\r\n        DeviceUsbClass,\r\n        ParentHubPort,\r\n        DevicePropertyManufacturer,\r\n        DevicePropertyLocationInformation,\r\n        DeviceProtocol,\r\n        DevicePropertyDeviceDescription,\r\n        DeviceUsbVersion,\r\n        ModuleBaseAddress,\r\n        ModuleSize,\r\n        IsOnClearCaseMvfs,\r\n        DllCharacteristics,\r\n        ActiveCpuCount,\r\n        MemoryTotal,\r\n        BillingType,\r\n        ConnectionCipher,\r\n        ConnectType,\r\n        ConnectionProtocol,\r\n        ConnectionHash,\r\n        ConnectTime,\r\n        ConnectionHashStrength,\r\n        FailedConnectCount,\r\n        ConnectionCipherStrength,\r\n        ConnectionExchangeStrength,\r\n        ConnectionExchange,\r\n        PreviousConnectTime,\r\n        FalconServiceServletErrors,\r\n        FalconServiceComponent,\r\n        FalconServiceServletStarts,\r\n        FalconServiceState,\r\n        ScriptContent,\r\n        OriginalContentLength,\r\n        ScriptingLanguageId,\r\n        ParentImageFileName,\r\n        GrandparentImageFileName,\r\n        ScriptContentName,\r\n        HostProcessType,\r\n        ProcessParentCommandLine,\r\n        ContentSHA256HashData,\r\n        ProcessGrandparentCommandLine\r\n};\r\nCrowdstrikeReplicatorLogs_view\r\n",
                "version": 1,
                "tags": [
                  {
                    "name": "description",
                    "value": "CrowdstrikeReplicator"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'CrowdstrikeReplicator'),'/'))))]",
              "dependsOn": [
                "[concat(parameters('workspace'),'/','CrowdstrikeReplicator')]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'CrowdstrikeReplicator')]",
                "contentId": "CrowdstrikeReplicator-Parser",
                "kind": "Parser",
                "version": "1.0.0",
                "source": {
                  "name": "CrowdStrike Falcon Endpoint Protection",
                  "kind": "Solution",
                  "sourceId": "azuresentinel.azure-sentinel-solution-crowdstrikefalconep"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "support@microsoft.com"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "PackageVersion": "2.0.7"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2021-06-01",
      "name": "[concat(parameters('workspace'),'/','CrowdstrikeReplicator')]",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "eTag": "*",
        "displayName": "CrowdstrikeReplicator",
        "category": "Samples",
        "functionAlias": "CrowdstrikeReplicator",
        "query": "\nlet CrowdstrikeReplicatorLogs_view  = view () { \r\n    CrowdstrikeReplicatorLogs_CL\r\n    | extend customFields = parse_json(column_ifexists('custom_fields_message_s', ''))\r\n    | extend \r\n        EventVendor=\"Crowdstrike\",\r\n        EventProduct=\"Replicator\",\r\n        FileMode=column_ifexists('FileMode_s', customFields.FileMode),\r\n        DeviceSerialNumber=column_ifexists('DeviceSerialNumber_s', customFields.DeviceSerialNumber),\r\n        IcmpCode=column_ifexists('IcmpCode_s', customFields.IcmpCode),\r\n        IcmpType=column_ifexists('IcmpType_s', customFields.IcmpType),\r\n        LastUpdateInstalledTime=column_ifexists('LastUpdateInstalledTime_s', customFields.LastUpdateInstalledTime),\r\n        RebootRequired=column_ifexists('RebootRequired_s', customFields.RebootRequired),\r\n        PendingUpdateIds=column_ifexists('PendingUpdateIds_s', customFields.PendingUpdateIds),\r\n        InstalledUpdateIds=column_ifexists('InstalledUpdateIds_s', customFields.InstalledUpdateIds),\r\n        InstalledUpdateExtendedStatus=column_ifexists('InstalledUpdateExtendedStatus_s', customFields.InstalledUpdateExtendedStatus),\r\n        SupersededUpdateIds=column_ifexists('SupersededUpdateIds_s', customFields.SupersededUpdateIds),\r\n        ConfigurationDescriptorValue=column_ifexists('ConfigurationDescriptorValue_s', customFields.ConfigurationDescriptorValue),\r\n        ConfigurationDescriptorAttributes=column_ifexists('ConfigurationDescriptorAttributes_s', customFields.ConfigurationDescriptorAttributes),\r\n        DeviceDescriptorUniqueIdentifier=column_ifexists('DeviceDescriptorUniqueIdentifier_s', customFields.DeviceDescriptorUniqueIdentifier),\r\n        ConfigurationDescriptorName=column_ifexists('ConfigurationDescriptorName_s', customFields.ConfigurationDescriptorName),\r\n        ConfigurationDescriptorNumInterfaces=column_ifexists('ConfigurationDescriptorNumInterfaces_s', customFields.ConfigurationDescriptorNumInterfaces),\r\n        ConfigurationDescriptorMaxPowerDraw=column_ifexists('ConfigurationDescriptorMaxPowerDraw_s', customFields.ConfigurationDescriptorMaxPowerDraw),\r\n        ScreenshotsTakenCount=column_ifexists('ScreenshotsTakenCount_s', customFields.ScreenshotsTakenCount),\r\n        ExitCode=column_ifexists('ExitCode_s', customFields.ExitCode),\r\n        ParentProcessId=column_ifexists('ParentProcessId_s', customFields.ParentProcessId),\r\n        DstUserIdentity=column_ifexists('UserSid_s', customFields.DstUserIdentity),\r\n        NetworkListenCount=column_ifexists('NetworkListenCount_s', customFields.NetworkListenCount),\r\n        SuspiciousRawDiskReadCount=column_ifexists('SuspiciousRawDiskReadCount_s', customFields.SuspiciousRawDiskReadCount),\r\n        NetworkBindCount=column_ifexists('NetworkBindCount_s', customFields.NetworkBindCount),\r\n        NetworkRecvAcceptCount=column_ifexists('NetworkRecvAcceptCount_s', customFields.NetworkRecvAcceptCount),\r\n        ContextData=column_ifexists('ContextData_s', customFields.ContextData),\r\n        Id=column_ifexists('id_g', customFields.Id),\r\n        NewExecutableWrittenCount=column_ifexists('NewExecutableWrittenCount_s', customFields.NewExecutableWrittenCount),\r\n        ExeAndServiceCount=column_ifexists('ExeAndServiceCount_s', customFields.ExeAndServiceCount),\r\n        NetworkCloseCount=column_ifexists('NetworkCloseCount_s', customFields.NetworkCloseCount),\r\n        SuspectStackCount=column_ifexists('SuspectStackCount_s', customFields.SuspectStackCount),\r\n        CLICreationCount=column_ifexists('CLICreationCount_s', customFields.CLICreationCount),\r\n        UnsignedModuleLoadCount=column_ifexists('UnsignedModuleLoadCount_s', customFields.UnsignedModuleLoadCount),\r\n        UserTime=column_ifexists('UserTime_s', customFields.UserTime),\r\n        EventMessage=column_ifexists('event_simpleName_s', customFields.EventMessage),\r\n        RawProcessId=column_ifexists('RawProcessId_s', customFields.RawProcessId),\r\n        ContextTimeStamp=column_ifexists('ContextTimeStamp_s', customFields.ContextTimeStamp),\r\n        AllocateVirtualMemoryCount=column_ifexists('AllocateVirtualMemoryCount_s', customFields.AllocateVirtualMemoryCount),\r\n        ContextProcessId=column_ifexists('ContextProcessId_s', customFields.ContextProcessId),\r\n        ServiceEventCount=column_ifexists('ServiceEventCount_s', customFields.ServiceEventCount),\r\n        SnapshotFileOpenCount=column_ifexists('SnapshotFileOpenCount_s', customFields.SnapshotFileOpenCount),\r\n        RemovableDiskFileWrittenCount=column_ifexists('RemovableDiskFileWrittenCount_s', customFields.RemovableDiskFileWrittenCount),\r\n        InjectedDllCount=column_ifexists('InjectedDllCount_s', customFields.InjectedDllCount),\r\n        ModuleLoadCount=column_ifexists('ModuleLoadCount_s', customFields.ModuleLoadCount),\r\n        UserMemoryProtectExecutableCount=column_ifexists('UserMemoryProtectExecutableCount_s', customFields.UserMemoryProtectExecutableCount),\r\n        NetworkCapableAsepWriteCount=column_ifexists('NetworkCapableAsepWriteCount_s', customFields.NetworkCapableAsepWriteCount),\r\n        TargetProcessId=column_ifexists('TargetProcessId_s', customFields.TargetProcessId),\r\n        DnsRequestCount=column_ifexists('DnsRequestCount_s', customFields.DnsRequestCount),\r\n        ArchiveFileWrittenCount=column_ifexists('ArchiveFileWrittenCount_s', customFields.ArchiveFileWrittenCount),\r\n        Entitlements=column_ifexists('Entitlements_s', customFields.Entitlements),\r\n        Name=column_ifexists('name_s', customFields.Name),\r\n        ProcessStartTime=column_ifexists('ProcessStartTime_s', customFields.ProcessStartTime),\r\n        SetThreadContextCount=column_ifexists('SetThreadContextCount_s', customFields.SetThreadContextCount),\r\n        SuspiciousCredentialModuleLoadCount=column_ifexists('SuspiciousCredentialModuleLoadCount_s', customFields.SuspiciousCredentialModuleLoadCount),\r\n        DvcInterfaceGuid=column_ifexists('aid_g', customFields.DvcInterfaceGuid),\r\n        Cid=column_ifexists('cid_g', customFields.Cid),\r\n        FileDeletedCount=column_ifexists('FileDeletedCount_s', customFields.FileDeletedCount),\r\n        UserMemoryAllocateExecutableCount=column_ifexists('UserMemoryAllocateExecutableCount_s', customFields.UserMemoryAllocateExecutableCount),\r\n        DirectoryCreatedCount=column_ifexists('DirectoryCreatedCount_s', customFields.DirectoryCreatedCount),\r\n        NetworkConnectCountUdp=column_ifexists('NetworkConnectCountUdp_s', customFields.NetworkConnectCountUdp),\r\n        QueueApcCount=column_ifexists('QueueApcCount_s', customFields.QueueApcCount),\r\n        ContextThreadId=column_ifexists('ContextThreadId_s', customFields.ContextThreadId),\r\n        Aip=column_ifexists('aip_s', customFields.Aip),\r\n        SuspiciousFontLoadCount=column_ifexists('SuspiciousFontLoadCount_s', customFields.SuspiciousFontLoadCount),\r\n        ConHostId=column_ifexists('ConHostId_s', customFields.ConHostId),\r\n        NetworkConnectCount=column_ifexists('NetworkConnectCount_s', customFields.NetworkConnectCount),\r\n        BinaryExecutableWrittenCount=column_ifexists('BinaryExecutableWrittenCount_s', customFields.BinaryExecutableWrittenCount),\r\n        CycleTime=column_ifexists('CycleTime_s', customFields.CycleTime),\r\n        DvcOs=column_ifexists('event_platform_s', customFields.DvcOs),\r\n        ConHostProcessId=column_ifexists('ConHostProcessId_s', customFields.ConHostProcessId),\r\n        PrivilegedProcessHandleCount=column_ifexists('PrivilegedProcessHandleCount_s', customFields.PrivilegedProcessHandleCount),\r\n        MaxThreadCount=column_ifexists('MaxThreadCount_s', customFields.MaxThreadCount),\r\n        ImageSubsystem=column_ifexists('ImageSubsystem_s', customFields.ImageSubsystem),\r\n        GenericFileWrittenCount=column_ifexists('GenericFileWrittenCount_s', customFields.GenericFileWrittenCount),\r\n        EffectiveTransmissionClass=column_ifexists('EffectiveTransmissionClass_s', customFields.EffectiveTransmissionClass),\r\n        ScriptEngineInvocationCount=column_ifexists('ScriptEngineInvocationCount_s', customFields.ScriptEngineInvocationCount),\r\n        RunDllInvocationCount=column_ifexists('RunDllInvocationCount_s', customFields.RunDllInvocationCount),\r\n        timestamp=column_ifexists('timestamp_s', customFields.timestamp),\r\n        CreateProcessCount=column_ifexists('CreateProcessCount_s', customFields.CreateProcessCount),\r\n        KernelTime=column_ifexists('KernelTime_s', customFields.KernelTime),\r\n        DirectoryEnumeratedCount=column_ifexists('DirectoryEnumeratedCount_s', customFields.DirectoryEnumeratedCount),\r\n        ConfigStateHash=column_ifexists('ConfigStateHash_s', customFields.ConfigStateHash),\r\n        AsepWrittenCount=column_ifexists('AsepWrittenCount_s', customFields.AsepWrittenCount),\r\n        SuspiciousDnsRequestCount=column_ifexists('SuspiciousDnsRequestCount_s', customFields.SuspiciousDnsRequestCount),\r\n        DocumentFileWrittenCount=column_ifexists('DocumentFileWrittenCount_s', customFields.DocumentFileWrittenCount),\r\n        ProtectVirtualMemoryCount=column_ifexists('ProtectVirtualMemoryCount_s', customFields.ProtectVirtualMemoryCount),\r\n        ProcessHashSha256=column_ifexists('SHA256HashData_s', customFields.ProcessHashSha256),\r\n        UserMemoryProtectExecutableRemoteCount=column_ifexists('UserMemoryProtectExecutableRemoteCount_s', customFields.UserMemoryProtectExecutableRemoteCount),\r\n        ConfigBuild=column_ifexists('ConfigBuild_s', customFields.ConfigBuild),\r\n        UserMemoryAllocateExecutableRemoteCount=column_ifexists('UserMemoryAllocateExecutableRemoteCount_s', customFields.UserMemoryAllocateExecutableRemoteCount),\r\n        ExecutableDeletedCount=column_ifexists('ExecutableDeletedCount_s', customFields.ExecutableDeletedCount),\r\n        RegKeySecurityDecreasedCount=column_ifexists('RegKeySecurityDecreasedCount_s', customFields.RegKeySecurityDecreasedCount),\r\n        InjectedThreadCount=column_ifexists('InjectedThreadCount_s', customFields.InjectedThreadCount),\r\n        NetworkModuleLoadCount=column_ifexists('NetworkModuleLoadCount_s', customFields.NetworkModuleLoadCount),\r\n        WindowTitle=column_ifexists('WindowTitle_s', customFields.WindowTitle),\r\n        ProcessCreateFlags=column_ifexists('ProcessCreateFlags_s', customFields.ProcessCreateFlags),\r\n        IntegrityLevel=column_ifexists('IntegrityLevel_s', customFields.IntegrityLevel),\r\n        SourceProcessId=column_ifexists('SourceProcessId_s', customFields.SourceProcessId),\r\n        ProcessHashSha1=column_ifexists('SHA1HashData_s', customFields.ProcessHashSha1),\r\n        TokenType=column_ifexists('TokenType_s', customFields.TokenType),\r\n        ProcessEndTime=column_ifexists('ProcessEndTime_s', customFields.ProcessEndTime),\r\n        AuthenticodeHashData=column_ifexists('AuthenticodeHashData_s', customFields.AuthenticodeHashData),\r\n        ParentBaseFileName=column_ifexists('ParentBaseFileName_s', customFields.ParentBaseFileName),\r\n        SessionId=column_ifexists('SessionId_s', customFields.SessionId),\r\n        Tags=column_ifexists('Tags_s', customFields.Tags),\r\n        ProcessHashMd5=column_ifexists('MD5HashData_g', customFields.ProcessHashMd5),\r\n        ProcessSxsFlags=column_ifexists('ProcessSxsFlags_s', customFields.ProcessSxsFlags),\r\n        AuthenticationId=column_ifexists('AuthenticationId_s', customFields.AuthenticationId),\r\n        WindowFlags=column_ifexists('WindowFlags_s', customFields.WindowFlags),\r\n        ProcessCommandLine=column_ifexists('CommandLine_s', customFields.ProcessCommandLine),\r\n        ParentAuthenticationId=column_ifexists('ParentAuthenticationId_s', customFields.ParentAuthenticationId),\r\n        FileName=column_ifexists('ImageFileName_s', customFields.FileName),\r\n        SourceThreadId=column_ifexists('SourceThreadId_s', customFields.SourceThreadId),\r\n        ProcessParameterFlags=column_ifexists('ProcessParameterFlags_s', customFields.ProcessParameterFlags),\r\n        SignInfoFlags=column_ifexists('SignInfoFlags_s', customFields.SignInfoFlags),\r\n        ChannelVersion=column_ifexists('ChannelVersion_s', customFields.ChannelVersion),\r\n        ChannelVersionRequired=column_ifexists('ChannelVersionRequired_s', customFields.ChannelVersionRequired),\r\n        ChannelId=column_ifexists('ChannelId_s', customFields.ChannelId),\r\n        DnsResponseType=column_ifexists('DnsResponseType_s', customFields.DnsResponseType),\r\n        IP4Records=column_ifexists('IP4Records_s', customFields.IP4Records),\r\n        CNAMERecords=column_ifexists('CNAMERecords_s', customFields.CNAMERecords),\r\n        QueryStatus=column_ifexists('QueryStatus_s', customFields.QueryStatus),\r\n        InterfaceIndex=column_ifexists('InterfaceIndex_s', customFields.InterfaceIndex),\r\n        DualRequest=column_ifexists('DualRequest_s', customFields.DualRequest),\r\n        FirstIP4Record=column_ifexists('FirstIP4Record_s', customFields.FirstIP4Record),\r\n        UrlDomain=column_ifexists('DomainName_s', customFields.UrlDomain),\r\n        RespondingDnsServer=column_ifexists('RespondingDnsServer_s', customFields.RespondingDnsServer),\r\n        RequestType=column_ifexists('RequestType_s', customFields.RequestType),\r\n        FirewallRuleId=column_ifexists('FirewallRuleId_s', customFields.FirewallRuleId),\r\n        Options=column_ifexists('Options_s', customFields.Options),\r\n        MinorFunction=column_ifexists('MinorFunction_s', customFields.MinorFunction),\r\n        FileIdentifier=column_ifexists('FileIdentifier_s', customFields.FileIdentifier),\r\n        Information=column_ifexists('Information_s', customFields.Information),\r\n        ShareAccess=column_ifexists('ShareAccess_s', customFields.ShareAccess),\r\n        FileObject=column_ifexists('FileObject_s', customFields.FileObject),\r\n        FilePermission=column_ifexists('FileAttributes_s', customFields.FilePermission),\r\n        Status=column_ifexists('Status_s', customFields.Status),\r\n        IrpFlags=column_ifexists('IrpFlags_s', customFields.IrpFlags),\r\n        MajorFunction=column_ifexists('MajorFunction_s', customFields.MajorFunction),\r\n        DesiredAccess=column_ifexists('DesiredAccess_s', customFields.DesiredAccess),\r\n        OperationFlags=column_ifexists('OperationFlags_s', customFields.OperationFlags),\r\n        TargetFileName=column_ifexists('TargetFileName_s', customFields.TargetFileName),\r\n        CallStackModuleNamesVersion=column_ifexists('CallStackModuleNamesVersion_s', customFields.CallStackModuleNamesVersion),\r\n        CsaProcessDataCollectionInstanceId=column_ifexists('CsaProcessDataCollectionInstanceId_s', customFields.CsaProcessDataCollectionInstanceId),\r\n        CallStackModuleNames=column_ifexists('CallStackModuleNames_s', customFields.CallStackModuleNames),\r\n        CreateProcessType=column_ifexists('CreateProcessType_s', customFields.CreateProcessType),\r\n        EtwRawProcessId=column_ifexists('EtwRawProcessId_s', customFields.EtwRawProcessId),\r\n        EventMax=column_ifexists('EventMax_s', customFields.EventMax),\r\n        EtwRawThreadId=column_ifexists('EtwRawThreadId_s', customFields.EtwRawThreadId),\r\n        Flags=column_ifexists('Flags_s', customFields.Flags),\r\n        EventMin=column_ifexists('EventMin_s', customFields.EventMin),\r\n        RawThreadId=column_ifexists('RawThreadId_s', customFields.RawThreadId),\r\n        SrcIpAddr=column_ifexists('LocalAddressIP4_s', customFields.SrcIpAddr),\r\n        ConnectionFlags=column_ifexists('ConnectionFlags_s', customFields.ConnectionFlags),\r\n        DstIpPort=column_ifexists('RemotePort_s', customFields.DstIpPort),\r\n        SrcIpPort=column_ifexists('LocalPort_s', customFields.SrcIpPort),\r\n        Protocol=column_ifexists('Protocol_s', customFields.Protocol),\r\n        DstIpAddr=column_ifexists('RemoteAddressIP4_s', customFields.DstIpAddr),\r\n        ConnectionDirection=column_ifexists('ConnectionDirection_s', customFields.ConnectionDirection),\r\n        InContext=column_ifexists('InContext_s', customFields.InContext),\r\n        NetworkContainmentState=column_ifexists('NetworkContainmentState_s', customFields.NetworkContainmentState),\r\n        ConfigIDBase=column_ifexists('ConfigIDBase_s', customFields.ConfigIDBase),\r\n        SensorStateBitMap=column_ifexists('SensorStateBitMap_s', customFields.SensorStateBitMap),\r\n        ConfigurationVersion=column_ifexists('ConfigurationVersion_s', customFields.ConfigurationVersion),\r\n        ConfigIDPlatform=column_ifexists('ConfigIDPlatform_s', customFields.ConfigIDPlatform),\r\n        ConfigIDBuild=column_ifexists('ConfigIDBuild_s', customFields.ConfigIDBuild),\r\n        ProvisionState=column_ifexists('ProvisionState_s', customFields.ProvisionState),\r\n        Size=column_ifexists('Size_s', customFields.Size),\r\n        IsOnNetwork=column_ifexists('IsOnNetwork_s', customFields.IsOnNetwork),\r\n        DiskParentDeviceInstanceId=column_ifexists('DiskParentDeviceInstanceId_s', customFields.DiskParentDeviceInstanceId),\r\n        TemporaryFileName=column_ifexists('TemporaryFileName_s', customFields.TemporaryFileName),\r\n        FileEcpBitmask=column_ifexists('FileEcpBitmask_s', customFields.FileEcpBitmask),\r\n        IsOnRemovableDisk=column_ifexists('IsOnRemovableDisk_s', customFields.IsOnRemovableDisk),\r\n        ModuleCharacteristics=column_ifexists('ModuleCharacteristics_s', customFields.ModuleCharacteristics),\r\n        OriginalEventTimeStamp=column_ifexists('OriginalEventTimeStamp_s', customFields.OriginalEventTimeStamp),\r\n        MappedFromUserMode=column_ifexists('MappedFromUserMode_s', customFields.MappedFromUserMode),\r\n        TreeId=column_ifexists('TreeId_s', customFields.TreeId),\r\n        PrimaryModule=column_ifexists('PrimaryModule_s', customFields.PrimaryModule),\r\n        UserIsAdmin=column_ifexists('UserIsAdmin_s', customFields.UserIsAdmin),\r\n        LogoffTime=column_ifexists('LogoffTime_s', customFields.LogoffTime),\r\n        LogonTime=column_ifexists('LogonTime_s', customFields.LogonTime),\r\n        LogonDomain=column_ifexists('LogonDomain_s', customFields.LogonDomain),\r\n        RemoteAccount=column_ifexists('RemoteAccount_s', customFields.RemoteAccount),\r\n        UserFlags=column_ifexists('UserFlags_s', customFields.UserFlags),\r\n        LogonServer=column_ifexists('LogonServer_s', customFields.LogonServer),\r\n        DstUserName=column_ifexists('UserName_s', customFields.DstUserName),\r\n        LogonType=column_ifexists('LogonType_s', customFields.LogonType),\r\n        AuthenticationPackage=column_ifexists('AuthenticationPackage_s', customFields.AuthenticationPackage),\r\n        UserPrincipal=column_ifexists('UserPrincipal_s', customFields.UserPrincipal),\r\n        PasswordLastSet=column_ifexists('PasswordLastSet_s', customFields.PasswordLastSet),\r\n        UserLogoffType=column_ifexists('UserLogoffType_s', customFields.UserLogoffType),\r\n        UserLogonFlags=column_ifexists('UserLogonFlags_s', customFields.UserLogonFlags),\r\n        Parameter2=column_ifexists('Parameter2_s', customFields.Parameter2),\r\n        Parameter1=column_ifexists('Parameter1_s', customFields.Parameter1),\r\n        Parameter3=column_ifexists('Parameter3_s', customFields.Parameter3),\r\n        Line=column_ifexists('Line_s', customFields.Line),\r\n        ErrorStatus=column_ifexists('ErrorStatus_s', customFields.ErrorStatus),\r\n        Facility=column_ifexists('Facility_s', customFields.Facility),\r\n        File=column_ifexists('File_s', customFields.File),\r\n        PublicKeys=column_ifexists('PublicKeys_s', customFields.PublicKeys),\r\n        HandleCreated=column_ifexists('HandleCreated_s', customFields.HandleCreated),\r\n        ExtendedKeyUsages=column_ifexists('ExtendedKeyUsages_s', customFields.ExtendedKeyUsages),\r\n        FileSigningTime=column_ifexists('FileSigningTime_s', customFields.FileSigningTime),\r\n        Object1Name=column_ifexists('Object1Name_s', customFields.Object1Name),\r\n        Object1Type=column_ifexists('Object1Type_s', customFields.Object1Type),\r\n        Certificate=column_ifexists('Certificate_s', customFields.Certificate),\r\n        RpcClientProcessId=column_ifexists('RpcClientProcessId_s', customFields.RpcClientProcessId),\r\n        SyntheticPR2Flags=column_ifexists('SyntheticPR2Flags_s', customFields.SyntheticPR2Flags),\r\n        MachOSubType=column_ifexists('MachOSubType_s', customFields.MachOSubType),\r\n        SessionProcessId=column_ifexists('SessionProcessId_s', customFields.SessionProcessId),\r\n        SVUID=column_ifexists('SVUID_s', customFields.SVUID),\r\n        ProcessGroupId=column_ifexists('ProcessGroupId_s', customFields.ProcessGroupId),\r\n        GID=column_ifexists('GID_s', customFields.GID),\r\n        SVGID=column_ifexists('SVGID_s', customFields.SVGID),\r\n        UID=column_ifexists('UID_s', customFields.UID),\r\n        RGID=column_ifexists('RGID_s', customFields.RGID),\r\n        RUID=column_ifexists('RUID_s', customFields.RUID),\r\n        NeighborList=column_ifexists('NeighborList_s', customFields.NeighborList),\r\n        DownloadServer=column_ifexists('DownloadServer_s', customFields.DownloadServer),\r\n        DownloadPath=column_ifexists('DownloadPath_s', customFields.DownloadPath),\r\n        DownloadPort=column_ifexists('DownloadPort_s', customFields.DownloadPort),\r\n        CompletionEventId=column_ifexists('CompletionEventId_s', customFields.CompletionEventId),\r\n        IsTransactedFile=column_ifexists('IsTransactedFile_s', customFields.IsTransactedFile),\r\n        WindowStation=column_ifexists('WindowStation_s', customFields.WindowStation),\r\n        BoundingLimitCount=column_ifexists('BoundingLimitCount_s', customFields.BoundingLimitCount),\r\n        ProcessBehaviorBitfield=column_ifexists('ProcessBehaviorBitfield_s', customFields.ProcessBehaviorBitfield),\r\n        Desktop=column_ifexists('Desktop_s', customFields.Desktop),\r\n        PatternId=column_ifexists('PatternId_s', customFields.PatternId),\r\n        ExclusionType=column_ifexists('ExclusionType_s', customFields.ExclusionType),\r\n        ExclusionSource=column_ifexists('ExclusionSource_s', customFields.ExclusionSource),\r\n        DriverLoadFlags=column_ifexists('DriverLoadFlags_s', customFields.DriverLoadFlags),\r\n        CompanyName=column_ifexists('CompanyName_s', customFields.CompanyName),\r\n        OriginalFilename=column_ifexists('OriginalFilename_s', customFields.OriginalFilename),\r\n        FileVersion=column_ifexists('FileVersion_s', customFields.FileVersion),\r\n        GrandParentBaseFileName=column_ifexists('GrandParentBaseFileName_s', customFields.GrandParentBaseFileName),\r\n        ShowWindowFlags=column_ifexists('ShowWindowFlags_s', customFields.ShowWindowFlags),\r\n        ThreadStartAddress=column_ifexists('ThreadStartAddress_s', customFields.ThreadStartAddress),\r\n        InjectedThreadFlag=column_ifexists('InjectedThreadFlag_s', customFields.InjectedThreadFlag),\r\n        UserThread=column_ifexists('UserThread_s', customFields.UserThread),\r\n        TargetThreadModule=column_ifexists('TargetThreadModule_s', customFields.TargetThreadModule),\r\n        TargetThreadId=column_ifexists('TargetThreadId_s', customFields.TargetThreadId),\r\n        ThreadStartContext=column_ifexists('ThreadStartContext_s', customFields.ThreadStartContext),\r\n        SourceThreadStartAddress=column_ifexists('SourceThreadStartAddress_s', customFields.SourceThreadStartAddress),\r\n        InterfaceGuid=column_ifexists('InterfaceGuid_g', customFields.InterfaceGuid),\r\n        InterfaceVersion=column_ifexists('InterfaceVersion_s', customFields.InterfaceVersion),\r\n        RpcClientThreadId=column_ifexists('RpcClientThreadId_s', customFields.RpcClientThreadId),\r\n        TaskXml=column_ifexists('TaskXml_s', customFields.TaskXml),\r\n        TaskAuthor=column_ifexists('TaskAuthor_s', customFields.TaskAuthor),\r\n        TaskName=column_ifexists('TaskName_s', customFields.TaskName),\r\n        RpcOpNum=column_ifexists('RpcOpNum_s', customFields.RpcOpNum),\r\n        TaskExecArguments=column_ifexists('TaskExecArguments_s', customFields.TaskExecArguments),\r\n        TaskExecCommand=column_ifexists('TaskExecCommand_s', customFields.TaskExecCommand),\r\n        RpcNestingLevel=column_ifexists('RpcNestingLevel_s', customFields.RpcNestingLevel),\r\n        ErrorLocation=column_ifexists('ErrorLocation_s', customFields.ErrorLocation),\r\n        ErrorReason=column_ifexists('ErrorReason_s', customFields.ErrorReason),\r\n        Parameter64_1=column_ifexists('Parameter64_1_s', customFields.Parameter64_1),\r\n        ErrorSource=column_ifexists('ErrorSource_s', customFields.ErrorSource),\r\n        ParameterSizedBuffer_1=column_ifexists('ParameterSizedBuffer_1_g', customFields.ParameterSizedBuffer_1),\r\n        ErrorCode=column_ifexists('ErrorCode_s', customFields.ErrorCode),\r\n        DeviceProductId=column_ifexists('DeviceProductId_s', customFields.DeviceProductId),\r\n        DeviceVersion=column_ifexists('DeviceVersion_s', customFields.DeviceVersion),\r\n        DeviceTimeStamp=column_ifexists('DeviceTimeStamp_s', customFields.DeviceTimeStamp),\r\n        DeviceInstanceId=column_ifexists('DeviceInstanceId_s', customFields.DeviceInstanceId),\r\n        DeviceDescriptorSetHash=column_ifexists('DeviceDescriptorSetHash_s', customFields.DeviceDescriptorSetHash),\r\n        DeviceVendorId=column_ifexists('DeviceVendorId_s', customFields.DeviceVendorId),\r\n        DeviceManufacturer=column_ifexists('DeviceManufacturer_s', customFields.DeviceManufacturer),\r\n        DeviceProduct=column_ifexists('DeviceProduct_s', customFields.DeviceProduct),\r\n        GroupRid=column_ifexists('GroupRid_s', customFields.GroupRid),\r\n        UserRid=column_ifexists('UserRid_s', customFields.UserRid),\r\n        DomainSid=column_ifexists('DomainSid_s', customFields.DomainSid),\r\n        LightningLatencyState=column_ifexists('LightningLatencyState_s', customFields.LightningLatencyState),\r\n        UnixMode=column_ifexists('UnixMode_s', customFields.UnixMode),\r\n        VnodeType=column_ifexists('VnodeType_s', customFields.VnodeType),\r\n        TargetDirectoryName=column_ifexists('TargetDirectoryName_s', customFields.TargetDirectoryName),\r\n        ApiReturnValue=column_ifexists('ApiReturnValue_s', customFields.ApiReturnValue),\r\n        ServiceDisplayName=column_ifexists('ServiceDisplayName_s', customFields.ServiceDisplayName),\r\n        LinkName=column_ifexists('LinkName_s', customFields.LinkName),\r\n        VersionInfo=column_ifexists('VersionInfo_s', customFields.VersionInfo),\r\n        LanguageId=column_ifexists('LanguageId_s', customFields.LanguageId),\r\n        AsepFlags=column_ifexists('AsepFlags_s', customFields.AsepFlags),\r\n        RegObjectName=column_ifexists('RegObjectName_s', customFields.RegObjectName),\r\n        Data1=column_ifexists('Data1_s', customFields.Data1),\r\n        RegOperationType=column_ifexists('RegOperationType_s', customFields.RegOperationType),\r\n        ProcessArgs=column_ifexists('TargetCommandLineParameters_s', customFields.ProcessArgs),\r\n        RegStringValue=column_ifexists('RegStringValue_s', customFields.RegStringValue),\r\n        RegType=column_ifexists('RegType_s', customFields.RegType),\r\n        AsepClass=column_ifexists('AsepClass_s', customFields.AsepClass),\r\n        AsepIndex=column_ifexists('AsepIndex_s', customFields.AsepIndex),\r\n        RegValueName=column_ifexists('RegValueName_s', customFields.RegValueName),\r\n        AsepValueType=column_ifexists('AsepValueType_s', customFields.AsepValueType),\r\n        LocalSession=column_ifexists('LocalSession_s', customFields.LocalSession),\r\n        DstDvcHostname=column_ifexists('ClientComputerName_s', customFields.DstDvcHostname),\r\n        PrivilegesBitmask=column_ifexists('PrivilegesBitmask_s', customFields.PrivilegesBitmask),\r\n        EnabledPrivilegesBitmask=column_ifexists('EnabledPrivilegesBitmask_s', customFields.EnabledPrivilegesBitmask),\r\n        UserGroupsBitmask=column_ifexists('UserGroupsBitmask_s', customFields.UserGroupsBitmask),\r\n        Timeout=column_ifexists('Timeout_s', customFields.Timeout),\r\n        ProcessCount=column_ifexists('ProcessCount_s', customFields.ProcessCount),\r\n        SuppressType=column_ifexists('SuppressType_s', customFields.SuppressType),\r\n        BoundedCount=column_ifexists('BoundedCount_s', customFields.BoundedCount),\r\n        IP6Records=column_ifexists('IP6Records_s', customFields.IP6Records),\r\n        FirstIP6Record=column_ifexists('FirstIP6Record_s', customFields.FirstIP6Record),\r\n        WmiQuery=column_ifexists('WmiQuery_s', customFields.WmiQuery),\r\n        WmiNamespaceName=column_ifexists('WmiNamespaceName_s', customFields.WmiNamespaceName),\r\n        RegClassificationIndex=column_ifexists('RegClassificationIndex_s', customFields.RegClassificationIndex),\r\n        RegClassificationFlags=column_ifexists('RegClassificationFlags_s', customFields.RegClassificationFlags),\r\n        RegClassification=column_ifexists('RegClassification_s', customFields.RegClassification),\r\n        SystemTableIndex=column_ifexists('SystemTableIndex_s', customFields.SystemTableIndex),\r\n        ScreenshotType=column_ifexists('ScreenshotType_s', customFields.ScreenshotType),\r\n        SubStatus=column_ifexists('SubStatus_s', customFields.SubStatus),\r\n        UmppaInjectAbortCount=column_ifexists('UmppaInjectAbortCount_s', customFields.UmppaInjectAbortCount),\r\n        UmppaInjectFailedCount=column_ifexists('UmppaInjectFailedCount_s', customFields.UmppaInjectFailedCount),\r\n        UmppaInjectionType=column_ifexists('UmppaInjectionType_s', customFields.UmppaInjectionType),\r\n        UmppaInjectLoadFailCount=column_ifexists('UmppaInjectLoadFailCount_s', customFields.UmppaInjectLoadFailCount),\r\n        UmppaInjectCfgCheckCount=column_ifexists('UmppaInjectCfgCheckCount_s', customFields.UmppaInjectCfgCheckCount),\r\n        UmppaInjectExtensionErrorCount=column_ifexists('UmppaInjectExtensionErrorCount_s', customFields.UmppaInjectExtensionErrorCount),\r\n        UmppaInjectInvalidThreadCount=column_ifexists('UmppaInjectInvalidThreadCount_s', customFields.UmppaInjectInvalidThreadCount),\r\n        UmppaInjectFileSectionCount=column_ifexists('UmppaInjectFileSectionCount_s', customFields.UmppaInjectFileSectionCount),\r\n        TotalCount=column_ifexists('TotalCount_s', customFields.TotalCount),\r\n        UmppaInjectLoadErrorCount=column_ifexists('UmppaInjectLoadErrorCount_s', customFields.UmppaInjectLoadErrorCount),\r\n        UmppaInjectBadAlertCount=column_ifexists('UmppaInjectBadAlertCount_s', customFields.UmppaInjectBadAlertCount),\r\n        UmppaInjectApcInsertionCount=column_ifexists('UmppaInjectApcInsertionCount_s', customFields.UmppaInjectApcInsertionCount),\r\n        UmppaInjectCopyFailCount=column_ifexists('UmppaInjectCopyFailCount_s', customFields.UmppaInjectCopyFailCount),\r\n        FirewallRule=column_ifexists('FirewallRule_s', customFields.FirewallRule),\r\n        RegNumericValue=column_ifexists('RegNumericValue_s', customFields.RegNumericValue),\r\n        VolumeDriveLetter=column_ifexists('VolumeDriveLetter_s', customFields.VolumeDriveLetter),\r\n        VolumeSnapshotName=column_ifexists('VolumeSnapshotName_s', customFields.VolumeSnapshotName),\r\n        VolumeName=column_ifexists('VolumeName_s', customFields.VolumeName),\r\n        UserCanonical=column_ifexists('UserCanonical_s', customFields.UserCanonical),\r\n        LogonId=column_ifexists('LogonId_s', customFields.LogonId),\r\n        ConfigStateData=column_ifexists('ConfigStateData_s', customFields.ConfigStateData),\r\n        FirewallProfile=column_ifexists('FirewallProfile_s', customFields.FirewallProfile),\r\n        FirewallOption=column_ifexists('FirewallOption_s', customFields.FirewallOption),\r\n        FirewallOptionNumericValue=column_ifexists('FirewallOptionNumericValue_s', customFields.FirewallOptionNumericValue),\r\n        SmbShareName=column_ifexists('SmbShareName_s', customFields.SmbShareName),\r\n        TargetSHA256HashData=column_ifexists('TargetSHA256HashData_s', customFields.TargetSHA256HashData),\r\n        IsCpuDataCommonOnAllCores=column_ifexists('IsCpuDataCommonOnAllCores_s', customFields.IsCpuDataCommonOnAllCores),\r\n        SpibarDataFrap=column_ifexists('SpibarDataFrap_s', customFields.SpibarDataFrap),\r\n        EfiVariableDbxSha256Hash=column_ifexists('EfiVariableDbxSha256Hash_s', customFields.EfiVariableDbxSha256Hash),\r\n        PciConfigDataBgsm=column_ifexists('PciConfigDataBgsm_s', customFields.PciConfigDataBgsm),\r\n        PciConfigDataDpr=column_ifexists('PciConfigDataDpr_s', customFields.PciConfigDataDpr),\r\n        CpuDataCommonSmrrSupported=column_ifexists('CpuDataCommonSmrrSupported_s', customFields.CpuDataCommonSmrrSupported),\r\n        SpibarDataHsfc=column_ifexists('SpibarDataHsfc_s', customFields.SpibarDataHsfc),\r\n        EfiVariableSecureBoot=column_ifexists('EfiVariableSecureBoot_s', customFields.EfiVariableSecureBoot),\r\n        PciConfigDataMesegMask=column_ifexists('PciConfigDataMesegMask_s', customFields.PciConfigDataMesegMask),\r\n        PciConfigDataTolud=column_ifexists('PciConfigDataTolud_s', customFields.PciConfigDataTolud),\r\n        EfiVariableDbxAttributes=column_ifexists('EfiVariableDbxAttributes_s', customFields.EfiVariableDbxAttributes),\r\n        PciConfigDataPavpc=column_ifexists('PciConfigDataPavpc_s', customFields.PciConfigDataPavpc),\r\n        EfiVariableCustomModeAttributes=column_ifexists('EfiVariableCustomModeAttributes_s', customFields.EfiVariableCustomModeAttributes),\r\n        SpibarDataFreg3=column_ifexists('SpibarDataFreg3_s', customFields.SpibarDataFreg3),\r\n        SpibarDataFreg4=column_ifexists('SpibarDataFreg4_s', customFields.SpibarDataFreg4),\r\n        SpibarDataFreg1=column_ifexists('SpibarDataFreg1_s', customFields.SpibarDataFreg1),\r\n        SpibarDataFreg2=column_ifexists('SpibarDataFreg2_s', customFields.SpibarDataFreg2),\r\n        SpibarDataFreg0=column_ifexists('SpibarDataFreg0_s', customFields.SpibarDataFreg0),\r\n        EfiSupported=column_ifexists('EfiSupported_s', customFields.EfiSupported),\r\n        EfiVariablePkAttributes=column_ifexists('EfiVariablePkAttributes_s', customFields.EfiVariablePkAttributes),\r\n        CpuDataCommonPrmrrUncorePhysicalMask=column_ifexists('CpuDataCommonPrmrrUncorePhysicalMask_s', customFields.CpuDataCommonPrmrrUncorePhysicalMask),\r\n        PciConfigDataGenPmconA=column_ifexists('PciConfigDataGenPmconA_s', customFields.PciConfigDataGenPmconA),\r\n        PciConfigDataTsegmb=column_ifexists('PciConfigDataTsegmb_s', customFields.PciConfigDataTsegmb),\r\n        SpibarDataVscc0=column_ifexists('SpibarDataVscc0_s', customFields.SpibarDataVscc0),\r\n        EfiVariablePkSha256Hash=column_ifexists('EfiVariablePkSha256Hash_s', customFields.EfiVariablePkSha256Hash),\r\n        SpibarDataVscc1=column_ifexists('SpibarDataVscc1_s', customFields.SpibarDataVscc1),\r\n        CpuDataCommonSmrrPhysicalMask=column_ifexists('CpuDataCommonSmrrPhysicalMask_s', customFields.CpuDataCommonSmrrPhysicalMask),\r\n        NorthBridgeDeviceId=column_ifexists('NorthBridgeDeviceId_s', customFields.NorthBridgeDeviceId),\r\n        IsNorthBridgeSupported=column_ifexists('IsNorthBridgeSupported_s', customFields.IsNorthBridgeSupported),\r\n        PciConfigDataTom=column_ifexists('PciConfigDataTom_s', customFields.PciConfigDataTom),\r\n        EfiVariableKekSha256Hash=column_ifexists('EfiVariableKekSha256Hash_s', customFields.EfiVariableKekSha256Hash),\r\n        SouthBridgeVendorId=column_ifexists('SouthBridgeVendorId_s', customFields.SouthBridgeVendorId),\r\n        EfiVariableSignatureSupport=column_ifexists('EfiVariableSignatureSupport_s', customFields.EfiVariableSignatureSupport),\r\n        MmioDataTco1Cnt=column_ifexists('MmioDataTco1Cnt_s', customFields.MmioDataTco1Cnt),\r\n        EfiVariableKekAttributes=column_ifexists('EfiVariableKekAttributes_s', customFields.EfiVariableKekAttributes),\r\n        FirmwareAnalysisCpuSupported=column_ifexists('FirmwareAnalysisCpuSupported_s', customFields.FirmwareAnalysisCpuSupported),\r\n        MmioDataSmiEn=column_ifexists('MmioDataSmiEn_s', customFields.MmioDataSmiEn),\r\n        CpuDataCommonPrmrrUncoreSupported=column_ifexists('CpuDataCommonPrmrrUncoreSupported_s', customFields.CpuDataCommonPrmrrUncoreSupported),\r\n        NorthBridgeVendorId=column_ifexists('NorthBridgeVendorId_s', customFields.NorthBridgeVendorId),\r\n        CpuDataCommonMsrApicBase=column_ifexists('CpuDataCommonMsrApicBase_s', customFields.CpuDataCommonMsrApicBase),\r\n        EfiVariableDbAttributes=column_ifexists('EfiVariableDbAttributes_s', customFields.EfiVariableDbAttributes),\r\n        SpibarDataPr2=column_ifexists('SpibarDataPr2_s', customFields.SpibarDataPr2),\r\n        SpibarDataBfpr=column_ifexists('SpibarDataBfpr_s', customFields.SpibarDataBfpr),\r\n        SpibarDataPr1=column_ifexists('SpibarDataPr1_s', customFields.SpibarDataPr1),\r\n        EfiVariableSecureBootAttributes=column_ifexists('EfiVariableSecureBootAttributes_s', customFields.EfiVariableSecureBootAttributes),\r\n        SpibarDataPr0=column_ifexists('SpibarDataPr0_s', customFields.SpibarDataPr0),\r\n        IsSouthBridgeSupported=column_ifexists('IsSouthBridgeSupported_s', customFields.IsSouthBridgeSupported),\r\n        PciConfigDataHfsts1=column_ifexists('PciConfigDataHfsts1_s', customFields.PciConfigDataHfsts1),\r\n        CpuDataCommonMsrFeatureControl=column_ifexists('CpuDataCommonMsrFeatureControl_s', customFields.CpuDataCommonMsrFeatureControl),\r\n        PciConfigDataRemaplimit=column_ifexists('PciConfigDataRemaplimit_s', customFields.PciConfigDataRemaplimit),\r\n        CpuDataCommonSiliconDebugFeatureControl=column_ifexists('CpuDataCommonSiliconDebugFeatureControl_s', customFields.CpuDataCommonSiliconDebugFeatureControl),\r\n        CpuDataCommonSmrrPhysicalBase=column_ifexists('CpuDataCommonSmrrPhysicalBase_s', customFields.CpuDataCommonSmrrPhysicalBase),\r\n        SouthBridgeDeviceId=column_ifexists('SouthBridgeDeviceId_s', customFields.SouthBridgeDeviceId),\r\n        CpuDataCommonPrmrrPhysicalMask=column_ifexists('CpuDataCommonPrmrrPhysicalMask_s', customFields.CpuDataCommonPrmrrPhysicalMask),\r\n        EfiVariableDbSha256Hash=column_ifexists('EfiVariableDbSha256Hash_s', customFields.EfiVariableDbSha256Hash),\r\n        SpibarDataHsfs=column_ifexists('SpibarDataHsfs_s', customFields.SpibarDataHsfs),\r\n        PciConfigDataRemapbase=column_ifexists('PciConfigDataRemapbase_s', customFields.PciConfigDataRemapbase),\r\n        EfiVariableCustomMode=column_ifexists('EfiVariableCustomMode_s', customFields.EfiVariableCustomMode),\r\n        PciConfigDataGgc=column_ifexists('PciConfigDataGgc_s', customFields.PciConfigDataGgc),\r\n        PciConfigDataTouud=column_ifexists('PciConfigDataTouud_s', customFields.PciConfigDataTouud),\r\n        SpibarDataPr4=column_ifexists('SpibarDataPr4_s', customFields.SpibarDataPr4),\r\n        SpibarDataPr3=column_ifexists('SpibarDataPr3_s', customFields.SpibarDataPr3),\r\n        CpuDataCommonPrmrrSupported=column_ifexists('CpuDataCommonPrmrrSupported_s', customFields.CpuDataCommonPrmrrSupported),\r\n        PciConfigDataSmramc=column_ifexists('PciConfigDataSmramc_s', customFields.PciConfigDataSmramc),\r\n        EfiVariableSignatureSupportAttributes=column_ifexists('EfiVariableSignatureSupportAttributes_s', customFields.EfiVariableSignatureSupportAttributes),\r\n        PciConfigDataBdsm=column_ifexists('PciConfigDataBdsm_s', customFields.PciConfigDataBdsm),\r\n        EfiVariableSetupModeAttributes=column_ifexists('EfiVariableSetupModeAttributes_s', customFields.EfiVariableSetupModeAttributes),\r\n        EfiVariableSetupMode=column_ifexists('EfiVariableSetupMode_s', customFields.EfiVariableSetupMode),\r\n        PciConfigDataBiosCntl=column_ifexists('PciConfigDataBiosCntl_s', customFields.PciConfigDataBiosCntl),\r\n        PciConfigDataMesegBase=column_ifexists('PciConfigDataMesegBase_s', customFields.PciConfigDataMesegBase),\r\n        SourceFileName=column_ifexists('SourceFileName_s', customFields.SourceFileName),\r\n        NewFileIdentifier=column_ifexists('NewFileIdentifier_s', customFields.NewFileIdentifier),\r\n        FeatureVector=column_ifexists('FeatureVector_s', customFields.FeatureVector),\r\n        ModelPrediction=column_ifexists('ModelPrediction_s', customFields.ModelPrediction),\r\n        Malicious=column_ifexists('Malicious_s', customFields.Malicious),\r\n        FeatureExtractionVersion=column_ifexists('FeatureExtractionVersion_s', customFields.FeatureExtractionVersion),\r\n        FXFileSize=column_ifexists('FXFileSize_s', customFields.FXFileSize),\r\n        MLModelVersion=column_ifexists('MLModelVersion_s', customFields.MLModelVersion),\r\n        FontBufferLength=column_ifexists('FontBufferLength_s', customFields.FontBufferLength),\r\n        FontFileCount=column_ifexists('FontFileCount_s', customFields.FontFileCount),\r\n        FontLoadOperation=column_ifexists('FontLoadOperation_s', customFields.FontLoadOperation),\r\n        FontBuffer=column_ifexists('FontBuffer_s', customFields.FontBuffer),\r\n        FontFileName=column_ifexists('FontFileName_s', customFields.FontFileName),\r\n        TemplateInstanceId=column_ifexists('TemplateInstanceId_s', customFields.TemplateInstanceId),\r\n        PatternDisposition=column_ifexists('PatternDisposition_s', customFields.PatternDisposition),\r\n        ServicePackMajor=column_ifexists('ServicePackMajor_s', customFields.ServicePackMajor),\r\n        ProductSku=column_ifexists('ProductSku_s', customFields.ProductSku),\r\n        PointerSize=column_ifexists('PointerSize_s', customFields.PointerSize),\r\n        ProductName=column_ifexists('ProductName_s', customFields.ProductName),\r\n        AgentVersion=column_ifexists('AgentVersion_s', customFields.AgentVersion),\r\n        ServicePackMinor=column_ifexists('ServicePackMinor_s', customFields.ServicePackMinor),\r\n        SuiteMask=column_ifexists('SuiteMask_s', customFields.SuiteMask),\r\n        SubBuildNumber=column_ifexists('SubBuildNumber_s', customFields.SubBuildNumber),\r\n        PlatformId=column_ifexists('PlatformId_s', customFields.PlatformId),\r\n        BuildType=column_ifexists('BuildType_s', customFields.BuildType),\r\n        MajorVersion=column_ifexists('MajorVersion_s', customFields.MajorVersion),\r\n        ProductType=column_ifexists('ProductType_s', customFields.ProductType),\r\n        MinorVersion=column_ifexists('MinorVersion_s', customFields.MinorVersion),\r\n        CheckedBuild=column_ifexists('CheckedBuild_s', customFields.CheckedBuild),\r\n        BuildNumber=column_ifexists('BuildNumber_s', customFields.BuildNumber),\r\n        RFMState=column_ifexists('RFMState_s', customFields.RFMState),\r\n        FirmwareAnalysisEclControlInterfaceVersion=column_ifexists('FirmwareAnalysisEclControlInterfaceVersion_s', customFields.FirmwareAnalysisEclControlInterfaceVersion),\r\n        FirmwareAnalysisEclConsumerInterfaceVersion=column_ifexists('FirmwareAnalysisEclConsumerInterfaceVersion_s', customFields.FirmwareAnalysisEclConsumerInterfaceVersion),\r\n        BootTimeFunctionalityLevel=column_ifexists('BootTimeFunctionalityLevel_s', customFields.BootTimeFunctionalityLevel),\r\n        ReasonOfFunctionalityLevel=column_ifexists('ReasonOfFunctionalityLevel_s', customFields.ReasonOfFunctionalityLevel),\r\n        CurrentFunctionalityLevel=column_ifexists('CurrentFunctionalityLevel_s', customFields.CurrentFunctionalityLevel),\r\n        PciAttachmentState=column_ifexists('PciAttachmentState_s', customFields.PciAttachmentState),\r\n        LocalAddressIP6=column_ifexists('LocalAddressIP6_s', customFields.LocalAddressIP6),\r\n        RemoteAddressIP6=column_ifexists('RemoteAddressIP6_s', customFields.RemoteAddressIP6),\r\n        RegBinaryValue=column_ifexists('RegBinaryValue_s', customFields.RegBinaryValue),\r\n        ServiceDescription=column_ifexists('ServiceDescription_s', customFields.ServiceDescription),\r\n        ServiceSecurity=column_ifexists('ServiceSecurity_s', customFields.ServiceSecurity),\r\n        ServiceImagePath=column_ifexists('ServiceImagePath_s', customFields.ServiceImagePath),\r\n        ServiceStart=column_ifexists('ServiceStart_s', customFields.ServiceStart),\r\n        ServiceType=column_ifexists('ServiceType_s', customFields.ServiceType),\r\n        ServiceFailureActions=column_ifexists('ServiceFailureActions_s', customFields.ServiceFailureActions),\r\n        ServiceErrorControl=column_ifexists('ServiceErrorControl_s', customFields.ServiceErrorControl),\r\n        SymbolicLinkName=column_ifexists('SymbolicLinkName_s', customFields.SymbolicLinkName),\r\n        SymbolicLinkTarget=column_ifexists('SymbolicLinkTarget_s', customFields.SymbolicLinkTarget),\r\n        DevicePropertyClassName=column_ifexists('DevicePropertyClassName_s', customFields.DevicePropertyClassName),\r\n        DeviceActiveConfigurationNumber=column_ifexists('DeviceActiveConfigurationNumber_s', customFields.DeviceActiveConfigurationNumber),\r\n        DevicePropertyClassGuid=column_ifexists('DevicePropertyClassGuid_g', customFields.DevicePropertyClassGuid),\r\n        DeviceUsbSubclass=column_ifexists('DeviceUsbSubclass_s', customFields.DeviceUsbSubclass),\r\n        ParentHubInstanceId=column_ifexists('ParentHubInstanceId_s', customFields.ParentHubInstanceId),\r\n        DeviceConnectionStatus=column_ifexists('DeviceConnectionStatus_s', customFields.DeviceConnectionStatus),\r\n        DeviceUsbClass=column_ifexists('DeviceUsbClass_s', customFields.DeviceUsbClass),\r\n        ParentHubPort=column_ifexists('ParentHubPort_s', customFields.ParentHubPort),\r\n        DevicePropertyManufacturer=column_ifexists('DevicePropertyManufacturer_s', customFields.DevicePropertyManufacturer),\r\n        DevicePropertyLocationInformation=column_ifexists('DevicePropertyLocationInformation_s', customFields.DevicePropertyLocationInformation),\r\n        DeviceProtocol=column_ifexists('DeviceProtocol_s', customFields.DeviceProtocol),\r\n        DevicePropertyDeviceDescription=column_ifexists('DevicePropertyDeviceDescription_s', customFields.DevicePropertyDeviceDescription),\r\n        DeviceUsbVersion=column_ifexists('DeviceUsbVersion_s', customFields.DeviceUsbVersion),\r\n        ModuleBaseAddress=column_ifexists('ModuleBaseAddress_s', customFields.ModuleBaseAddress),\r\n        ModuleSize=column_ifexists('ModuleSize_s', customFields.ModuleSize),\r\n        IsOnClearCaseMvfs=column_ifexists('IsOnClearCaseMvfs_s', customFields.IsOnClearCaseMvfs),\r\n        DllCharacteristics=column_ifexists('DllCharacteristics_s', customFields.DllCharacteristics),\r\n        ActiveCpuCount=column_ifexists('ActiveCpuCount_s', customFields.ActiveCpuCount),\r\n        MemoryTotal=column_ifexists('MemoryTotal_s', customFields.MemoryTotal),\r\n        BillingType=column_ifexists('BillingType_s', customFields.BillingType),\r\n        ConnectionCipher=column_ifexists('ConnectionCipher_s', customFields.ConnectionCipher),\r\n        ConnectType=column_ifexists('ConnectType_s', customFields.ConnectType),\r\n        ConnectionProtocol=column_ifexists('ConnectionProtocol_s', customFields.ConnectionProtocol),\r\n        ConnectionHash=column_ifexists('ConnectionHash_s', customFields.ConnectionHash),\r\n        ConnectTime=column_ifexists('ConnectTime_s', customFields.ConnectTime),\r\n        ConnectionHashStrength=column_ifexists('ConnectionHashStrength_s', customFields.ConnectionHashStrength),\r\n        FailedConnectCount=column_ifexists('FailedConnectCount_s', customFields.FailedConnectCount),\r\n        ConnectionCipherStrength=column_ifexists('ConnectionCipherStrength_s', customFields.ConnectionCipherStrength),\r\n        ConnectionExchangeStrength=column_ifexists('ConnectionExchangeStrength_s', customFields.ConnectionExchangeStrength),\r\n        ConnectionExchange=column_ifexists('ConnectionExchange_s', customFields.ConnectionExchange),\r\n        PreviousConnectTime=column_ifexists('PreviousConnectTime_s', customFields.PreviousConnectTime),\r\n        FalconServiceServletErrors=column_ifexists('FalconServiceServletErrors_s', customFields.FalconServiceServletErrors),\r\n        FalconServiceComponent=column_ifexists('FalconServiceComponent_s', customFields.FalconServiceComponent),\r\n        FalconServiceServletStarts=column_ifexists('FalconServiceServletStarts_s', customFields.FalconServiceServletStarts),\r\n        FalconServiceState=column_ifexists('FalconServiceState_s', customFields.FalconServiceState),\r\n        ScriptContent=column_ifexists('ScriptContent_s', customFields.ScriptContent),\r\n        OriginalContentLength=column_ifexists('OriginalContentLength_s', customFields.OriginalContentLength),\r\n        ScriptingLanguageId=column_ifexists('ScriptingLanguageId_s', customFields.ScriptingLanguageId),\r\n        ParentImageFileName=column_ifexists('ParentImageFileName_s', customFields.ParentImageFileName),\r\n        GrandparentImageFileName=column_ifexists('GrandparentImageFileName_s', customFields.GrandparentImageFileName),\r\n        ScriptContentName=column_ifexists('ScriptContentName_s', customFields.ScriptContentName),\r\n        HostProcessType=column_ifexists('HostProcessType_s', customFields.HostProcessType),\r\n        ProcessParentCommandLine=column_ifexists('ParentCommandLine_s', customFields.ProcessParentCommandLine),\r\n        ContentSHA256HashData=column_ifexists('ContentSHA256HashData_s', customFields.ContentSHA256HashData),\r\n        ProcessGrandparentCommandLine=column_ifexists('GrandparentCommandLine_s', customFields.ProcessGrandparentCommandLine)\r\n    | project\r\n        TimeGenerated, \r\n        EventVendor,\r\n        EventProduct,\r\n        FileMode,\r\n        DeviceSerialNumber,\r\n        IcmpCode,\r\n        IcmpType,\r\n        LastUpdateInstalledTime,\r\n        RebootRequired,\r\n        PendingUpdateIds,\r\n        InstalledUpdateIds,\r\n        InstalledUpdateExtendedStatus,\r\n        SupersededUpdateIds,\r\n        ConfigurationDescriptorValue,\r\n        ConfigurationDescriptorAttributes,\r\n        DeviceDescriptorUniqueIdentifier,\r\n        ConfigurationDescriptorName,\r\n        ConfigurationDescriptorNumInterfaces,\r\n        ConfigurationDescriptorMaxPowerDraw,\r\n        ScreenshotsTakenCount,\r\n        ExitCode,\r\n        ParentProcessId,\r\n        DstUserIdentity,\r\n        NetworkListenCount,\r\n        SuspiciousRawDiskReadCount,\r\n        NetworkBindCount,\r\n        NetworkRecvAcceptCount,\r\n        ContextData,\r\n        Id,\r\n        NewExecutableWrittenCount,\r\n        ExeAndServiceCount,\r\n        NetworkCloseCount,\r\n        SuspectStackCount,\r\n        CLICreationCount,\r\n        UnsignedModuleLoadCount,\r\n        UserTime,\r\n        EventMessage,\r\n        RawProcessId,\r\n        ContextTimeStamp,\r\n        AllocateVirtualMemoryCount,\r\n        ContextProcessId,\r\n        ServiceEventCount,\r\n        SnapshotFileOpenCount,\r\n        RemovableDiskFileWrittenCount,\r\n        InjectedDllCount,\r\n        ModuleLoadCount,\r\n        UserMemoryProtectExecutableCount,\r\n        NetworkCapableAsepWriteCount,\r\n        TargetProcessId,\r\n        DnsRequestCount,\r\n        ArchiveFileWrittenCount,\r\n        Entitlements,\r\n        Name,\r\n        ProcessStartTime,\r\n        SetThreadContextCount,\r\n        SuspiciousCredentialModuleLoadCount,\r\n        DvcInterfaceGuid,\r\n        Cid,\r\n        FileDeletedCount,\r\n        UserMemoryAllocateExecutableCount,\r\n        DirectoryCreatedCount,\r\n        NetworkConnectCountUdp,\r\n        QueueApcCount,\r\n        ContextThreadId,\r\n        Aip,\r\n        SuspiciousFontLoadCount,\r\n        ConHostId,\r\n        NetworkConnectCount,\r\n        BinaryExecutableWrittenCount,\r\n        CycleTime,\r\n        DvcOs,\r\n        ConHostProcessId,\r\n        PrivilegedProcessHandleCount,\r\n        MaxThreadCount,\r\n        ImageSubsystem,\r\n        GenericFileWrittenCount,\r\n        EffectiveTransmissionClass,\r\n        ScriptEngineInvocationCount,\r\n        RunDllInvocationCount,\r\n        timestamp,\r\n        CreateProcessCount,\r\n        KernelTime,\r\n        DirectoryEnumeratedCount,\r\n        ConfigStateHash,\r\n        AsepWrittenCount,\r\n        SuspiciousDnsRequestCount,\r\n        DocumentFileWrittenCount,\r\n        ProtectVirtualMemoryCount,\r\n        ProcessHashSha256,\r\n        UserMemoryProtectExecutableRemoteCount,\r\n        ConfigBuild,\r\n        UserMemoryAllocateExecutableRemoteCount,\r\n        ExecutableDeletedCount,\r\n        RegKeySecurityDecreasedCount,\r\n        InjectedThreadCount,\r\n        NetworkModuleLoadCount,\r\n        WindowTitle,\r\n        ProcessCreateFlags,\r\n        IntegrityLevel,\r\n        SourceProcessId,\r\n        ProcessHashSha1,\r\n        TokenType,\r\n        ProcessEndTime,\r\n        AuthenticodeHashData,\r\n        ParentBaseFileName,\r\n        SessionId,\r\n        Tags,\r\n        ProcessHashMd5,\r\n        ProcessSxsFlags,\r\n        AuthenticationId,\r\n        WindowFlags,\r\n        ProcessCommandLine,\r\n        ParentAuthenticationId,\r\n        FileName,\r\n        SourceThreadId,\r\n        ProcessParameterFlags,\r\n        SignInfoFlags,\r\n        ChannelVersion,\r\n        ChannelVersionRequired,\r\n        ChannelId,\r\n        DnsResponseType,\r\n        IP4Records,\r\n        CNAMERecords,\r\n        QueryStatus,\r\n        InterfaceIndex,\r\n        DualRequest,\r\n        FirstIP4Record,\r\n        UrlDomain,\r\n        RespondingDnsServer,\r\n        RequestType,\r\n        FirewallRuleId,\r\n        Options,\r\n        MinorFunction,\r\n        FileIdentifier,\r\n        Information,\r\n        ShareAccess,\r\n        FileObject,\r\n        FilePermission,\r\n        Status,\r\n        IrpFlags,\r\n        MajorFunction,\r\n        DesiredAccess,\r\n        OperationFlags,\r\n        TargetFileName,\r\n        CallStackModuleNamesVersion,\r\n        CsaProcessDataCollectionInstanceId,\r\n        CallStackModuleNames,\r\n        CreateProcessType,\r\n        EtwRawProcessId,\r\n        EventMax,\r\n        EtwRawThreadId,\r\n        Flags,\r\n        EventMin,\r\n        RawThreadId,\r\n        SrcIpAddr,\r\n        ConnectionFlags,\r\n        DstIpPort,\r\n        SrcIpPort,\r\n        Protocol,\r\n        DstIpAddr,\r\n        ConnectionDirection,\r\n        InContext,\r\n        NetworkContainmentState,\r\n        ConfigIDBase,\r\n        SensorStateBitMap,\r\n        ConfigurationVersion,\r\n        ConfigIDPlatform,\r\n        ConfigIDBuild,\r\n        ProvisionState,\r\n        Size,\r\n        IsOnNetwork,\r\n        DiskParentDeviceInstanceId,\r\n        TemporaryFileName,\r\n        FileEcpBitmask,\r\n        IsOnRemovableDisk,\r\n        ModuleCharacteristics,\r\n        OriginalEventTimeStamp,\r\n        MappedFromUserMode,\r\n        TreeId,\r\n        PrimaryModule,\r\n        UserIsAdmin,\r\n        LogoffTime,\r\n        LogonTime,\r\n        LogonDomain,\r\n        RemoteAccount,\r\n        UserFlags,\r\n        LogonServer,\r\n        DstUserName,\r\n        LogonType,\r\n        AuthenticationPackage,\r\n        UserPrincipal,\r\n        PasswordLastSet,\r\n        UserLogoffType,\r\n        UserLogonFlags,\r\n        Parameter2,\r\n        Parameter1,\r\n        Parameter3,\r\n        Line,\r\n        ErrorStatus,\r\n        Facility,\r\n        File,\r\n        PublicKeys,\r\n        HandleCreated,\r\n        ExtendedKeyUsages,\r\n        FileSigningTime,\r\n        Object1Name,\r\n        Object1Type,\r\n        Certificate,\r\n        RpcClientProcessId,\r\n        SyntheticPR2Flags,\r\n        MachOSubType,\r\n        SessionProcessId,\r\n        SVUID,\r\n        ProcessGroupId,\r\n        GID,\r\n        SVGID,\r\n        UID,\r\n        RGID,\r\n        RUID,\r\n        NeighborList,\r\n        DownloadServer,\r\n        DownloadPath,\r\n        DownloadPort,\r\n        CompletionEventId,\r\n        IsTransactedFile,\r\n        WindowStation,\r\n        BoundingLimitCount,\r\n        ProcessBehaviorBitfield,\r\n        Desktop,\r\n        PatternId,\r\n        ExclusionType,\r\n        ExclusionSource,\r\n        DriverLoadFlags,\r\n        CompanyName,\r\n        OriginalFilename,\r\n        FileVersion,\r\n        GrandParentBaseFileName,\r\n        ShowWindowFlags,\r\n        ThreadStartAddress,\r\n        InjectedThreadFlag,\r\n        UserThread,\r\n        TargetThreadModule,\r\n        TargetThreadId,\r\n        ThreadStartContext,\r\n        SourceThreadStartAddress,\r\n        InterfaceGuid,\r\n        InterfaceVersion,\r\n        RpcClientThreadId,\r\n        TaskXml,\r\n        TaskAuthor,\r\n        TaskName,\r\n        RpcOpNum,\r\n        TaskExecArguments,\r\n        TaskExecCommand,\r\n        RpcNestingLevel,\r\n        ErrorLocation,\r\n        ErrorReason,\r\n        Parameter64_1,\r\n        ErrorSource,\r\n        ParameterSizedBuffer_1,\r\n        ErrorCode,\r\n        DeviceProductId,\r\n        DeviceVersion,\r\n        DeviceTimeStamp,\r\n        DeviceInstanceId,\r\n        DeviceDescriptorSetHash,\r\n        DeviceVendorId,\r\n        DeviceManufacturer,\r\n        DeviceProduct,\r\n        GroupRid,\r\n        UserRid,\r\n        DomainSid,\r\n        LightningLatencyState,\r\n        UnixMode,\r\n        VnodeType,\r\n        TargetDirectoryName,\r\n        ApiReturnValue,\r\n        ServiceDisplayName,\r\n        LinkName,\r\n        VersionInfo,\r\n        LanguageId,\r\n        AsepFlags,\r\n        RegObjectName,\r\n        Data1,\r\n        RegOperationType,\r\n        ProcessArgs,\r\n        RegStringValue,\r\n        RegType,\r\n        AsepClass,\r\n        AsepIndex,\r\n        RegValueName,\r\n        AsepValueType,\r\n        LocalSession,\r\n        DstDvcHostname,\r\n        PrivilegesBitmask,\r\n        EnabledPrivilegesBitmask,\r\n        UserGroupsBitmask,\r\n        Timeout,\r\n        ProcessCount,\r\n        SuppressType,\r\n        BoundedCount,\r\n        IP6Records,\r\n        FirstIP6Record,\r\n        WmiQuery,\r\n        WmiNamespaceName,\r\n        RegClassificationIndex,\r\n        RegClassificationFlags,\r\n        RegClassification,\r\n        SystemTableIndex,\r\n        ScreenshotType,\r\n        SubStatus,\r\n        UmppaInjectAbortCount,\r\n        UmppaInjectFailedCount,\r\n        UmppaInjectionType,\r\n        UmppaInjectLoadFailCount,\r\n        UmppaInjectCfgCheckCount,\r\n        UmppaInjectExtensionErrorCount,\r\n        UmppaInjectInvalidThreadCount,\r\n        UmppaInjectFileSectionCount,\r\n        TotalCount,\r\n        UmppaInjectLoadErrorCount,\r\n        UmppaInjectBadAlertCount,\r\n        UmppaInjectApcInsertionCount,\r\n        UmppaInjectCopyFailCount,\r\n        FirewallRule,\r\n        RegNumericValue,\r\n        VolumeDriveLetter,\r\n        VolumeSnapshotName,\r\n        VolumeName,\r\n        UserCanonical,\r\n        LogonId,\r\n        ConfigStateData,\r\n        FirewallProfile,\r\n        FirewallOption,\r\n        FirewallOptionNumericValue,\r\n        SmbShareName,\r\n        TargetSHA256HashData,\r\n        IsCpuDataCommonOnAllCores,\r\n        SpibarDataFrap,\r\n        EfiVariableDbxSha256Hash,\r\n        PciConfigDataBgsm,\r\n        PciConfigDataDpr,\r\n        CpuDataCommonSmrrSupported,\r\n        SpibarDataHsfc,\r\n        EfiVariableSecureBoot,\r\n        PciConfigDataMesegMask,\r\n        PciConfigDataTolud,\r\n        EfiVariableDbxAttributes,\r\n        PciConfigDataPavpc,\r\n        EfiVariableCustomModeAttributes,\r\n        SpibarDataFreg3,\r\n        SpibarDataFreg4,\r\n        SpibarDataFreg1,\r\n        SpibarDataFreg2,\r\n        SpibarDataFreg0,\r\n        EfiSupported,\r\n        EfiVariablePkAttributes,\r\n        CpuDataCommonPrmrrUncorePhysicalMask,\r\n        PciConfigDataGenPmconA,\r\n        PciConfigDataTsegmb,\r\n        SpibarDataVscc0,\r\n        EfiVariablePkSha256Hash,\r\n        SpibarDataVscc1,\r\n        CpuDataCommonSmrrPhysicalMask,\r\n        NorthBridgeDeviceId,\r\n        IsNorthBridgeSupported,\r\n        PciConfigDataTom,\r\n        EfiVariableKekSha256Hash,\r\n        SouthBridgeVendorId,\r\n        EfiVariableSignatureSupport,\r\n        MmioDataTco1Cnt,\r\n        EfiVariableKekAttributes,\r\n        FirmwareAnalysisCpuSupported,\r\n        MmioDataSmiEn,\r\n        CpuDataCommonPrmrrUncoreSupported,\r\n        NorthBridgeVendorId,\r\n        CpuDataCommonMsrApicBase,\r\n        EfiVariableDbAttributes,\r\n        SpibarDataPr2,\r\n        SpibarDataBfpr,\r\n        SpibarDataPr1,\r\n        EfiVariableSecureBootAttributes,\r\n        SpibarDataPr0,\r\n        IsSouthBridgeSupported,\r\n        PciConfigDataHfsts1,\r\n        CpuDataCommonMsrFeatureControl,\r\n        PciConfigDataRemaplimit,\r\n        CpuDataCommonSiliconDebugFeatureControl,\r\n        CpuDataCommonSmrrPhysicalBase,\r\n        SouthBridgeDeviceId,\r\n        CpuDataCommonPrmrrPhysicalMask,\r\n        EfiVariableDbSha256Hash,\r\n        SpibarDataHsfs,\r\n        PciConfigDataRemapbase,\r\n        EfiVariableCustomMode,\r\n        PciConfigDataGgc,\r\n        PciConfigDataTouud,\r\n        SpibarDataPr4,\r\n        SpibarDataPr3,\r\n        CpuDataCommonPrmrrSupported,\r\n        PciConfigDataSmramc,\r\n        EfiVariableSignatureSupportAttributes,\r\n        PciConfigDataBdsm,\r\n        EfiVariableSetupModeAttributes,\r\n        EfiVariableSetupMode,\r\n        PciConfigDataBiosCntl,\r\n        PciConfigDataMesegBase,\r\n        SourceFileName,\r\n        NewFileIdentifier,\r\n        FeatureVector,\r\n        ModelPrediction,\r\n        Malicious,\r\n        FeatureExtractionVersion,\r\n        FXFileSize,\r\n        MLModelVersion,\r\n        FontBufferLength,\r\n        FontFileCount,\r\n        FontLoadOperation,\r\n        FontBuffer,\r\n        FontFileName,\r\n        TemplateInstanceId,\r\n        PatternDisposition,\r\n        ServicePackMajor,\r\n        ProductSku,\r\n        PointerSize,\r\n        ProductName,\r\n        AgentVersion,\r\n        ServicePackMinor,\r\n        SuiteMask,\r\n        SubBuildNumber,\r\n        PlatformId,\r\n        BuildType,\r\n        MajorVersion,\r\n        ProductType,\r\n        MinorVersion,\r\n        CheckedBuild,\r\n        BuildNumber,\r\n        RFMState,\r\n        FirmwareAnalysisEclControlInterfaceVersion,\r\n        FirmwareAnalysisEclConsumerInterfaceVersion,\r\n        BootTimeFunctionalityLevel,\r\n        ReasonOfFunctionalityLevel,\r\n        CurrentFunctionalityLevel,\r\n        PciAttachmentState,\r\n        LocalAddressIP6,\r\n        RemoteAddressIP6,\r\n        RegBinaryValue,\r\n        ServiceDescription,\r\n        ServiceSecurity,\r\n        ServiceImagePath,\r\n        ServiceStart,\r\n        ServiceType,\r\n        ServiceFailureActions,\r\n        ServiceErrorControl,\r\n        SymbolicLinkName,\r\n        SymbolicLinkTarget,\r\n        DevicePropertyClassName,\r\n        DeviceActiveConfigurationNumber,\r\n        DevicePropertyClassGuid,\r\n        DeviceUsbSubclass,\r\n        ParentHubInstanceId,\r\n        DeviceConnectionStatus,\r\n        DeviceUsbClass,\r\n        ParentHubPort,\r\n        DevicePropertyManufacturer,\r\n        DevicePropertyLocationInformation,\r\n        DeviceProtocol,\r\n        DevicePropertyDeviceDescription,\r\n        DeviceUsbVersion,\r\n        ModuleBaseAddress,\r\n        ModuleSize,\r\n        IsOnClearCaseMvfs,\r\n        DllCharacteristics,\r\n        ActiveCpuCount,\r\n        MemoryTotal,\r\n        BillingType,\r\n        ConnectionCipher,\r\n        ConnectType,\r\n        ConnectionProtocol,\r\n        ConnectionHash,\r\n        ConnectTime,\r\n        ConnectionHashStrength,\r\n        FailedConnectCount,\r\n        ConnectionCipherStrength,\r\n        ConnectionExchangeStrength,\r\n        ConnectionExchange,\r\n        PreviousConnectTime,\r\n        FalconServiceServletErrors,\r\n        FalconServiceComponent,\r\n        FalconServiceServletStarts,\r\n        FalconServiceState,\r\n        ScriptContent,\r\n        OriginalContentLength,\r\n        ScriptingLanguageId,\r\n        ParentImageFileName,\r\n        GrandparentImageFileName,\r\n        ScriptContentName,\r\n        HostProcessType,\r\n        ProcessParentCommandLine,\r\n        ContentSHA256HashData,\r\n        ProcessGrandparentCommandLine\r\n};\r\nCrowdstrikeReplicatorLogs_view\r\n",
        "version": 1
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2022-01-01-preview",
      "location": "[parameters('workspace-location')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'CrowdstrikeReplicator'),'/'))))]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'CrowdstrikeReplicator')]"
      ],
      "properties": {
        "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'CrowdstrikeReplicator')]",
        "contentId": "CrowdstrikeReplicator-Parser",
        "kind": "Parser",
        "version": "1.0.0",
        "source": {
          "kind": "Solution",
          "name": "CrowdStrike Falcon Endpoint Protection",
          "sourceId": "azuresentinel.azure-sentinel-solution-crowdstrikefalconep"
        },
        "author": {
          "name": "Microsoft",
          "email": "support@microsoft.com"
        },
        "support": {
          "name": "Microsoft Corporation",
          "email": "support@microsoft.com",
          "tier": "Microsoft",
          "link": "https://support.microsoft.com"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(concat(parameters('workspace'),'-wb-',uniquestring('CrowdStrikeFalconEndpointProtectionWorkbook')),'1.0.0'))]",
      "location": "[parameters('workspace-location')]",
      "apiVersion": "2022-08-01",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', 'azuresentinel.azure-sentinel-solution-crowdstrikefalconep')]"
      ],
      "properties": {
        "contentId": "CrowdStrikeFalconEndpointProtectionWorkbook",
        "displayName": "CrowdStrike Falcon Endpoint Protection",
        "contentKind": "Workbook",
        "mainTemplate": {
          "resources": [
            {
              "type": "Microsoft.Insights/workbooks",
              "name": "CrowdStrikeFalconEndpointProtectionWorkbook",
              "location": "[parameters('workspace-location')]",
              "kind": "shared",
              "apiVersion": "2021-08-01",
              "metadata": {
                "description": "Sets the time name for analysis"
              },
              "properties": {
                "displayName": "CrowdStrike Falcon Endpoint Protection",
                "serializedData": "{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"5f6ef388-eba8-456d-a86d-b0e5d13753dc\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TimeRange\",\"label\":\"Time Range\",\"type\":4,\"isRequired\":true,\"value\":{\"durationMs\":7776000000},\"typeSettings\":{\"selectableValues\":[{\"durationMs\":300000},{\"durationMs\":900000},{\"durationMs\":1800000},{\"durationMs\":3600000},{\"durationMs\":14400000},{\"durationMs\":43200000},{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":259200000},{\"durationMs\":604800000},{\"durationMs\":1209600000},{\"durationMs\":2419200000},{\"durationMs\":2592000000},{\"durationMs\":5184000000},{\"durationMs\":7776000000}],\"allowCustom\":true},\"timeContext\":{\"durationMs\":86400000}}],\"style\":\"above\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 0\"},{\"type\":11,\"content\":{\"version\":\"LinkItem/1.0\",\"style\":\"tabs\",\"links\":[{\"id\":\"e75aea48-9de8-48ca-8420-93fcdda9b996\",\"cellValue\":\"TabName\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Detections\",\"subTarget\":\"Detections\",\"style\":\"link\"},{\"id\":\"e06768ad-90d3-49d2-aa55-bac601c19769\",\"cellValue\":\"TabName\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Authentication\",\"subTarget\":\"Authentication\",\"style\":\"link\"}]},\"name\":\"links - 7\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"28302220-bac7-4011-bd0b-b8565627887e\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Operation\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"AuthActivityAuditEvent\\\"\\r\\n| distinct Activity\\r\\n| sort by Activity asc\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"]},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"94066942-9782-41b5-b60d-4ea12fda9a28\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TargetUserName\",\"label\":\"Target User\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"AuthActivityAuditEvent\\\"\\r\\n| distinct DstUserName\\r\\n| sort by DstUserName asc\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"]},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}],\"style\":\"above\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Authentication\"},\"name\":\"parameters - 11\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"AuthActivityAuditEvent\\\"\\r\\n| where Activity in ({Operation}) or '*' in ({Operation})\\r\\n| where DstUserName in ({TargetUserName}) or '*' in ({TargetUserName})\\r\\n| summarize Total = count() by Activity, bin(TimeGenerated, {TimeRange:grain})\\r\\n\",\"size\":0,\"showAnalytics\":true,\"title\":\"Total Events by Operation over Time\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"areachart\"},\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Authentication\"},\"customWidth\":\"75\",\"name\":\"query - 2 - Copy\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"4d809240-d4ee-4266-adc0-cb05344a2f5a\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Hostnames\",\"label\":\"Hostname\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"DetectionSummaryEvent\\\"\\r\\n| distinct DstHostName\\r\\n| sort by DstHostName asc\",\"value\":[\"value::all\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"version\":\"KqlParameterItem/1.0\",\"name\":\"Usernames\",\"label\":\"Username\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"DetectionSummaryEvent\\\"\\r\\n| distinct DstUserName\\r\\n| sort by DstUserName asc\",\"value\":[\"value::all\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"id\":\"3be22ee0-2638-4205-bfb4-ba56f9baee92\"},{\"version\":\"KqlParameterItem/1.0\",\"name\":\"Tactics\",\"label\":\"Tactic\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"DetectionSummaryEvent\\\"\\r\\n| distinct Activity\\r\\n| sort by Activity asc\",\"value\":[\"value::all\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"timeContext\":{\"durationMs\":604800000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"id\":\"6c37e6c7-3704-4a9c-a10c-227c1d46b694\"},{\"version\":\"KqlParameterItem/1.0\",\"name\":\"SensorId\",\"label\":\"Sensor ID\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"DetectionSummaryEvent\\\"\\r\\n| distinct SensorId\\r\\n| sort by SensorId asc\",\"value\":[\"value::all\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"id\":\"6e7adfa5-99de-4a23-bf94-2322beee79f1\"},{\"version\":\"KqlParameterItem/1.0\",\"name\":\"Severity\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"DetectionSummaryEvent\\\"\\r\\n| distinct Severity\\r\\n| sort by Severity asc\",\"value\":[\"value::all\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"showDefault\":false},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"id\":\"e3a85e7b-f5ed-43d6-a398-fc1a20bb42f7\"}],\"style\":\"above\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Detections\"},\"name\":\"parameters - 1\"},{\"type\":1,\"content\":{\"json\":\"___\"},\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Detections\"},\"name\":\"text - 17\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"DetectionSummaryEvent\\\"\\r\\n| where DstHostName in ({Hostnames}) or '*' in ({Hostnames})\\r\\n| where DstUserName in ({Usernames}) or '*' in ({Usernames})\\r\\n| where Activity in ({Tactics}) or '*' in ({Tactics})\\r\\n| where SensorId in ({SensorId}) or '*' in ({SensorId})\\r\\n| where Severity in ({Severity}) or '*' in ({Severity})\\r\\n| summarize ['Total Detections'] = count() by EventType\",\"size\":4,\"showAnalytics\":true,\"title\":\"Total Detections\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"titleContent\":{\"formatter\":1},\"leftContent\":{\"columnMatch\":\"Total Detections\",\"formatter\":12,\"formatOptions\":{\"palette\":\"none\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":2,\"maximumSignificantDigits\":3}}},\"showBorder\":false}},\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Detections\"},\"customWidth\":\"30\",\"name\":\"query - 2 - Copy - Copy - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"DetectionSummaryEvent\\\"\\r\\n| where DstHostName in ({Hostnames}) or '*' in ({Hostnames})\\r\\n| where DstUserName in ({Usernames}) or '*' in ({Usernames})\\r\\n| where Activity in ({Tactics}) or '*' in ({Tactics})\\r\\n| where SensorId in ({SensorId}) or '*' in ({SensorId})\\r\\n| where Severity in ({Severity}) or '*' in ({Severity})\\r\\n| summarize Total = dcount(SensorId) by EventType\",\"size\":4,\"showAnalytics\":true,\"title\":\"Number of Sensors\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"tiles\",\"tileSettings\":{\"titleContent\":{\"formatter\":1},\"leftContent\":{\"columnMatch\":\"Total\",\"formatter\":12,\"formatOptions\":{\"palette\":\"none\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":0}}},\"showBorder\":false}},\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Detections\"},\"customWidth\":\"30\",\"name\":\"query - 2 - Copy - Copy - Copy - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"DetectionSummaryEvent\\\"\\r\\n| where DstHostName in ({Hostnames}) or '*' in ({Hostnames})\\r\\n| where DstUserName in ({Usernames}) or '*' in ({Usernames})\\r\\n| where Activity in ({Tactics}) or '*' in ({Tactics})\\r\\n| where SensorId in ({SensorId}) or '*' in ({SensorId})\\r\\n| where Severity in ({Severity}) or '*' in ({Severity})\\r\\n| summarize Total = count() by Severity\",\"size\":4,\"showAnalytics\":true,\"title\":\"Detection by Severity\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"piechart\",\"chartSettings\":{\"seriesLabelSettings\":[{\"seriesName\":\"High\",\"color\":\"redDark\"},{\"seriesName\":\"Medium\",\"color\":\"orange\"},{\"seriesName\":\"Low\",\"color\":\"blue\"},{\"seriesName\":\"Critical\",\"color\":\"redBright\"}]}},\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Detections\"},\"customWidth\":\"40\",\"name\":\"query - 2 - Copy - Copy\"},{\"type\":1,\"content\":{\"json\":\"___\"},\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Detections\"},\"name\":\"text - 17 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"DetectionSummaryEvent\\\"\\r\\n| where DstHostName in ({Hostnames}) or '*' in ({Hostnames})\\r\\n| where DstUserName in ({Usernames}) or '*' in ({Usernames})\\r\\n| where Activity in ({Tactics}) or '*' in ({Tactics})\\r\\n| where SensorId in ({SensorId}) or '*' in ({SensorId})\\r\\n| where Severity in ({Severity}) or '*' in ({Severity})\\r\\n| where Severity == \\\"Critical\\\"\\r\\n| summarize Total = count() by TimeGenerated, Severity, DstHostName, DstUserName, Activity, Technique, Message\\r\\n| sort by TimeGenerated desc\\r\\n\",\"size\":1,\"showAnalytics\":true,\"title\":\"Critical Severity Events\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Total\",\"formatter\":8,\"formatOptions\":{\"palette\":\"coldHot\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2}}}]}},\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Detections\"},\"name\":\"query - 2 - Copy - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"DetectionSummaryEvent\\\"\\r\\n| where DstHostName in ({Hostnames}) or '*' in ({Hostnames})\\r\\n| where DstUserName in ({Usernames}) or '*' in ({Usernames})\\r\\n| where Activity in ({Tactics}) or '*' in ({Tactics})\\r\\n| where SensorId in ({SensorId}) or '*' in ({SensorId})\\r\\n| where Severity in ({Severity}) or '*' in ({Severity})\\r\\n| summarize Total = count() by Hostname = DstHostName, ['IP Address'] = SrcIpAddr, bin(TimeGenerated, {TimeRange:grain})\\r\\n\",\"size\":0,\"showAnalytics\":true,\"title\":\"Total Detections by Host over Time\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"unstackedbar\"},\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Detections\"},\"customWidth\":\"60\",\"name\":\"query - 2\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"DetectionSummaryEvent\\\"\\r\\n| where DstHostName in ({Hostnames}) or '*' in ({Hostnames})\\r\\n| where DstUserName in ({Usernames}) or '*' in ({Usernames})\\r\\n| where Activity in ({Tactics}) or '*' in ({Tactics})\\r\\n| where SensorId in ({SensorId}) or '*' in ({SensorId})\\r\\n| where Severity in ({Severity}) or '*' in ({Severity})\\r\\n| summarize Total = count() by Hostname = DstHostName, ['IP Address'] = SrcIpAddr\\r\\n| top 10 by Total desc\\r\\n\",\"size\":0,\"showAnalytics\":true,\"title\":\"Top 10 Hosts\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Total\",\"formatter\":8,\"formatOptions\":{\"palette\":\"coldHot\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2}}}]}},\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Detections\"},\"customWidth\":\"40\",\"name\":\"query - 2 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"AuthActivityAuditEvent\\\"\\r\\n| where Activity in ({Operation}) or '*' in ({Operation})\\r\\n| where DstUserName in ({TargetUserName}) or '*' in ({TargetUserName})\\r\\n| summarize Total = count() by Activity\\r\\n| sort by Total desc\",\"size\":0,\"showAnalytics\":true,\"title\":\"Total Events by Operation\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Total\",\"formatter\":8,\"formatOptions\":{\"palette\":\"coldHot\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"useGrouping\":true,\"maximumFractionDigits\":2}}}]}},\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Authentication\"},\"customWidth\":\"25\",\"name\":\"query - 2 - Copy - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"AuthActivityAuditEvent\\\"\\r\\n| where Activity in ({Operation}) or '*' in ({Operation})\\r\\n| where DstUserName in ({TargetUserName}) or '*' in ({TargetUserName})\\r\\n| where Outcome == \\\"false\\\"\\r\\n| summarize Total = count() by TimeGenerated, Activity, ['Target Username'] = DstUserName, ['IP Address'] =  DstIpAddr\\r\\n| sort by TimeGenerated desc\",\"size\":0,\"showAnalytics\":true,\"title\":\"Failed Events\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Total\",\"formatter\":8,\"formatOptions\":{\"palette\":\"coldHot\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"useGrouping\":true,\"maximumFractionDigits\":2}}}]}},\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Authentication\"},\"customWidth\":\"100\",\"name\":\"query - 2 - Copy - Copy - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"AuthActivityAuditEvent\\\"\\r\\n| where Activity in ({Operation}) or '*' in ({Operation})\\r\\n| where DstUserName in ({TargetUserName}) or '*' in ({TargetUserName})\\r\\n| where Outcome == \\\"false\\\"\\r\\n| summarize Total = count() by User = DstUserName\\r\\n| sort by Total desc\",\"size\":0,\"showAnalytics\":true,\"title\":\"Total Failed Events by User\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Total\",\"formatter\":8,\"formatOptions\":{\"palette\":\"coldHot\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"useGrouping\":true,\"maximumFractionDigits\":2}}}]}},\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Authentication\"},\"customWidth\":\"50\",\"name\":\"query - 2 - Copy - Copy - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"AuthActivityAuditEvent\\\"\\r\\n| where Activity in ({Operation}) or '*' in ({Operation})\\r\\n| where DstUserName in ({TargetUserName}) or '*' in ({TargetUserName})\\r\\n| where Outcome == \\\"false\\\"\\r\\n| summarize Total = count() by ['IP Address'] = DstIpAddr\\r\\n| sort by Total desc\",\"size\":0,\"showAnalytics\":true,\"title\":\"Total Failed Events by IP Address\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Total\",\"formatter\":8,\"formatOptions\":{\"palette\":\"coldHot\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"useGrouping\":true,\"maximumFractionDigits\":2}}}]}},\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Authentication\"},\"customWidth\":\"50\",\"name\":\"query - 2 - Copy - Copy - Copy - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"DetectionSummaryEvent\\\"\\r\\n| where DstHostName in ({Hostnames}) or '*' in ({Hostnames})\\r\\n| where DstUserName in ({Usernames}) or '*' in ({Usernames})\\r\\n| where Activity in ({Tactics}) or '*' in ({Tactics})\\r\\n| where SensorId in ({SensorId}) or '*' in ({SensorId})\\r\\n| where Severity in ({Severity}) or '*' in ({Severity})\\r\\n| summarize Total = count() by DstUserName, bin(TimeGenerated, {TimeRange:grain})\\r\\n\",\"size\":0,\"showAnalytics\":true,\"title\":\"Total Detections by User over Time\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"unstackedbar\"},\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Detections\"},\"customWidth\":\"60\",\"name\":\"query - 2 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"DetectionSummaryEvent\\\"\\r\\n| where DstHostName in ({Hostnames}) or '*' in ({Hostnames})\\r\\n| where DstUserName in ({Usernames}) or '*' in ({Usernames})\\r\\n| where Activity in ({Tactics}) or '*' in ({Tactics})\\r\\n| where SensorId in ({SensorId}) or '*' in ({SensorId})\\r\\n| where Severity in ({Severity}) or '*' in ({Severity})\\r\\n| summarize Total = count() by Username = DstUserName\\r\\n| top 10 by Total desc\\r\\n\",\"size\":0,\"showAnalytics\":true,\"title\":\"Top 10 Users\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Total\",\"formatter\":8,\"formatOptions\":{\"palette\":\"coldHot\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":2}}}]}},\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Detections\"},\"customWidth\":\"40\",\"name\":\"query - 2 - Copy - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"DetectionSummaryEvent\\\"\\r\\n| where DstHostName in ({Hostnames}) or '*' in ({Hostnames})\\r\\n| where DstUserName in ({Usernames}) or '*' in ({Usernames})\\r\\n| where Activity in ({Tactics}) or '*' in ({Tactics})\\r\\n| where SensorId in ({SensorId}) or '*' in ({SensorId})\\r\\n| where Severity in ({Severity}) or '*' in ({Severity})\\r\\n| summarize Total = count() by FileName, FilePath, Tactic = Activity\\r\\n| top 10 by Total desc\\r\\n\",\"size\":0,\"showAnalytics\":true,\"title\":\"File-Based Detections\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Total\",\"formatter\":8,\"formatOptions\":{\"palette\":\"coldHot\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":2}}}],\"filter\":true}},\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Detections\"},\"customWidth\":\"60\",\"name\":\"query - 15\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"DetectionSummaryEvent\\\"\\r\\n| where DstHostName in ({Hostnames}) or '*' in ({Hostnames})\\r\\n| where DstUserName in ({Usernames}) or '*' in ({Usernames})\\r\\n| where Activity in ({Tactics}) or '*' in ({Tactics})\\r\\n| where SensorId in ({SensorId}) or '*' in ({SensorId})\\r\\n| where Severity in ({Severity}) or '*' in ({Severity})\\r\\n| summarize Total = count() by FileName, bin(TimeGenerated, {TimeRange:grain})\\r\\n\",\"size\":0,\"showAnalytics\":true,\"title\":\"File-Based Detections over Time\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"unstackedbar\",\"gridSettings\":{\"filter\":true}},\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Detections\"},\"customWidth\":\"40\",\"name\":\"query - 15 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"DetectionSummaryEvent\\\"\\r\\n| where DstHostName in ({Hostnames}) or '*' in ({Hostnames})\\r\\n| where DstUserName in ({Usernames}) or '*' in ({Usernames})\\r\\n| where Activity in ({Tactics}) or '*' in ({Tactics})\\r\\n| where SensorId in ({SensorId}) or '*' in ({SensorId})\\r\\n| where Severity in ({Severity}) or '*' in ({Severity})\\r\\n| summarize Total = count() by Activity, bin(TimeGenerated, {TimeRange:grain})\\r\\n\",\"size\":0,\"showAnalytics\":true,\"title\":\"Total Detections by Tactics over Time\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"unstackedbar\"},\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Detections\"},\"customWidth\":\"60\",\"name\":\"query - 2 - Copy - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"CrowdStrikeFalconEventStream\\r\\n| where EventType == \\\"DetectionSummaryEvent\\\"\\r\\n| where DstHostName in ({Hostnames}) or '*' in ({Hostnames})\\r\\n| where DstUserName in ({Usernames}) or '*' in ({Usernames})\\r\\n| where Activity in ({Tactics}) or '*' in ({Tactics})\\r\\n| where SensorId in ({SensorId}) or '*' in ({SensorId})\\r\\n| where Severity in ({Severity}) or '*' in ({Severity})\\r\\n| summarize Total = count() by Activity\\r\\n| top 10 by Total desc\\r\\n\",\"size\":0,\"showAnalytics\":true,\"title\":\"Detections by Tactics\",\"timeContext\":{\"durationMs\":7776000000},\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Total\",\"formatter\":8,\"formatOptions\":{\"palette\":\"coldHot\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":2}}}]},\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"Activity\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"Total\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}}},\"conditionalVisibility\":{\"parameterName\":\"TabName\",\"comparison\":\"isEqualTo\",\"value\":\"Detections\"},\"customWidth\":\"40\",\"name\":\"query - 2 - Copy - Copy - Copy\"}],\"fallbackResourceIds\":[\"/subscriptions/1ef0bead-010f-49ae-bcf3-142bbc8572cd/resourcegroups/logmanagement-rg/providers/microsoft.operationalinsights/workspaces/cd-azuresentinelworkspace\"],\"fromTemplateId\":\"sentinel-CrowdStrikeFalconEndpointProtection\",\"$schema\":\"https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json\"}\r\n",
                "version": "1.0",
                "sourceId": "[resourceId('microsoft.OperationalInsights/Workspaces', parameters('workspace'))]",
                "category": "sentinel"
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Workbook-', last(split(resourceId('Microsoft.Insights/workbooks', 'CrowdStrikeFalconEndpointProtectionWorkbook'),'/'))))]",
              "properties": {
                "description": "@{workbookKey=CrowdStrikeFalconEndpointProtectionWorkbook; logoFileName=crowdstrike.svg; description=Sets the time name for analysis; dataTypesDependencies=System.Object[]; dataConnectorsDependencies=System.Object[]; previewImagesFileNames=System.Object[]; version=1.0.0; title=CrowdStrike Falcon Endpoint Protection; templateRelativePath=CrowdStrikeFalconEndpointProtection.json; subtitle=; provider=Microsoft}.description",
                "parentId": "[resourceId('Microsoft.Insights/workbooks', 'CrowdStrikeFalconEndpointProtectionWorkbook')]",
                "contentId": "CrowdStrikeFalconEndpointProtectionWorkbook",
                "kind": "Workbook",
                "version": "1.0.0",
                "source": {
                  "kind": "Solution",
                  "name": "CrowdStrike Falcon Endpoint Protection",
                  "sourceId": "azuresentinel.azure-sentinel-solution-crowdstrikefalconep"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "support@microsoft.com"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                },
                "dependencies": {
                  "operator": "AND",
                  "criteria": [
                    {
                      "contentId": "CrowdstrikeReplicatorLogs_CL",
                      "kind": "DataType"
                    },
                    {
                      "contentId": "CrowdstrikeReplicator",
                      "kind": "DataConnector"
                    }
                  ]
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "PackageVersion": "2.0.7"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(concat(parameters('workspace'),'-ar-',uniquestring('4465ebde-b381-45f7-ad08-7d818070a11c')),'1.0.0'))]",
      "location": "[parameters('workspace-location')]",
      "apiVersion": "2022-08-01",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', 'azuresentinel.azure-sentinel-solution-crowdstrikefalconep')]"
      ],
      "properties": {
        "contentId": "4465ebde-b381-45f7-ad08-7d818070a11c",
        "displayName": "Critical or High Severity Detections by User",
        "contentKind": "AnalyticsRule",
        "mainTemplate": {
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "4465ebde-b381-45f7-ad08-7d818070a11c",
              "apiVersion": "2022-04-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "Creates an incident when a large number of Critical/High severity CrowdStrike Falcon sensor detections is triggered by a single user",
                "displayName": "Critical or High Severity Detections by User",
                "enabled": false,
                "query": "let timeframe = 1h;\nlet threshold = 15; // update threshold value based on organization's preference\nlet NoteableEvents = CrowdStrikeFalconEventStream\n| where TimeGenerated > ago(timeframe)\n| where EventType == \"DetectionSummaryEvent\"\n| where Severity in (\"Critical\", \"High\")\n| summarize Total = count() by DstUserName\n| where Total > threshold;\nCrowdStrikeFalconEventStream\n| where TimeGenerated > ago(timeframe)\n| where EventType == \"DetectionSummaryEvent\"\n| where Severity in (\"Critical\", \"High\")\n| join kind=inner (NoteableEvents) on DstUserName\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Total = count() by DstHostName, SrcIpAddr, DstUserName, FileName, FileHash, Message\n| extend timestamp = StartTimeUtc, AccountCustomEntity = DstUserName, HostCustomEntity = DstHostName, IPCustomEntity = SrcIpAddr, FileHashCustomEntity = FileHash\n",
                "queryFrequency": "PT1H",
                "queryPeriod": "PT1H",
                "severity": "High",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "CrowdStrikeFalconEndpointProtection"
                  }
                ],
                "entityMappings": [
                  {
                    "fieldMappings": [
                      {
                        "identifier": "FullName",
                        "columnName": "AccountCustomEntity"
                      }
                    ],
                    "entityType": "Account"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "FullName",
                        "columnName": "HostCustomEntity"
                      }
                    ],
                    "entityType": "Host"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Address",
                        "columnName": "IPCustomEntity"
                      }
                    ],
                    "entityType": "IP"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Algorithm",
                        "columnName": "MD5"
                      },
                      {
                        "identifier": "Value",
                        "columnName": "FileHashCustomEntity"
                      }
                    ],
                    "entityType": "FileHash"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', '4465ebde-b381-45f7-ad08-7d818070a11c'),'/'))))]",
              "properties": {
                "description": "CrowdStrike Falcon Endpoint Protection Analytics Rule 1",
                "parentId": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', '4465ebde-b381-45f7-ad08-7d818070a11c')]",
                "contentId": "4465ebde-b381-45f7-ad08-7d818070a11c",
                "kind": "AnalyticsRule",
                "version": "1.0.0",
                "source": {
                  "kind": "Solution",
                  "name": "CrowdStrike Falcon Endpoint Protection",
                  "sourceId": "azuresentinel.azure-sentinel-solution-crowdstrikefalconep"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "support@microsoft.com"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "PackageVersion": "2.0.7"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(concat(parameters('workspace'),'-ar-',uniquestring('f7d298b2-726c-42a5-bbac-0d7f9950f527')),'1.0.0'))]",
      "location": "[parameters('workspace-location')]",
      "apiVersion": "2022-08-01",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', 'azuresentinel.azure-sentinel-solution-crowdstrikefalconep')]"
      ],
      "properties": {
        "contentId": "f7d298b2-726c-42a5-bbac-0d7f9950f527",
        "displayName": "Critical Severity Detection",
        "contentKind": "AnalyticsRule",
        "mainTemplate": {
          "resources": [
            {
              "type": "Microsoft.SecurityInsights/AlertRuleTemplates",
              "name": "f7d298b2-726c-42a5-bbac-0d7f9950f527",
              "apiVersion": "2022-04-01-preview",
              "kind": "Scheduled",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "description": "Creates an incident when a CrowdStrike Falcon sensor detection is triggered with a Critical Severity",
                "displayName": "Critical Severity Detection",
                "enabled": false,
                "query": "let timeframe = 1h;\nCrowdStrikeFalconEventStream\n| where TimeGenerated > ago(timeframe)\n| where EventType == \"DetectionSummaryEvent\"\n| where Severity == \"Critical\"\n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Total = count() by DstHostName, SrcIpAddr, DstUserName, Activity, Technique, FileName, FilePath, FileHash, Message\n| extend timestamp = StartTimeUtc, AccountCustomEntity = DstUserName, HostCustomEntity = DstHostName, IPCustomEntity = SrcIpAddr, FileHashCustomEntity = FileHash\n",
                "queryFrequency": "PT1H",
                "queryPeriod": "PT1H",
                "severity": "High",
                "suppressionDuration": "PT1H",
                "suppressionEnabled": false,
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "status": "Available",
                "requiredDataConnectors": [
                  {
                    "dataTypes": [
                      "CommonSecurityLog"
                    ],
                    "connectorId": "CrowdStrikeFalconEndpointProtection"
                  }
                ],
                "entityMappings": [
                  {
                    "fieldMappings": [
                      {
                        "identifier": "FullName",
                        "columnName": "AccountCustomEntity"
                      }
                    ],
                    "entityType": "Account"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "FullName",
                        "columnName": "HostCustomEntity"
                      }
                    ],
                    "entityType": "Host"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Address",
                        "columnName": "IPCustomEntity"
                      }
                    ],
                    "entityType": "IP"
                  },
                  {
                    "fieldMappings": [
                      {
                        "identifier": "Algorithm",
                        "columnName": "MD5"
                      },
                      {
                        "identifier": "Value",
                        "columnName": "FileHashCustomEntity"
                      }
                    ],
                    "entityType": "FileHash"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('AnalyticsRule-', last(split(resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', 'f7d298b2-726c-42a5-bbac-0d7f9950f527'),'/'))))]",
              "properties": {
                "description": "CrowdStrike Falcon Endpoint Protection Analytics Rule 2",
                "parentId": "[resourceId('Microsoft.SecurityInsights/AlertRuleTemplates', 'f7d298b2-726c-42a5-bbac-0d7f9950f527')]",
                "contentId": "f7d298b2-726c-42a5-bbac-0d7f9950f527",
                "kind": "AnalyticsRule",
                "version": "1.0.0",
                "source": {
                  "kind": "Solution",
                  "name": "CrowdStrike Falcon Endpoint Protection",
                  "sourceId": "azuresentinel.azure-sentinel-solution-crowdstrikefalconep"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "support@microsoft.com"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "PackageVersion": "2.0.7"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(concat(parameters('workspace'),'-pl-',uniquestring('CrowdStrike_Base')),'1.0'))]",
      "location": "[parameters('workspace-location')]",
      "apiVersion": "2022-08-01",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', 'azuresentinel.azure-sentinel-solution-crowdstrikefalconep')]"
      ],
      "properties": {
        "contentId": "CrowdStrike_Base",
        "displayName": "Crowdstrike API authentication",
        "contentKind": "Playbook",
        "mainTemplate": {
          "resources": [
            {
              "properties": {
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "manual": {
                      "type": "Request",
                      "kind": "Http"
                    }
                  },
                  "actions": {
                    "Get_secret_-_Client_ID": {
                      "runAfter": {
                        "Initialize_variable_ClientSecret": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['keyvault']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/secrets/@{encodeURIComponent(variables('ClientID'))}/value"
                      },
                      "description": "This gets the secret Client Id from the keyvault",
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs",
                            "outputs"
                          ]
                        }
                      }
                    },
                    "Get_secret_-_Client_Secret": {
                      "runAfter": {
                        "Get_secret_-_Client_ID": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['keyvault']['connectionId']"
                          }
                        },
                        "method": "get",
                        "path": "/secrets/@{encodeURIComponent(variables('ClientSecret'))}/value"
                      },
                      "description": "This gets the Clientsecret from the keyvault",
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs",
                            "outputs"
                          ]
                        }
                      }
                    },
                    "HTTP_-_Get_Access_Token": {
                      "runAfter": {
                        "Initialize_variable_Falcon_Host_URL": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "body": "client_id=@{body('Get_secret_-_Client_ID')?['value']}&client_secret=@{body('Get_secret_-_Client_Secret')?['value']}",
                        "headers": {
                          "Content-Type": "application/x-www-form-urlencoded",
                          "accept": "application/json"
                        },
                        "method": "POST",
                        "uri": "@{variables('FalconHost')}/oauth2/token"
                      },
                      "description": "This calls the crowdstrike to generate the access token",
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs",
                            "outputs"
                          ]
                        }
                      }
                    },
                    "Initialize_variable_ClientID": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ClientID",
                            "type": "string",
                            "value": "[parameters('ClientID')]"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_ClientSecret": {
                      "runAfter": {
                        "Initialize_variable_ClientID": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ClientSecret",
                            "type": "string",
                            "value": "[parameters('ClientSecret')]"
                          }
                        ]
                      }
                    },
                    "Initialize_variable_Falcon_Host_URL": {
                      "runAfter": {
                        "Get_secret_-_Client_Secret": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "FalconHost",
                            "type": "string",
                            "value": "[parameters('Service_Endpoint')]"
                          }
                        ]
                      },
                      "description": "This is to hold the Falcon Host URL"
                    },
                    "Parse_JSON_-_Access_Token_Response": {
                      "runAfter": {
                        "HTTP_-_Get_Access_Token": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('HTTP_-_Get_Access_Token')",
                        "schema": {
                          "properties": {
                            "access_token": {
                              "type": "string"
                            },
                            "expires_in": {
                              "type": "integer"
                            },
                            "token_type": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "description": "prepare json format for get access token response",
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs"
                          ]
                        }
                      }
                    },
                    "Response": {
                      "runAfter": {
                        "Parse_JSON_-_Access_Token_Response": [
                          "Succeeded"
                        ]
                      },
                      "type": "Response",
                      "kind": "Http",
                      "inputs": {
                        "body": {
                          "AccessToken": "Bearer @{body('Parse_JSON_-_Access_Token_Response')?['access_token']}",
                          "FalconHost": "@{variables('FalconHost')}"
                        },
                        "statusCode": 200
                      },
                      "description": "This holds the access token and falcon host URL"
                    }
                  }
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "keyvault": {
                        "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/', 'keyvault')]",
                        "connectionId": "[resourceId('Microsoft.Web/connections', variables('keyvault_Connection_Name'))]",
                        "connectionName": "[variables('keyvault_Connection_Name')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "name": "[parameters('PlaybookName')]",
              "type": "Microsoft.Logic/workflows",
              "location": "[variables('workspace-location-inline')]",
              "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('keyvault_Connection_Name'))]"
              ],
              "tags": {
                "hidden-SentinelTemplateName": "Crowdstrike-Authentication",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[resourceId('microsoft.OperationalInsights/Workspaces', parameters('workspace'))]"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "apiVersion": "2016-06-01"
            },
            {
              "type": "Microsoft.Web/Connections",
              "apiVersion": "2016-06-01",
              "name": "[variables('keyvault_Connection_Name')]",
              "location": "[variables('workspace-location-inline')]",
              "properties": {
                "api": {
                  "id": "[variables('_connection-2')]"
                },
                "displayName": "[variables('keyvault_Connection_Name')]",
                "parameterValueType": "Alternative",
                "AlternativeParameterValues": {
                  "vaultName": "[parameters('keyvault_Name')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(resourceId('Microsoft.Logic/workflows', 'CrowdStrike_Base'),'/'))))]",
              "properties": {
                "parentId": "[resourceId('Microsoft.Logic/workflows', 'CrowdStrike_Base')]",
                "contentId": "CrowdStrike_Base",
                "kind": "Playbook",
                "version": "1.0",
                "source": {
                  "kind": "Solution",
                  "name": "CrowdStrike Falcon Endpoint Protection",
                  "sourceId": "azuresentinel.azure-sentinel-solution-crowdstrikefalconep"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "support@microsoft.com"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "PackageVersion": "2.0.7"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(concat(parameters('workspace'),'-pl-',uniquestring('CrowdStrike_Enrichment_GetDeviceInformation')),'1.0'))]",
      "location": "[parameters('workspace-location')]",
      "apiVersion": "2022-08-01",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', 'azuresentinel.azure-sentinel-solution-crowdstrikefalconep')]"
      ],
      "properties": {
        "contentId": "CrowdStrike_Enrichment_GetDeviceInformation",
        "displayName": "Endpoint enrichment - Crowdstrike",
        "contentKind": "Playbook",
        "mainTemplate": {
          "resources": [
            {
              "properties": {
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "actions": {
                    "Add_comment_to_incident_(V3)": {
                      "runAfter": {
                        "Compose_image_to_add_in_the_incident": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "incidentArmId": "@triggerBody()?['object']?['id']",
                          "message": "<p>@{outputs('Compose_image_to_add_in_the_incident')}<span style=\"font-size: 14px\"><strong>Crowdstrike_Enrichment_GetDeviceInformation playbook run results:</strong></span><br>\n<br>\n@{variables('Comment')}<br>\n</p>"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/Incidents/Comment"
                      }
                    },
                    "Compose_image_to_add_in_the_incident": {
                      "type": "Compose",
                      "inputs": "<img src=\"https://uploads4.craft.co/uploads/company/logo/852xx/85212/normal_1171b7695370eb94.jpg\" alt=\"Lamp\" width=\"32\" height=\"32\">",
                      "runAfter": {
                        "Condition__to_check_if_device_id_returns_results": [
                          "Succeeded"
                        ]
                      },
                      "description": "This composes crowdstrike image to comment in the incident"
                    },
                    "Condition__to_check_if_device_id_returns_results": {
                      "type": "If",
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "equals": [
                                "@body('Parse_JSON_Get_device_id_response')?['resources']?[0]",
                                "@null"
                              ]
                            }
                          }
                        ]
                      },
                      "actions": {
                        "Append_to_string_variable_comment_for_device_information": {
                          "type": "AppendToStringVariable",
                          "inputs": {
                            "name": "Comment",
                            "value": "Device information:\n@{body('Create_HTML_table_for_device_information')}"
                          },
                          "runAfter": {
                            "Create_HTML_table_for_device_information": [
                              "Succeeded"
                            ]
                          },
                          "description": "Appends device information to comment variable"
                        },
                        "Condition_if_detections_are_present_for_the_host": {
                          "type": "If",
                          "expression": {
                            "and": [
                              {
                                "not": {
                                  "equals": [
                                    "@body('Parse_JSON_search_detections_response')?['resources']?[0]",
                                    "@null"
                                  ]
                                }
                              }
                            ]
                          },
                          "actions": {
                            "Append_to_string_variable_detection_information": {
                              "type": "AppendToStringVariable",
                              "inputs": {
                                "name": "Comment",
                                "value": "Detection Information:\n@{body('Select_detection_information')}"
                              },
                              "runAfter": {
                                "Select_detection_information": [
                                  "Succeeded"
                                ]
                              },
                              "description": "This appends detection information to comment variable"
                            },
                            "HTTP-Get_detection_information": {
                              "type": "Http",
                              "inputs": {
                                "method": "POST",
                                "uri": "@{body('CrowdStrike_Base')?['FalconHost']}/detects/entities/summaries/GET/v1",
                                "headers": {
                                  "Accept": "application/json",
                                  "Authorization": "@{body('CrowdStrike_Base')?['AccessToken']}",
                                  "Content-Type": "application/json"
                                },
                                "body": {
                                  "ids": "@body('Parse_JSON_search_detections_response')?['resources']"
                                }
                              },
                              "description": "This gets the detection information from the crowdstrike"
                            },
                            "Parse_JSON_detection_information_response": {
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('HTTP-Get_detection_information')",
                                "schema": {
                                  "properties": {
                                    "errors": {
                                      "type": "array"
                                    },
                                    "meta": {
                                      "properties": {
                                        "powered_by": {
                                          "type": "string"
                                        },
                                        "query_time": {
                                          "type": "number"
                                        },
                                        "trace_id": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "resources": {
                                      "items": {
                                        "properties": {
                                          "behaviors": {
                                            "items": {
                                              "properties": {
                                                "alleged_filetype": {
                                                  "type": "string"
                                                },
                                                "behavior_id": {
                                                  "type": "string"
                                                },
                                                "cmdline": {
                                                  "type": "string"
                                                },
                                                "confidence": {
                                                  "type": "integer"
                                                },
                                                "control_graph_id": {
                                                  "type": "string"
                                                },
                                                "device_id": {
                                                  "type": "string"
                                                },
                                                "display_name": {
                                                  "type": "string"
                                                },
                                                "filename": {
                                                  "type": "string"
                                                },
                                                "filepath": {
                                                  "type": "string"
                                                },
                                                "ioc_description": {
                                                  "type": "string"
                                                },
                                                "ioc_source": {
                                                  "type": "string"
                                                },
                                                "ioc_type": {
                                                  "type": "string"
                                                },
                                                "ioc_value": {
                                                  "type": "string"
                                                },
                                                "md5": {
                                                  "type": "string"
                                                },
                                                "objective": {
                                                  "type": "string"
                                                },
                                                "parent_details": {
                                                  "properties": {
                                                    "parent_cmdline": {
                                                      "type": "string"
                                                    },
                                                    "parent_md5": {
                                                      "type": "string"
                                                    },
                                                    "parent_process_graph_id": {
                                                      "type": "string"
                                                    },
                                                    "parent_sha256": {
                                                      "type": "string"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "pattern_disposition": {
                                                  "type": "integer"
                                                },
                                                "pattern_disposition_details": {
                                                  "properties": {
                                                    "bootup_safeguard_enabled": {
                                                      "type": "boolean"
                                                    },
                                                    "critical_process_disabled": {
                                                      "type": "boolean"
                                                    },
                                                    "detect": {
                                                      "type": "boolean"
                                                    },
                                                    "fs_operation_blocked": {
                                                      "type": "boolean"
                                                    },
                                                    "handle_operation_downgraded": {
                                                      "type": "boolean"
                                                    },
                                                    "inddet_mask": {
                                                      "type": "boolean"
                                                    },
                                                    "indicator": {
                                                      "type": "boolean"
                                                    },
                                                    "kill_parent": {
                                                      "type": "boolean"
                                                    },
                                                    "kill_process": {
                                                      "type": "boolean"
                                                    },
                                                    "kill_subprocess": {
                                                      "type": "boolean"
                                                    },
                                                    "operation_blocked": {
                                                      "type": "boolean"
                                                    },
                                                    "policy_disabled": {
                                                      "type": "boolean"
                                                    },
                                                    "process_blocked": {
                                                      "type": "boolean"
                                                    },
                                                    "quarantine_file": {
                                                      "type": "boolean"
                                                    },
                                                    "quarantine_machine": {
                                                      "type": "boolean"
                                                    },
                                                    "registry_operation_blocked": {
                                                      "type": "boolean"
                                                    },
                                                    "rooting": {
                                                      "type": "boolean"
                                                    },
                                                    "sensor_only": {
                                                      "type": "boolean"
                                                    }
                                                  },
                                                  "type": "object"
                                                },
                                                "scenario": {
                                                  "type": "string"
                                                },
                                                "severity": {
                                                  "type": "integer"
                                                },
                                                "sha256": {
                                                  "type": "string"
                                                },
                                                "tactic": {
                                                  "type": "string"
                                                },
                                                "tactic_id": {
                                                  "type": "string"
                                                },
                                                "technique": {
                                                  "type": "string"
                                                },
                                                "technique_id": {
                                                  "type": "string"
                                                },
                                                "timestamp": {
                                                  "type": "string"
                                                },
                                                "triggering_process_graph_id": {
                                                  "type": "string"
                                                },
                                                "user_id": {
                                                  "type": "string"
                                                },
                                                "user_name": {
                                                  "type": "string"
                                                }
                                              },
                                              "required": [
                                                "device_id",
                                                "timestamp",
                                                "behavior_id",
                                                "filename",
                                                "filepath",
                                                "alleged_filetype",
                                                "cmdline",
                                                "scenario",
                                                "objective",
                                                "tactic",
                                                "tactic_id",
                                                "technique",
                                                "technique_id",
                                                "display_name",
                                                "severity",
                                                "confidence",
                                                "ioc_type",
                                                "ioc_value",
                                                "ioc_source",
                                                "ioc_description",
                                                "user_name",
                                                "user_id",
                                                "control_graph_id",
                                                "triggering_process_graph_id",
                                                "sha256",
                                                "md5",
                                                "parent_details",
                                                "pattern_disposition",
                                                "pattern_disposition_details"
                                              ],
                                              "type": "object"
                                            },
                                            "type": "array"
                                          },
                                          "behaviors_processed": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "cid": {
                                            "type": "string"
                                          },
                                          "created_timestamp": {
                                            "type": "string"
                                          },
                                          "detection_id": {
                                            "type": "string"
                                          },
                                          "device": {
                                            "properties": {
                                              "agent_load_flags": {
                                                "type": "string"
                                              },
                                              "agent_local_time": {
                                                "type": "string"
                                              },
                                              "agent_version": {
                                                "type": "string"
                                              },
                                              "bios_manufacturer": {
                                                "type": "string"
                                              },
                                              "bios_version": {
                                                "type": "string"
                                              },
                                              "cid": {
                                                "type": "string"
                                              },
                                              "config_id_base": {
                                                "type": "string"
                                              },
                                              "config_id_build": {
                                                "type": "string"
                                              },
                                              "config_id_platform": {
                                                "type": "string"
                                              },
                                              "device_id": {
                                                "type": "string"
                                              },
                                              "external_ip": {
                                                "type": "string"
                                              },
                                              "first_seen": {
                                                "type": "string"
                                              },
                                              "groups": {
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": "array"
                                              },
                                              "hostname": {
                                                "type": "string"
                                              },
                                              "last_seen": {
                                                "type": "string"
                                              },
                                              "local_ip": {
                                                "type": "string"
                                              },
                                              "mac_address": {
                                                "type": "string"
                                              },
                                              "machine_domain": {
                                                "type": "string"
                                              },
                                              "major_version": {
                                                "type": "string"
                                              },
                                              "minor_version": {
                                                "type": "string"
                                              },
                                              "modified_timestamp": {
                                                "type": "string"
                                              },
                                              "os_version": {
                                                "type": "string"
                                              },
                                              "ou": {
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": "array"
                                              },
                                              "platform_id": {
                                                "type": "string"
                                              },
                                              "platform_name": {
                                                "type": "string"
                                              },
                                              "product_type": {
                                                "type": "string"
                                              },
                                              "product_type_desc": {
                                                "type": "string"
                                              },
                                              "site_name": {
                                                "type": "string"
                                              },
                                              "status": {
                                                "type": "string"
                                              },
                                              "system_manufacturer": {
                                                "type": "string"
                                              },
                                              "system_product_name": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "email_sent": {
                                            "type": "boolean"
                                          },
                                          "first_behavior": {
                                            "type": "string"
                                          },
                                          "hostinfo": {
                                            "properties": {
                                              "active_directory_dn_display": {
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": "array"
                                              },
                                              "domain": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "last_behavior": {
                                            "type": "string"
                                          },
                                          "max_confidence": {
                                            "type": "integer"
                                          },
                                          "max_severity": {
                                            "type": "integer"
                                          },
                                          "max_severity_displayname": {
                                            "type": "string"
                                          },
                                          "seconds_to_resolved": {
                                            "type": "integer"
                                          },
                                          "seconds_to_triaged": {
                                            "type": "integer"
                                          },
                                          "show_in_ui": {
                                            "type": "boolean"
                                          },
                                          "status": {
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "cid",
                                          "created_timestamp",
                                          "detection_id",
                                          "device",
                                          "behaviors",
                                          "email_sent",
                                          "first_behavior",
                                          "last_behavior",
                                          "max_confidence",
                                          "max_severity",
                                          "max_severity_displayname",
                                          "show_in_ui",
                                          "status",
                                          "hostinfo",
                                          "seconds_to_triaged",
                                          "seconds_to_resolved",
                                          "behaviors_processed"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "runAfter": {
                                "HTTP-Get_detection_information": [
                                  "Succeeded"
                                ]
                              },
                              "description": "prepares json message for detection information"
                            },
                            "Select_detection_information": {
                              "type": "Select",
                              "inputs": {
                                "from": "@body('Parse_JSON_detection_information_response')?['resources']",
                                "select": {
                                  "detection_id": "@item()?['detection_id']",
                                  "device_id": "@item()?['device']?['device_id']",
                                  "domain": "@item()?['hostinfo']?['domain']",
                                  "local_ip": "@item()?['device']?['local_ip']"
                                }
                              },
                              "runAfter": {
                                "Parse_JSON_detection_information_response": [
                                  "Succeeded"
                                ]
                              },
                              "description": "compose detection information"
                            }
                          },
                          "runAfter": {
                            "Parse_JSON_search_detections_response": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "Append_to_string_variable_comment_if_no_detections_are_present": {
                                "type": "AppendToStringVariable",
                                "inputs": {
                                  "name": "Comment",
                                  "value": "There are no detections present for this device."
                                },
                                "description": "this appends text to comments if no detections are present"
                              }
                            }
                          },
                          "description": "This checks if detections are present for the host"
                        },
                        "Create_HTML_table_for_device_information": {
                          "type": "Table",
                          "inputs": {
                            "from": "@body('Parse_JSON_device_information_response')?['resources']",
                            "format": "HTML",
                            "columns": [
                              {
                                "header": "device_id",
                                "value": "@item()?['device_id']"
                              },
                              {
                                "header": "external_ip",
                                "value": "@item()?['external_ip']"
                              },
                              {
                                "header": "mac_address",
                                "value": "@item()?['mac_address']"
                              },
                              {
                                "header": "hostname",
                                "value": "@item()?['hostname']"
                              },
                              {
                                "header": "first_seen",
                                "value": "@item()?['first_seen']"
                              },
                              {
                                "header": "last_seen",
                                "value": "@item()?['last_seen']"
                              },
                              {
                                "header": "local_ip",
                                "value": "@item()?['local_ip']"
                              },
                              {
                                "header": "machine_domain",
                                "value": "@item()?['machine_domain']"
                              },
                              {
                                "header": "os_version",
                                "value": "@item()?['os_version']"
                              }
                            ]
                          },
                          "runAfter": {
                            "Parse_JSON_device_information_response": [
                              "Succeeded"
                            ]
                          },
                          "description": "prepares HTML table for device information"
                        },
                        "HTTP_-Search_for_detections": {
                          "type": "Http",
                          "inputs": {
                            "method": "GET",
                            "uri": "@{body('CrowdStrike_Base')?['FalconHost']}/detects/queries/detects/v1?filter=first_behavior:>'@{variables('Timestamp')}'&device_id:'@{body('Parse_JSON_Get_device_id_response')?['resources']?[0]}'&sort=first_behavior.desc",
                            "headers": {
                              "Accept": "application/json",
                              "Authorization": "@{body('CrowdStrike_Base')?['AccessToken']}",
                              "Content-Type": "application/json"
                            }
                          },
                          "runAfter": {
                            "Set_variable_timestamp_for_past_3_days": [
                              "Succeeded"
                            ]
                          },
                          "description": "searches the detections based on the filters from crowdstrike"
                        },
                        "HTTP_-_Get_device_information_": {
                          "type": "Http",
                          "inputs": {
                            "method": "GET",
                            "uri": "@{body('CrowdStrike_Base')?['FalconHost']}/devices/entities/devices/v1?ids=@{body('Parse_JSON_Get_device_id_response')?['resources']?[0]}",
                            "headers": {
                              "Accept": "application/json",
                              "Authorization": "@{body('CrowdStrike_Base')?['AccessToken']}",
                              "Content-Type": "application/json"
                            }
                          },
                          "description": "This gets the device information from crowdstrike"
                        },
                        "Parse_JSON_device_information_response": {
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('HTTP_-_Get_device_information_')",
                            "schema": {
                              "properties": {
                                "errors": {
                                  "type": "array"
                                },
                                "meta": {
                                  "properties": {
                                    "powered_by": {
                                      "type": "string"
                                    },
                                    "query_time": {
                                      "type": "number"
                                    },
                                    "trace_id": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "resources": {
                                  "items": {
                                    "properties": {
                                      "agent_load_flags": {
                                        "type": "string"
                                      },
                                      "agent_local_time": {
                                        "type": "string"
                                      },
                                      "agent_version": {
                                        "type": "string"
                                      },
                                      "bios_manufacturer": {
                                        "type": "string"
                                      },
                                      "bios_version": {
                                        "type": "string"
                                      },
                                      "build_number": {
                                        "type": "string"
                                      },
                                      "cid": {
                                        "type": "string"
                                      },
                                      "config_id_base": {
                                        "type": "string"
                                      },
                                      "config_id_build": {
                                        "type": "string"
                                      },
                                      "config_id_platform": {
                                        "type": "string"
                                      },
                                      "cpu_signature": {
                                        "type": "string"
                                      },
                                      "device_id": {
                                        "type": "string"
                                      },
                                      "device_policies": {
                                        "properties": {
                                          "device_control": {
                                            "properties": {
                                              "applied": {
                                                "type": "boolean"
                                              },
                                              "applied_date": {
                                                "type": "string"
                                              },
                                              "assigned_date": {
                                                "type": "string"
                                              },
                                              "policy_id": {
                                                "type": "string"
                                              },
                                              "policy_type": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "firewall": {
                                            "properties": {
                                              "applied": {
                                                "type": "boolean"
                                              },
                                              "applied_date": {
                                                "type": "string"
                                              },
                                              "assigned_date": {
                                                "type": "string"
                                              },
                                              "policy_id": {
                                                "type": "string"
                                              },
                                              "policy_type": {
                                                "type": "string"
                                              },
                                              "rule_set_id": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "global_config": {
                                            "properties": {
                                              "applied": {
                                                "type": "boolean"
                                              },
                                              "applied_date": {
                                                "type": "string"
                                              },
                                              "assigned_date": {
                                                "type": "string"
                                              },
                                              "policy_id": {
                                                "type": "string"
                                              },
                                              "policy_type": {
                                                "type": "string"
                                              },
                                              "settings_hash": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "prevention": {
                                            "properties": {
                                              "applied": {
                                                "type": "boolean"
                                              },
                                              "applied_date": {
                                                "type": "string"
                                              },
                                              "assigned_date": {
                                                "type": "string"
                                              },
                                              "policy_id": {
                                                "type": "string"
                                              },
                                              "policy_type": {
                                                "type": "string"
                                              },
                                              "rule_groups": {
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": "array"
                                              },
                                              "settings_hash": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "remote_response": {
                                            "properties": {
                                              "applied": {
                                                "type": "boolean"
                                              },
                                              "applied_date": {
                                                "type": "string"
                                              },
                                              "assigned_date": {
                                                "type": "string"
                                              },
                                              "policy_id": {
                                                "type": "string"
                                              },
                                              "policy_type": {
                                                "type": "string"
                                              },
                                              "settings_hash": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "sensor_update": {
                                            "properties": {
                                              "applied": {
                                                "type": "boolean"
                                              },
                                              "applied_date": {
                                                "type": "string"
                                              },
                                              "assigned_date": {
                                                "type": "string"
                                              },
                                              "policy_id": {
                                                "type": "string"
                                              },
                                              "policy_type": {
                                                "type": "string"
                                              },
                                              "settings_hash": {
                                                "type": "string"
                                              },
                                              "uninstall_protection": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "external_ip": {
                                        "type": "string"
                                      },
                                      "first_seen": {
                                        "type": "string"
                                      },
                                      "group_hash": {
                                        "type": "string"
                                      },
                                      "groups": {
                                        "items": {
                                          "type": "string"
                                        },
                                        "type": "array"
                                      },
                                      "hostname": {
                                        "type": "string"
                                      },
                                      "last_seen": {
                                        "type": "string"
                                      },
                                      "local_ip": {
                                        "type": "string"
                                      },
                                      "mac_address": {
                                        "type": "string"
                                      },
                                      "machine_domain": {
                                        "type": "string"
                                      },
                                      "major_version": {
                                        "type": "string"
                                      },
                                      "meta": {
                                        "properties": {
                                          "version": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "minor_version": {
                                        "type": "string"
                                      },
                                      "modified_timestamp": {
                                        "type": "string"
                                      },
                                      "os_version": {
                                        "type": "string"
                                      },
                                      "ou": {
                                        "items": {
                                          "type": "string"
                                        },
                                        "type": "array"
                                      },
                                      "platform_id": {
                                        "type": "string"
                                      },
                                      "platform_name": {
                                        "type": "string"
                                      },
                                      "pointer_size": {
                                        "type": "string"
                                      },
                                      "policies": {
                                        "items": {
                                          "properties": {
                                            "applied": {
                                              "type": "boolean"
                                            },
                                            "applied_date": {
                                              "type": "string"
                                            },
                                            "assigned_date": {
                                              "type": "string"
                                            },
                                            "policy_id": {
                                              "type": "string"
                                            },
                                            "policy_type": {
                                              "type": "string"
                                            },
                                            "rule_groups": {
                                              "items": {
                                                "type": "string"
                                              },
                                              "type": "array"
                                            },
                                            "settings_hash": {
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "policy_type",
                                            "policy_id",
                                            "applied",
                                            "settings_hash",
                                            "assigned_date",
                                            "applied_date",
                                            "rule_groups"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      },
                                      "product_type": {
                                        "type": "string"
                                      },
                                      "product_type_desc": {
                                        "type": "string"
                                      },
                                      "provision_status": {
                                        "type": "string"
                                      },
                                      "reduced_functionality_mode": {
                                        "type": "string"
                                      },
                                      "serial_number": {
                                        "type": "string"
                                      },
                                      "service_pack_major": {
                                        "type": "string"
                                      },
                                      "service_pack_minor": {
                                        "type": "string"
                                      },
                                      "site_name": {
                                        "type": "string"
                                      },
                                      "slow_changing_modified_timestamp": {
                                        "type": "string"
                                      },
                                      "status": {
                                        "type": "string"
                                      },
                                      "system_manufacturer": {
                                        "type": "string"
                                      },
                                      "system_product_name": {
                                        "type": "string"
                                      },
                                      "tags": {
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "device_id",
                                      "cid",
                                      "agent_load_flags",
                                      "agent_local_time",
                                      "agent_version",
                                      "bios_manufacturer",
                                      "bios_version",
                                      "build_number",
                                      "config_id_base",
                                      "config_id_build",
                                      "config_id_platform",
                                      "cpu_signature",
                                      "external_ip",
                                      "mac_address",
                                      "hostname",
                                      "first_seen",
                                      "last_seen",
                                      "local_ip",
                                      "major_version",
                                      "minor_version",
                                      "os_version",
                                      "platform_id",
                                      "platform_name",
                                      "policies",
                                      "reduced_functionality_mode",
                                      "device_policies",
                                      "groups",
                                      "group_hash",
                                      "product_type",
                                      "product_type_desc",
                                      "provision_status",
                                      "serial_number",
                                      "service_pack_major",
                                      "service_pack_minor",
                                      "pointer_size",
                                      "status",
                                      "system_manufacturer",
                                      "system_product_name",
                                      "tags",
                                      "modified_timestamp",
                                      "slow_changing_modified_timestamp",
                                      "meta"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "runAfter": {
                            "HTTP_-_Get_device_information_": [
                              "Succeeded"
                            ]
                          },
                          "description": "prepares json for device information"
                        },
                        "Parse_JSON_search_detections_response": {
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('HTTP_-Search_for_detections')",
                            "schema": {
                              "properties": {
                                "errors": {
                                  "type": "array"
                                },
                                "meta": {
                                  "properties": {
                                    "pagination": {
                                      "properties": {
                                        "limit": {
                                          "type": "integer"
                                        },
                                        "offset": {
                                          "type": "integer"
                                        },
                                        "total": {
                                          "type": "integer"
                                        }
                                      },
                                      "type": "object"
                                    },
                                    "powered_by": {
                                      "type": "string"
                                    },
                                    "query_time": {
                                      "type": "number"
                                    },
                                    "trace_id": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "resources": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "runAfter": {
                            "HTTP_-Search_for_detections": [
                              "Succeeded"
                            ]
                          },
                          "description": "prepares json for search detections"
                        },
                        "Set_variable_timestamp_for_past_3_days": {
                          "type": "SetVariable",
                          "inputs": {
                            "name": "Timestamp",
                            "value": "@{getPastTime(3, 'Day')}"
                          },
                          "runAfter": {
                            "Append_to_string_variable_comment_for_device_information": [
                              "Succeeded"
                            ]
                          },
                          "description": "set variable timestamp for past 3 days to filter detections"
                        }
                      },
                      "runAfter": {
                        "Parse_JSON_Get_device_id_response": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Append_to_string_variable_if_no_devices_are_present": {
                            "type": "AppendToStringVariable",
                            "inputs": {
                              "name": "Comment",
                              "value": "There are no devices present"
                            },
                            "description": "This appends text to string variable if no devices are present"
                          }
                        }
                      },
                      "description": "This checks if device is present in falcon host or not"
                    },
                    "CrowdStrike_Base": {
                      "runAfter": {
                        "Initialize_variable_comment": [
                          "Succeeded"
                        ]
                      },
                      "type": "Workflow",
                      "inputs": {
                        "host": {
                          "triggerName": "manual",
                          "workflow": {
                            "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name ,'/providers/Microsoft.Logic/workflows/', parameters('CrowdStrike_Base_Playbook_Name'))]"
                          }
                        }
                      },
                      "description": "This is to call the base logic app to get the access token and falcon host URL"
                    },
                    "Entities_-_Get_Hosts": {
                      "type": "ApiConnection",
                      "inputs": {
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "path": "/entities/host"
                      }
                    },
                    "HTTP_-_Get_device_id": {
                      "type": "Http",
                      "inputs": {
                        "method": "GET",
                        "uri": "@{body('CrowdStrike_Base')?['FalconHost']}/devices/queries/devices/v1?filter=hostname:'@{body('Entities_-_Get_Hosts')?['Hosts']?[0]?['HostName']}'",
                        "headers": {
                          "Accept": "application/json",
                          "Authorization": "@{body('CrowdStrike_Base')?['AccessToken']}",
                          "Content-Type": "application/json"
                        }
                      },
                      "runAfter": {
                        "CrowdStrike_Base": [
                          "Succeeded"
                        ]
                      },
                      "description": "This filters the device id by hostname"
                    },
                    "Initialize_variable_comment": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Comment",
                            "type": "string"
                          }
                        ]
                      },
                      "runAfter": {
                        "Initialize_variable_timestamp": [
                          "Succeeded"
                        ]
                      },
                      "description": "This holds the variable comment to include in the incident"
                    },
                    "Initialize_variable_timestamp": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Timestamp",
                            "type": "string"
                          }
                        ]
                      },
                      "runAfter": {
                        "Entities_-_Get_Hosts": [
                          "Succeeded"
                        ]
                      },
                      "description": "Initialize timestamp variable to hold the timestamp"
                    },
                    "Parse_JSON_Get_device_id_response": {
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('HTTP_-_Get_device_id')",
                        "schema": {
                          "meta": {
                            "pagination": {
                              "limit": 100,
                              "offset": 1,
                              "total": 1
                            },
                            "powered_by": "device-api",
                            "query_time": 0.005041315,
                            "trace_id": "aa7b84f5-3e81-4980-ad9f-c14b6d8ca577"
                          },
                          "resources": [
                            "cdc977a72a8c49528bb82f89dde2c2e9"
                          ]
                        }
                      },
                      "runAfter": {
                        "HTTP_-_Get_device_id": [
                          "Succeeded"
                        ]
                      },
                      "description": "prepares json for the device id response"
                    }
                  },
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "When_Azure_Sentinel_incident_creation_rule_was_triggered_(Private_Preview_only)": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "contentVersion": "1.0.0.0"
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                        "connectionName": "[variables('AzureSentinelConnectionName')]",
                        "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2017-07-01",
              "name": "[parameters('PlaybookName')]",
              "location": "[variables('workspace-location-inline')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "tags": {
                "hidden-SentinelTemplateName": "EndpointEnrichment-Crowdstrike",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[resourceId('microsoft.OperationalInsights/Workspaces', parameters('workspace'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[variables('AzureSentinelConnectionName')]",
              "location": "[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[variables('AzureSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(resourceId('Microsoft.Logic/workflows', 'CrowdStrike_Enrichment_GetDeviceInformation'),'/'))))]",
              "properties": {
                "parentId": "[resourceId('Microsoft.Logic/workflows', 'CrowdStrike_Enrichment_GetDeviceInformation')]",
                "contentId": "CrowdStrike_Enrichment_GetDeviceInformation",
                "kind": "Playbook",
                "version": "1.0",
                "source": {
                  "kind": "Solution",
                  "name": "CrowdStrike Falcon Endpoint Protection",
                  "sourceId": "azuresentinel.azure-sentinel-solution-crowdstrikefalconep"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "support@microsoft.com"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "PackageVersion": "2.0.7"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(concat(parameters('workspace'),'-pl-',uniquestring('CrowdStrike_ContainHost')),'1.0'))]",
      "location": "[parameters('workspace-location')]",
      "apiVersion": "2022-08-01",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', 'azuresentinel.azure-sentinel-solution-crowdstrikefalconep')]"
      ],
      "properties": {
        "contentId": "CrowdStrike_ContainHost",
        "displayName": "Isolate endpoint - Crowdstrike",
        "contentKind": "Playbook",
        "mainTemplate": {
          "resources": [
            {
              "properties": {
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "actions": {
                    "Add_comment_to_incident_(V3)": {
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "body": {
                          "incidentArmId": "@triggerBody()?['object']?['id']",
                          "message": "<p>@{outputs('Compose_image_to_add_in_the_incident')}<span style=\"font-size: 16px\"><strong>CrowdStrike_ContainHost playbook run results:</strong></span><br>\n<br>\n@{variables('Comment')}</p>"
                        },
                        "path": "/Incidents/Comment"
                      },
                      "runAfter": {
                        "Compose_image_to_add_in_the_incident": [
                          "Succeeded"
                        ]
                      },
                      "description": "This adds comments to the Microsoft sentinel incident"
                    },
                    "Compose_image_to_add_in_the_incident": {
                      "type": "Compose",
                      "inputs": "<img src=\"https://uploads4.craft.co/uploads/company/logo/852xx/85212/normal_1171b7695370eb94.jpg\"  width=\"32\" height=\"32\">",
                      "runAfter": {
                        "Condition_to_check_if_device_is_present_in_falcon_host_crowdstrike": [
                          "Succeeded"
                        ]
                      },
                      "description": "This composes the crowd strike image to comment in the incident"
                    },
                    "Condition_to_check_if_crowdstrike_action_is_successful": {
                      "type": "If",
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@variables('Successfromcrowdstike')",
                              "Success"
                            ]
                          }
                        ]
                      },
                      "actions": {
                        "Update_incident": {
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                              }
                            },
                            "method": "put",
                            "body": {
                              "incidentArmId": "@triggerBody()?['object']?['id']",
                              "status": "Closed",
                              "classification": {
                                "ClassificationAndReason": "Benign Positive - Suspicious But Expected",
                                "ClassificationReasonText": "CrowdStrike_ContainHost playbook ran and closed this incident"
                              }
                            },
                            "path": "/Incidents"
                          }
                        }
                      },
                      "runAfter": {
                        "Add_comment_to_incident_(V3)": [
                          "Succeeded"
                        ]
                      },
                      "description": "This checks if crowdstrike action is successful or not"
                    },
                    "Condition_to_check_if_device_is_present_in_falcon_host_crowdstrike": {
                      "type": "If",
                      "expression": {
                        "and": [
                          {
                            "not": {
                              "equals": [
                                "@body('Parse_JSON_Get_device_id_response')?['resources']?[0]",
                                "@null"
                              ]
                            }
                          }
                        ]
                      },
                      "actions": {
                        "Append_to_string_variable_comment_for_device_information": {
                          "type": "AppendToStringVariable",
                          "inputs": {
                            "name": "Comment",
                            "value": "Devices information from crowdstrike:\n@{body('Create_HTML_table_for_device_information')}"
                          },
                          "runAfter": {
                            "Create_HTML_table_for_device_information": [
                              "Succeeded"
                            ]
                          },
                          "description": "Append html format of device information to comment in the incident"
                        },
                        "Create_HTML_table_for_device_information": {
                          "type": "Table",
                          "inputs": {
                            "from": "@body('Parse_JSON_device_information_response')?['resources']",
                            "format": "HTML",
                            "columns": [
                              {
                                "header": "device_id",
                                "value": "@item()?['device_id']"
                              },
                              {
                                "header": "external_ip",
                                "value": "@item()?['external_ip']"
                              },
                              {
                                "header": "mac_address",
                                "value": "@item()?['mac_address']"
                              },
                              {
                                "header": "hostname",
                                "value": "@item()?['hostname']"
                              },
                              {
                                "header": "first_seen",
                                "value": "@item()?['first_seen']"
                              },
                              {
                                "header": "last_seen",
                                "value": "@item()?['last_seen']"
                              },
                              {
                                "header": "local_ip",
                                "value": "@item()?['local_ip']"
                              },
                              {
                                "header": "machine_domain",
                                "value": "@item()?['machine_domain']"
                              },
                              {
                                "header": "os_version",
                                "value": "@item()?['os_version']"
                              }
                            ]
                          },
                          "runAfter": {
                            "Parse_JSON_device_information_response": [
                              "Succeeded"
                            ]
                          },
                          "description": "prepare HTML table format to update in the incident"
                        },
                        "HTTP_-_Get_device_information_": {
                          "type": "Http",
                          "inputs": {
                            "method": "GET",
                            "uri": "@{body('CrowdStrike_Base')?['FalconHost']}/devices/entities/devices/v1?ids=@{body('Parse_JSON_Get_device_id_response')?['resources']?[0]}",
                            "headers": {
                              "Accept": "application/json",
                              "Authorization": "@{body('CrowdStrike_Base')?['AccessToken']}",
                              "Content-Type": "application/json"
                            }
                          },
                          "description": "This gets the device information from crowdstrike"
                        },
                        "Parse_JSON_device_information_response": {
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('HTTP_-_Get_device_information_')",
                            "schema": {
                              "properties": {
                                "errors": {
                                  "type": "array"
                                },
                                "meta": {
                                  "properties": {
                                    "powered_by": {
                                      "type": "string"
                                    },
                                    "query_time": {
                                      "type": "number"
                                    },
                                    "trace_id": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                },
                                "resources": {
                                  "items": {
                                    "properties": {
                                      "agent_load_flags": {
                                        "type": "string"
                                      },
                                      "agent_local_time": {
                                        "type": "string"
                                      },
                                      "agent_version": {
                                        "type": "string"
                                      },
                                      "bios_manufacturer": {
                                        "type": "string"
                                      },
                                      "bios_version": {
                                        "type": "string"
                                      },
                                      "build_number": {
                                        "type": "string"
                                      },
                                      "cid": {
                                        "type": "string"
                                      },
                                      "config_id_base": {
                                        "type": "string"
                                      },
                                      "config_id_build": {
                                        "type": "string"
                                      },
                                      "config_id_platform": {
                                        "type": "string"
                                      },
                                      "cpu_signature": {
                                        "type": "string"
                                      },
                                      "device_id": {
                                        "type": "string"
                                      },
                                      "device_policies": {
                                        "properties": {
                                          "device_control": {
                                            "properties": {
                                              "applied": {
                                                "type": "boolean"
                                              },
                                              "applied_date": {
                                                "type": "string"
                                              },
                                              "assigned_date": {
                                                "type": "string"
                                              },
                                              "policy_id": {
                                                "type": "string"
                                              },
                                              "policy_type": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "firewall": {
                                            "properties": {
                                              "applied": {
                                                "type": "boolean"
                                              },
                                              "applied_date": {
                                                "type": "string"
                                              },
                                              "assigned_date": {
                                                "type": "string"
                                              },
                                              "policy_id": {
                                                "type": "string"
                                              },
                                              "policy_type": {
                                                "type": "string"
                                              },
                                              "rule_set_id": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "global_config": {
                                            "properties": {
                                              "applied": {
                                                "type": "boolean"
                                              },
                                              "applied_date": {
                                                "type": "string"
                                              },
                                              "assigned_date": {
                                                "type": "string"
                                              },
                                              "policy_id": {
                                                "type": "string"
                                              },
                                              "policy_type": {
                                                "type": "string"
                                              },
                                              "settings_hash": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "prevention": {
                                            "properties": {
                                              "applied": {
                                                "type": "boolean"
                                              },
                                              "applied_date": {
                                                "type": "string"
                                              },
                                              "assigned_date": {
                                                "type": "string"
                                              },
                                              "policy_id": {
                                                "type": "string"
                                              },
                                              "policy_type": {
                                                "type": "string"
                                              },
                                              "rule_groups": {
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": "array"
                                              },
                                              "settings_hash": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "remote_response": {
                                            "properties": {
                                              "applied": {
                                                "type": "boolean"
                                              },
                                              "applied_date": {
                                                "type": "string"
                                              },
                                              "assigned_date": {
                                                "type": "string"
                                              },
                                              "policy_id": {
                                                "type": "string"
                                              },
                                              "policy_type": {
                                                "type": "string"
                                              },
                                              "settings_hash": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "sensor_update": {
                                            "properties": {
                                              "applied": {
                                                "type": "boolean"
                                              },
                                              "applied_date": {
                                                "type": "string"
                                              },
                                              "assigned_date": {
                                                "type": "string"
                                              },
                                              "policy_id": {
                                                "type": "string"
                                              },
                                              "policy_type": {
                                                "type": "string"
                                              },
                                              "settings_hash": {
                                                "type": "string"
                                              },
                                              "uninstall_protection": {
                                                "type": "string"
                                              }
                                            },
                                            "type": "object"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "external_ip": {
                                        "type": "string"
                                      },
                                      "first_seen": {
                                        "type": "string"
                                      },
                                      "group_hash": {
                                        "type": "string"
                                      },
                                      "groups": {
                                        "items": {
                                          "type": "string"
                                        },
                                        "type": "array"
                                      },
                                      "hostname": {
                                        "type": "string"
                                      },
                                      "last_seen": {
                                        "type": "string"
                                      },
                                      "local_ip": {
                                        "type": "string"
                                      },
                                      "mac_address": {
                                        "type": "string"
                                      },
                                      "machine_domain": {
                                        "type": "string"
                                      },
                                      "major_version": {
                                        "type": "string"
                                      },
                                      "meta": {
                                        "properties": {
                                          "version": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "minor_version": {
                                        "type": "string"
                                      },
                                      "modified_timestamp": {
                                        "type": "string"
                                      },
                                      "os_version": {
                                        "type": "string"
                                      },
                                      "ou": {
                                        "items": {
                                          "type": "string"
                                        },
                                        "type": "array"
                                      },
                                      "platform_id": {
                                        "type": "string"
                                      },
                                      "platform_name": {
                                        "type": "string"
                                      },
                                      "pointer_size": {
                                        "type": "string"
                                      },
                                      "policies": {
                                        "items": {
                                          "properties": {
                                            "applied": {
                                              "type": "boolean"
                                            },
                                            "applied_date": {
                                              "type": "string"
                                            },
                                            "assigned_date": {
                                              "type": "string"
                                            },
                                            "policy_id": {
                                              "type": "string"
                                            },
                                            "policy_type": {
                                              "type": "string"
                                            },
                                            "rule_groups": {
                                              "items": {
                                                "type": "string"
                                              },
                                              "type": "array"
                                            },
                                            "settings_hash": {
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "policy_type",
                                            "policy_id",
                                            "applied",
                                            "settings_hash",
                                            "assigned_date",
                                            "applied_date",
                                            "rule_groups"
                                          ],
                                          "type": "object"
                                        },
                                        "type": "array"
                                      },
                                      "product_type": {
                                        "type": "string"
                                      },
                                      "product_type_desc": {
                                        "type": "string"
                                      },
                                      "provision_status": {
                                        "type": "string"
                                      },
                                      "reduced_functionality_mode": {
                                        "type": "string"
                                      },
                                      "serial_number": {
                                        "type": "string"
                                      },
                                      "service_pack_major": {
                                        "type": "string"
                                      },
                                      "service_pack_minor": {
                                        "type": "string"
                                      },
                                      "site_name": {
                                        "type": "string"
                                      },
                                      "slow_changing_modified_timestamp": {
                                        "type": "string"
                                      },
                                      "status": {
                                        "type": "string"
                                      },
                                      "system_manufacturer": {
                                        "type": "string"
                                      },
                                      "system_product_name": {
                                        "type": "string"
                                      },
                                      "tags": {
                                        "type": "array"
                                      }
                                    },
                                    "required": [
                                      "device_id",
                                      "cid",
                                      "agent_load_flags",
                                      "agent_local_time",
                                      "agent_version",
                                      "bios_manufacturer",
                                      "bios_version",
                                      "build_number",
                                      "config_id_base",
                                      "config_id_build",
                                      "config_id_platform",
                                      "cpu_signature",
                                      "external_ip",
                                      "mac_address",
                                      "hostname",
                                      "first_seen",
                                      "last_seen",
                                      "local_ip",
                                      "machine_domain",
                                      "major_version",
                                      "minor_version",
                                      "platform_id",
                                      "platform_name",
                                      "policies",
                                      "reduced_functionality_mode",
                                      "device_policies",
                                      "groups",
                                      "group_hash",
                                      "product_type",
                                      "product_type_desc",
                                      "provision_status",
                                      "serial_number",
                                      "service_pack_major",
                                      "service_pack_minor",
                                      "pointer_size",
                                      "status",
                                      "system_manufacturer",
                                      "system_product_name",
                                      "tags",
                                      "modified_timestamp",
                                      "slow_changing_modified_timestamp",
                                      "meta"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "runAfter": {
                            "HTTP_-_Get_device_information_": [
                              "Succeeded"
                            ]
                          },
                          "description": "prepare Json message for device information"
                        },
                        "Switch_to_check_the_device_status": {
                          "type": "Switch",
                          "expression": "@body('Parse_JSON_device_information_response')?['resources']?[0]?['status']",
                          "cases": {
                            "Case_-_contained": {
                              "case": "contained",
                              "actions": {
                                "Append_to_string_variable_comment_if_host_is_contained": {
                                  "type": "AppendToStringVariable",
                                  "inputs": {
                                    "name": "Comment",
                                    "value": "Host Status : Contained\nActions taken on devices : No action taken from playbook"
                                  },
                                  "description": "This appends comments if the host status is already contained"
                                },
                                "Set_variable_success_from_crowdstirke_in_case_of_host_is_already_contained": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "Successfromcrowdstike",
                                    "value": "Success"
                                  },
                                  "runAfter": {
                                    "Append_to_string_variable_comment_if_host_is_contained": [
                                      "Succeeded"
                                    ]
                                  },
                                  "description": "This sets the variable success from crowdstrike to update in the incident"
                                }
                              }
                            },
                            "Case_-_containment_pending": {
                              "case": "containment_pending",
                              "actions": {
                                "Append_to_string_variable_comment_if_host_status_is_containment_pending": {
                                  "type": "AppendToStringVariable",
                                  "inputs": {
                                    "name": "Comment",
                                    "value": "Host Status : containment_pending\nActions taken on devices : No action taken from playbook"
                                  },
                                  "description": "This appends comments if the host status is containment pending"
                                },
                                "Set_variable_success_from_crowdstirke_in_case_of_containment_pending": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "Successfromcrowdstike",
                                    "value": "Success"
                                  },
                                  "runAfter": {
                                    "Append_to_string_variable_comment_if_host_status_is_containment_pending": [
                                      "Succeeded"
                                    ]
                                  },
                                  "description": "This sets the variable success from crowdstrike to update in the incident"
                                }
                              }
                            },
                            "Case_-_lift_containment_pending": {
                              "case": "lift_containment_pending",
                              "actions": {
                                "Append_to_string_variable_comment_if_host_status_is_lift_containment_pending": {
                                  "type": "AppendToStringVariable",
                                  "inputs": {
                                    "name": "Comment",
                                    "value": "Host Status : Lift_containment_pending\nActions taken on devices : No action taken from playbook"
                                  },
                                  "description": "Append to variable comment if host status is lift containment pending"
                                },
                                "Set_variable_success_from_crowdstirke_in_case_of_lift_containment_pending": {
                                  "type": "SetVariable",
                                  "inputs": {
                                    "name": "Successfromcrowdstike",
                                    "value": "Success"
                                  },
                                  "runAfter": {
                                    "Append_to_string_variable_comment_if_host_status_is_lift_containment_pending": [
                                      "Succeeded"
                                    ]
                                  },
                                  "description": "This sets the variable success from crowdstrike to update in the incident"
                                }
                              }
                            },
                            "Case_-_not_contained": {
                              "case": "normal",
                              "actions": {
                                "Condition_to_check_if_contain_success_or_not": {
                                  "type": "If",
                                  "expression": {
                                    "and": [
                                      {
                                        "equals": [
                                          "@outputs('HTTP_-_Contain_a_host')['statusCode']",
                                          202
                                        ]
                                      }
                                    ]
                                  },
                                  "actions": {
                                    "Append_to_string_variable_comment_if_host_is_contained_by_playbook": {
                                      "type": "AppendToStringVariable",
                                      "inputs": {
                                        "name": "Comment",
                                        "value": "Host Status : Contained\nActions taken on devices : The playbook sucessfully contained the host"
                                      },
                                      "description": "This appends the variable comment if host is contained by playbook"
                                    },
                                    "Set_variable_success_from_crowdstirke_in_case_of_success": {
                                      "type": "SetVariable",
                                      "inputs": {
                                        "name": "Successfromcrowdstike",
                                        "value": "Success"
                                      },
                                      "runAfter": {
                                        "Append_to_string_variable_comment_if_host_is_contained_by_playbook": [
                                          "Succeeded"
                                        ]
                                      },
                                      "description": "This sets variable success from crowdstirke in case of success"
                                    }
                                  },
                                  "runAfter": {
                                    "HTTP_-_Contain_a_host": [
                                      "Succeeded"
                                    ]
                                  },
                                  "else": {
                                    "actions": {
                                      "Append_to_string_variable_comment_if_host_is_not_contained_by_playbook": {
                                        "type": "AppendToStringVariable",
                                        "inputs": {
                                          "name": "Comment",
                                          "value": "Host Status : Not contained/Normal\nActions taken on devices : The playbook failed to contain the host"
                                        },
                                        "description": "This sets the variable comment if host is not contained by playbook"
                                      },
                                      "Set_variable_success_from_crowdstrike_in_case_of_failure": {
                                        "type": "SetVariable",
                                        "inputs": {
                                          "name": "Successfromcrowdstike",
                                          "value": "Failure"
                                        },
                                        "runAfter": {
                                          "Append_to_string_variable_comment_if_host_is_not_contained_by_playbook": [
                                            "Succeeded"
                                          ]
                                        },
                                        "description": "This sets variable success from crowdstirke in case of Failure"
                                      }
                                    }
                                  },
                                  "description": "condition to check if contain a host is success or failure"
                                },
                                "HTTP_-_Contain_a_host": {
                                  "type": "Http",
                                  "inputs": {
                                    "method": "POST",
                                    "uri": "@{body('CrowdStrike_Base')?['FalconHost']}/devices/entities/devices-actions/v2?action_name=contain",
                                    "headers": {
                                      "Accept": "application/json",
                                      "Authorization": "@{body('CrowdStrike_Base')?['AccessToken']}",
                                      "Content-Type": "application/json"
                                    },
                                    "body": {
                                      "action_parameters": [
                                        {
                                          "name": "contain"
                                        }
                                      ],
                                      "ids": [
                                        "@{body('Parse_JSON_Get_device_id_response')?['resources']?[0]}"
                                      ]
                                    }
                                  },
                                  "description": "This will contain a host in crowdstrike"
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "Append_to_string_variable_comment_for_device_information": [
                              "Succeeded"
                            ]
                          },
                          "description": "This checks on the device status"
                        }
                      },
                      "runAfter": {
                        "Parse_JSON_Get_device_id_response": [
                          "Succeeded"
                        ]
                      },
                      "else": {
                        "actions": {
                          "Append_to_string_variable_comment_if_no_device_exist": {
                            "type": "AppendToStringVariable",
                            "inputs": {
                              "name": "Comment",
                              "value": "There is no device present in Crowdstrike"
                            },
                            "description": "This appends test to comment if no device available in crowdstrike"
                          },
                          "Set_variable_success_from_crowdstrike": {
                            "type": "SetVariable",
                            "inputs": {
                              "name": "Successfromcrowdstike",
                              "value": "Success"
                            },
                            "runAfter": {
                              "Append_to_string_variable_comment_if_no_device_exist": [
                                "Succeeded"
                              ]
                            },
                            "description": "This sets the variable success in case of no device info found"
                          }
                        }
                      },
                      "description": "This checks if device is present in crowdstrike or not"
                    },
                    "CrowdStrike_Base": {
                      "type": "Workflow",
                      "inputs": {
                        "host": {
                          "triggerName": "manual",
                          "workflow": {
                            "id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name ,'/providers/Microsoft.Logic/workflows/', parameters('CrowdStrike_Base_Playbook_Name'))]"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_variable_success_from_crowdstrike": [
                          "Succeeded"
                        ]
                      },
                      "description": "Call the base logic App to get access token and Falcon Host URL",
                      "runtimeConfiguration": {
                        "secureData": {
                          "properties": [
                            "inputs",
                            "outputs"
                          ]
                        }
                      }
                    },
                    "Entities_-_Get_Hosts": {
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "method": "post",
                        "body": "@triggerBody()?['object']?['properties']?['relatedEntities']",
                        "path": "/entities/host"
                      }
                    },
                    "HTTP_-_Get_device_id": {
                      "type": "Http",
                      "inputs": {
                        "method": "GET",
                        "uri": "@{body('CrowdStrike_Base')?['FalconHost']}/devices/queries/devices/v1?filter=hostname:'@{body('Entities_-_Get_Hosts')?['Hosts']?[0]?['HostName']}'",
                        "headers": {
                          "Accept": "application/json",
                          "Authorization": "@{body('CrowdStrike_Base')?['AccessToken']}",
                          "Content-Type": "application/json"
                        }
                      },
                      "runAfter": {
                        "CrowdStrike_Base": [
                          "Succeeded"
                        ]
                      },
                      "description": "This gets the device id from crowdstrike by filtering on hostname"
                    },
                    "Initialize_variable_comment": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Comment",
                            "type": "string"
                          }
                        ]
                      },
                      "runAfter": {
                        "Entities_-_Get_Hosts": [
                          "Succeeded"
                        ]
                      },
                      "description": "This is used to store comments to update in the incident"
                    },
                    "Initialize_variable_success_from_crowdstrike": {
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Successfromcrowdstike",
                            "type": "string"
                          }
                        ]
                      },
                      "runAfter": {
                        "Initialize_variable_comment": [
                          "Succeeded"
                        ]
                      },
                      "description": "This is used to hold the success or failure information from crowdstrike api actions"
                    },
                    "Parse_JSON_Get_device_id_response": {
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('HTTP_-_Get_device_id')",
                        "schema": {
                          "meta": {
                            "pagination": {
                              "limit": 100,
                              "offset": 1,
                              "total": 1
                            },
                            "powered_by": "device-api",
                            "query_time": 0.005041315,
                            "trace_id": "aa7b84f5-3e81-4980-ad9f-c14b6d8ca577"
                          },
                          "resources": [
                            "cdc977a72a8c49528bb82f89dde2c2e9"
                          ]
                        }
                      },
                      "runAfter": {
                        "HTTP_-_Get_device_id": [
                          "Succeeded"
                        ]
                      },
                      "description": "prepare json message for the device id response"
                    }
                  },
                  "parameters": {
                    "$connections": {
                      "type": "Object"
                    }
                  },
                  "triggers": {
                    "When_Azure_Sentinel_incident_creation_rule_was_triggered_(Private_Preview_only)": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                          }
                        },
                        "body": {
                          "callback_url": "@{listCallbackUrl()}"
                        },
                        "path": "/incident-creation"
                      }
                    }
                  },
                  "contentVersion": "1.0.0.0"
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "azuresentinel": {
                        "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]",
                        "connectionName": "[variables('AzureSentinelConnectionName')]",
                        "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', variables('workspace-location-inline'), '/managedApis/azuresentinel')]",
                        "connectionProperties": {
                          "authentication": {
                            "type": "ManagedServiceIdentity"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2017-07-01",
              "name": "[parameters('PlaybookName')]",
              "location": "[variables('workspace-location-inline')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('AzureSentinelConnectionName'))]"
              ],
              "tags": {
                "hidden-SentinelTemplateName": "IsolateEndpoint-Crowdstrike",
                "hidden-SentinelTemplateVersion": "1.0",
                "hidden-SentinelWorkspaceId": "[resourceId('microsoft.OperationalInsights/Workspaces', parameters('workspace'))]"
              }
            },
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[variables('AzureSentinelConnectionName')]",
              "location": "[variables('workspace-location-inline')]",
              "kind": "V1",
              "properties": {
                "displayName": "[variables('AzureSentinelConnectionName')]",
                "parameterValueType": "Alternative",
                "api": {
                  "id": "[variables('_connection-2')]"
                }
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Playbook-', last(split(resourceId('Microsoft.Logic/workflows', 'CrowdStrike_ContainHost'),'/'))))]",
              "properties": {
                "parentId": "[resourceId('Microsoft.Logic/workflows', 'CrowdStrike_ContainHost')]",
                "contentId": "CrowdStrike_ContainHost",
                "kind": "Playbook",
                "version": "1.0",
                "source": {
                  "kind": "Solution",
                  "name": "CrowdStrike Falcon Endpoint Protection",
                  "sourceId": "azuresentinel.azure-sentinel-solution-crowdstrikefalconep"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "support@microsoft.com"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "PackageVersion": "2.0.7"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentPackages",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', 'azuresentinel.azure-sentinel-solution-crowdstrikefalconep')]",
      "location": "[parameters('workspace-location')]",
      "apiVersion": "2022-08-01",
      "properties": {
        "version": "2.0.7",
        "kind": "Solution",
        "contentSchemaVersion": "2.0.0",
        "source": {
          "kind": "Solution",
          "name": "CrowdStrike Falcon Endpoint Protection",
          "sourceId": "azuresentinel.azure-sentinel-solution-crowdstrikefalconep"
        },
        "author": {
          "name": "Microsoft",
          "email": "support@microsoft.com"
        },
        "support": {
          "name": "Microsoft Corporation",
          "email": "support@microsoft.com",
          "tier": "Microsoft",
          "link": "https://support.microsoft.com"
        },
        "dependencies": {
          "operator": "AND",
          "criteria": [
            {
              "kind": "DataConnector",
              "contentId": "CrowdstrikeReplicator",
              "version": "1.0.0"
            },
            {
              "kind": "DataConnector",
              "contentId": "CrowdStrikeFalconEndpointProtection",
              "version": "1.0.0"
            },
            {
              "kind": "Parser",
              "contentId": "CrowdstrikeFalconEventStream-Parser",
              "version": "1.0.0"
            },
            {
              "kind": "Parser",
              "contentId": "CrowdstrikeReplicator-Parser",
              "version": "1.0.0"
            },
            {
              "kind": "Workbook",
              "contentId": "CrowdStrikeFalconEndpointProtectionWorkbook",
              "version": "1.0.0"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "4465ebde-b381-45f7-ad08-7d818070a11c",
              "version": "1.0.0"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "f7d298b2-726c-42a5-bbac-0d7f9950f527",
              "version": "1.0.0"
            },
            {
              "kind": "Playbook",
              "contentId": "CrowdStrike_Base",
              "version": "1.0"
            },
            {
              "kind": "Playbook",
              "contentId": "CrowdStrike_Enrichment_GetDeviceInformation",
              "version": "1.0"
            },
            {
              "kind": "Playbook",
              "contentId": "CrowdStrike_ContainHost",
              "version": "1.0"
            }
          ]
        },
        "firstPublishDate": "2022-06-01",
        "providers": [
          "Crowdstrike"
        ],
        "categories": {
          "domains": [
            "Security - Threat Protection",
            "Security - Automation (SOAR)"
          ]
        },
        "id": "azuresentinel.azure-sentinel-solution-crowdstrikefalconep",
        "packageKind": "Solution",
        "displayName": "CrowdStrike Falcon Endpoint Protection"
      }
    }
  ]
}