{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Microsoft Sentinel is setup"
      }
    },
    "workspace-location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/contentTemplates",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat(concat(parameters('workspace'),'-pr-',uniquestring('CrowdstrikeReplicator-Parser')),'1.0.0'))]",
      "location": "[parameters('workspace-location')]",
      "apiVersion": "2022-08-01",
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspace')), 'Microsoft.SecurityInsights/contentPackages', 'azuresentinel.azure-sentinel-solution-crowdstrikefalconep')]"
      ],
      "properties": {
        "contentId": "CrowdstrikeReplicator-Parser",
        "displayName": "CrowdstrikeReplicator",
        "contentKind": "Parser",
        "mainTemplate": {
          "resources": [
            {
              "name": "[concat(parameters('workspace'),'/','CrowdstrikeReplicator')]",
              "apiVersion": "2020-08-01",
              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
              "location": "[parameters('workspace-location')]",
              "properties": {
                "eTag": "*",
                "displayName": "CrowdstrikeReplicator",
                "category": "Samples",
                "functionAlias": "CrowdstrikeReplicator",
                "query": "\nlet CrowdstrikeReplicatorLogs_view  = view () { \r\n    CrowdstrikeReplicatorLogs_CL\r\n    | extend customFields = parse_json(column_ifexists('custom_fields_message_s', ''))\r\n    | extend \r\n        EventVendor=\"Crowdstrike\",\r\n        EventProduct=\"Replicator\",\r\n        FileMode=column_ifexists('FileMode_s', customFields.FileMode),\r\n        DeviceSerialNumber=column_ifexists('DeviceSerialNumber_s', customFields.DeviceSerialNumber),\r\n        IcmpCode=column_ifexists('IcmpCode_s', customFields.IcmpCode),\r\n        IcmpType=column_ifexists('IcmpType_s', customFields.IcmpType),\r\n        LastUpdateInstalledTime=column_ifexists('LastUpdateInstalledTime_s', customFields.LastUpdateInstalledTime),\r\n        RebootRequired=column_ifexists('RebootRequired_s', customFields.RebootRequired),\r\n        PendingUpdateIds=column_ifexists('PendingUpdateIds_s', customFields.PendingUpdateIds),\r\n        InstalledUpdateIds=column_ifexists('InstalledUpdateIds_s', customFields.InstalledUpdateIds),\r\n        InstalledUpdateExtendedStatus=column_ifexists('InstalledUpdateExtendedStatus_s', customFields.InstalledUpdateExtendedStatus),\r\n        SupersededUpdateIds=column_ifexists('SupersededUpdateIds_s', customFields.SupersededUpdateIds),\r\n        ConfigurationDescriptorValue=column_ifexists('ConfigurationDescriptorValue_s', customFields.ConfigurationDescriptorValue),\r\n        ConfigurationDescriptorAttributes=column_ifexists('ConfigurationDescriptorAttributes_s', customFields.ConfigurationDescriptorAttributes),\r\n        DeviceDescriptorUniqueIdentifier=column_ifexists('DeviceDescriptorUniqueIdentifier_s', customFields.DeviceDescriptorUniqueIdentifier),\r\n        ConfigurationDescriptorName=column_ifexists('ConfigurationDescriptorName_s', customFields.ConfigurationDescriptorName),\r\n        ConfigurationDescriptorNumInterfaces=column_ifexists('ConfigurationDescriptorNumInterfaces_s', customFields.ConfigurationDescriptorNumInterfaces),\r\n        ConfigurationDescriptorMaxPowerDraw=column_ifexists('ConfigurationDescriptorMaxPowerDraw_s', customFields.ConfigurationDescriptorMaxPowerDraw),\r\n        ScreenshotsTakenCount=column_ifexists('ScreenshotsTakenCount_s', customFields.ScreenshotsTakenCount),\r\n        ExitCode=column_ifexists('ExitCode_s', customFields.ExitCode),\r\n        ParentProcessId=column_ifexists('ParentProcessId_s', customFields.ParentProcessId),\r\n        DstUserIdentity=column_ifexists('UserSid_s', customFields.DstUserIdentity),\r\n        NetworkListenCount=column_ifexists('NetworkListenCount_s', customFields.NetworkListenCount),\r\n        SuspiciousRawDiskReadCount=column_ifexists('SuspiciousRawDiskReadCount_s', customFields.SuspiciousRawDiskReadCount),\r\n        NetworkBindCount=column_ifexists('NetworkBindCount_s', customFields.NetworkBindCount),\r\n        NetworkRecvAcceptCount=column_ifexists('NetworkRecvAcceptCount_s', customFields.NetworkRecvAcceptCount),\r\n        ContextData=column_ifexists('ContextData_s', customFields.ContextData),\r\n        Id=column_ifexists('id_g', customFields.Id),\r\n        NewExecutableWrittenCount=column_ifexists('NewExecutableWrittenCount_s', customFields.NewExecutableWrittenCount),\r\n        ExeAndServiceCount=column_ifexists('ExeAndServiceCount_s', customFields.ExeAndServiceCount),\r\n        NetworkCloseCount=column_ifexists('NetworkCloseCount_s', customFields.NetworkCloseCount),\r\n        SuspectStackCount=column_ifexists('SuspectStackCount_s', customFields.SuspectStackCount),\r\n        CLICreationCount=column_ifexists('CLICreationCount_s', customFields.CLICreationCount),\r\n        UnsignedModuleLoadCount=column_ifexists('UnsignedModuleLoadCount_s', customFields.UnsignedModuleLoadCount),\r\n        UserTime=column_ifexists('UserTime_s', customFields.UserTime),\r\n        EventMessage=column_ifexists('event_simpleName_s', customFields.EventMessage),\r\n        RawProcessId=column_ifexists('RawProcessId_s', customFields.RawProcessId),\r\n        ContextTimeStamp=column_ifexists('ContextTimeStamp_s', customFields.ContextTimeStamp),\r\n        AllocateVirtualMemoryCount=column_ifexists('AllocateVirtualMemoryCount_s', customFields.AllocateVirtualMemoryCount),\r\n        ContextProcessId=column_ifexists('ContextProcessId_s', customFields.ContextProcessId),\r\n        ServiceEventCount=column_ifexists('ServiceEventCount_s', customFields.ServiceEventCount),\r\n        SnapshotFileOpenCount=column_ifexists('SnapshotFileOpenCount_s', customFields.SnapshotFileOpenCount),\r\n        RemovableDiskFileWrittenCount=column_ifexists('RemovableDiskFileWrittenCount_s', customFields.RemovableDiskFileWrittenCount),\r\n        InjectedDllCount=column_ifexists('InjectedDllCount_s', customFields.InjectedDllCount),\r\n        ModuleLoadCount=column_ifexists('ModuleLoadCount_s', customFields.ModuleLoadCount),\r\n        UserMemoryProtectExecutableCount=column_ifexists('UserMemoryProtectExecutableCount_s', customFields.UserMemoryProtectExecutableCount),\r\n        NetworkCapableAsepWriteCount=column_ifexists('NetworkCapableAsepWriteCount_s', customFields.NetworkCapableAsepWriteCount),\r\n        TargetProcessId=column_ifexists('TargetProcessId_s', customFields.TargetProcessId),\r\n        DnsRequestCount=column_ifexists('DnsRequestCount_s', customFields.DnsRequestCount),\r\n        ArchiveFileWrittenCount=column_ifexists('ArchiveFileWrittenCount_s', customFields.ArchiveFileWrittenCount),\r\n        Entitlements=column_ifexists('Entitlements_s', customFields.Entitlements),\r\n        Name=column_ifexists('name_s', customFields.Name),\r\n        ProcessStartTime=column_ifexists('ProcessStartTime_s', customFields.ProcessStartTime),\r\n        SetThreadContextCount=column_ifexists('SetThreadContextCount_s', customFields.SetThreadContextCount),\r\n        SuspiciousCredentialModuleLoadCount=column_ifexists('SuspiciousCredentialModuleLoadCount_s', customFields.SuspiciousCredentialModuleLoadCount),\r\n        DvcInterfaceGuid=column_ifexists('aid_g', customFields.DvcInterfaceGuid),\r\n        Cid=column_ifexists('cid_g', customFields.Cid),\r\n        FileDeletedCount=column_ifexists('FileDeletedCount_s', customFields.FileDeletedCount),\r\n        UserMemoryAllocateExecutableCount=column_ifexists('UserMemoryAllocateExecutableCount_s', customFields.UserMemoryAllocateExecutableCount),\r\n        DirectoryCreatedCount=column_ifexists('DirectoryCreatedCount_s', customFields.DirectoryCreatedCount),\r\n        NetworkConnectCountUdp=column_ifexists('NetworkConnectCountUdp_s', customFields.NetworkConnectCountUdp),\r\n        QueueApcCount=column_ifexists('QueueApcCount_s', customFields.QueueApcCount),\r\n        ContextThreadId=column_ifexists('ContextThreadId_s', customFields.ContextThreadId),\r\n        Aip=column_ifexists('aip_s', customFields.Aip),\r\n        SuspiciousFontLoadCount=column_ifexists('SuspiciousFontLoadCount_s', customFields.SuspiciousFontLoadCount),\r\n        ConHostId=column_ifexists('ConHostId_s', customFields.ConHostId),\r\n        NetworkConnectCount=column_ifexists('NetworkConnectCount_s', customFields.NetworkConnectCount),\r\n        BinaryExecutableWrittenCount=column_ifexists('BinaryExecutableWrittenCount_s', customFields.BinaryExecutableWrittenCount),\r\n        CycleTime=column_ifexists('CycleTime_s', customFields.CycleTime),\r\n        DvcOs=column_ifexists('event_platform_s', customFields.DvcOs),\r\n        ConHostProcessId=column_ifexists('ConHostProcessId_s', customFields.ConHostProcessId),\r\n        PrivilegedProcessHandleCount=column_ifexists('PrivilegedProcessHandleCount_s', customFields.PrivilegedProcessHandleCount),\r\n        MaxThreadCount=column_ifexists('MaxThreadCount_s', customFields.MaxThreadCount),\r\n        ImageSubsystem=column_ifexists('ImageSubsystem_s', customFields.ImageSubsystem),\r\n        GenericFileWrittenCount=column_ifexists('GenericFileWrittenCount_s', customFields.GenericFileWrittenCount),\r\n        EffectiveTransmissionClass=column_ifexists('EffectiveTransmissionClass_s', customFields.EffectiveTransmissionClass),\r\n        ScriptEngineInvocationCount=column_ifexists('ScriptEngineInvocationCount_s', customFields.ScriptEngineInvocationCount),\r\n        RunDllInvocationCount=column_ifexists('RunDllInvocationCount_s', customFields.RunDllInvocationCount),\r\n        timestamp=column_ifexists('timestamp_s', customFields.timestamp),\r\n        CreateProcessCount=column_ifexists('CreateProcessCount_s', customFields.CreateProcessCount),\r\n        KernelTime=column_ifexists('KernelTime_s', customFields.KernelTime),\r\n        DirectoryEnumeratedCount=column_ifexists('DirectoryEnumeratedCount_s', customFields.DirectoryEnumeratedCount),\r\n        ConfigStateHash=column_ifexists('ConfigStateHash_s', customFields.ConfigStateHash),\r\n        AsepWrittenCount=column_ifexists('AsepWrittenCount_s', customFields.AsepWrittenCount),\r\n        SuspiciousDnsRequestCount=column_ifexists('SuspiciousDnsRequestCount_s', customFields.SuspiciousDnsRequestCount),\r\n        DocumentFileWrittenCount=column_ifexists('DocumentFileWrittenCount_s', customFields.DocumentFileWrittenCount),\r\n        ProtectVirtualMemoryCount=column_ifexists('ProtectVirtualMemoryCount_s', customFields.ProtectVirtualMemoryCount),\r\n        ProcessHashSha256=column_ifexists('SHA256HashData_s', customFields.ProcessHashSha256),\r\n        UserMemoryProtectExecutableRemoteCount=column_ifexists('UserMemoryProtectExecutableRemoteCount_s', customFields.UserMemoryProtectExecutableRemoteCount),\r\n        ConfigBuild=column_ifexists('ConfigBuild_s', customFields.ConfigBuild),\r\n        UserMemoryAllocateExecutableRemoteCount=column_ifexists('UserMemoryAllocateExecutableRemoteCount_s', customFields.UserMemoryAllocateExecutableRemoteCount),\r\n        ExecutableDeletedCount=column_ifexists('ExecutableDeletedCount_s', customFields.ExecutableDeletedCount),\r\n        RegKeySecurityDecreasedCount=column_ifexists('RegKeySecurityDecreasedCount_s', customFields.RegKeySecurityDecreasedCount),\r\n        InjectedThreadCount=column_ifexists('InjectedThreadCount_s', customFields.InjectedThreadCount),\r\n        NetworkModuleLoadCount=column_ifexists('NetworkModuleLoadCount_s', customFields.NetworkModuleLoadCount),\r\n        WindowTitle=column_ifexists('WindowTitle_s', customFields.WindowTitle),\r\n        ProcessCreateFlags=column_ifexists('ProcessCreateFlags_s', customFields.ProcessCreateFlags),\r\n        IntegrityLevel=column_ifexists('IntegrityLevel_s', customFields.IntegrityLevel),\r\n        SourceProcessId=column_ifexists('SourceProcessId_s', customFields.SourceProcessId),\r\n        ProcessHashSha1=column_ifexists('SHA1HashData_s', customFields.ProcessHashSha1),\r\n        TokenType=column_ifexists('TokenType_s', customFields.TokenType),\r\n        ProcessEndTime=column_ifexists('ProcessEndTime_s', customFields.ProcessEndTime),\r\n        AuthenticodeHashData=column_ifexists('AuthenticodeHashData_s', customFields.AuthenticodeHashData),\r\n        ParentBaseFileName=column_ifexists('ParentBaseFileName_s', customFields.ParentBaseFileName),\r\n        SessionId=column_ifexists('SessionId_s', customFields.SessionId),\r\n        Tags=column_ifexists('Tags_s', customFields.Tags),\r\n        ProcessHashMd5=column_ifexists('MD5HashData_g', customFields.ProcessHashMd5),\r\n        ProcessSxsFlags=column_ifexists('ProcessSxsFlags_s', customFields.ProcessSxsFlags),\r\n        AuthenticationId=column_ifexists('AuthenticationId_s', customFields.AuthenticationId),\r\n        WindowFlags=column_ifexists('WindowFlags_s', customFields.WindowFlags),\r\n        ProcessCommandLine=column_ifexists('CommandLine_s', customFields.ProcessCommandLine),\r\n        ParentAuthenticationId=column_ifexists('ParentAuthenticationId_s', customFields.ParentAuthenticationId),\r\n        FileName=column_ifexists('ImageFileName_s', customFields.FileName),\r\n        SourceThreadId=column_ifexists('SourceThreadId_s', customFields.SourceThreadId),\r\n        ProcessParameterFlags=column_ifexists('ProcessParameterFlags_s', customFields.ProcessParameterFlags),\r\n        SignInfoFlags=column_ifexists('SignInfoFlags_s', customFields.SignInfoFlags),\r\n        ChannelVersion=column_ifexists('ChannelVersion_s', customFields.ChannelVersion),\r\n        ChannelVersionRequired=column_ifexists('ChannelVersionRequired_s', customFields.ChannelVersionRequired),\r\n        ChannelId=column_ifexists('ChannelId_s', customFields.ChannelId),\r\n        DnsResponseType=column_ifexists('DnsResponseType_s', customFields.DnsResponseType),\r\n        IP4Records=column_ifexists('IP4Records_s', customFields.IP4Records),\r\n        CNAMERecords=column_ifexists('CNAMERecords_s', customFields.CNAMERecords),\r\n        QueryStatus=column_ifexists('QueryStatus_s', customFields.QueryStatus),\r\n        InterfaceIndex=column_ifexists('InterfaceIndex_s', customFields.InterfaceIndex),\r\n        DualRequest=column_ifexists('DualRequest_s', customFields.DualRequest),\r\n        FirstIP4Record=column_ifexists('FirstIP4Record_s', customFields.FirstIP4Record),\r\n        UrlDomain=column_ifexists('DomainName_s', customFields.UrlDomain),\r\n        RespondingDnsServer=column_ifexists('RespondingDnsServer_s', customFields.RespondingDnsServer),\r\n        RequestType=column_ifexists('RequestType_s', customFields.RequestType),\r\n        FirewallRuleId=column_ifexists('FirewallRuleId_s', customFields.FirewallRuleId),\r\n        Options=column_ifexists('Options_s', customFields.Options),\r\n        MinorFunction=column_ifexists('MinorFunction_s', customFields.MinorFunction),\r\n        FileIdentifier=column_ifexists('FileIdentifier_s', customFields.FileIdentifier),\r\n        Information=column_ifexists('Information_s', customFields.Information),\r\n        ShareAccess=column_ifexists('ShareAccess_s', customFields.ShareAccess),\r\n        FileObject=column_ifexists('FileObject_s', customFields.FileObject),\r\n        FilePermission=column_ifexists('FileAttributes_s', customFields.FilePermission),\r\n        Status=column_ifexists('Status_s', customFields.Status),\r\n        IrpFlags=column_ifexists('IrpFlags_s', customFields.IrpFlags),\r\n        MajorFunction=column_ifexists('MajorFunction_s', customFields.MajorFunction),\r\n        DesiredAccess=column_ifexists('DesiredAccess_s', customFields.DesiredAccess),\r\n        OperationFlags=column_ifexists('OperationFlags_s', customFields.OperationFlags),\r\n        TargetFileName=column_ifexists('TargetFileName_s', customFields.TargetFileName),\r\n        CallStackModuleNamesVersion=column_ifexists('CallStackModuleNamesVersion_s', customFields.CallStackModuleNamesVersion),\r\n        CsaProcessDataCollectionInstanceId=column_ifexists('CsaProcessDataCollectionInstanceId_s', customFields.CsaProcessDataCollectionInstanceId),\r\n        CallStackModuleNames=column_ifexists('CallStackModuleNames_s', customFields.CallStackModuleNames),\r\n        CreateProcessType=column_ifexists('CreateProcessType_s', customFields.CreateProcessType),\r\n        EtwRawProcessId=column_ifexists('EtwRawProcessId_s', customFields.EtwRawProcessId),\r\n        EventMax=column_ifexists('EventMax_s', customFields.EventMax),\r\n        EtwRawThreadId=column_ifexists('EtwRawThreadId_s', customFields.EtwRawThreadId),\r\n        Flags=column_ifexists('Flags_s', customFields.Flags),\r\n        EventMin=column_ifexists('EventMin_s', customFields.EventMin),\r\n        RawThreadId=column_ifexists('RawThreadId_s', customFields.RawThreadId),\r\n        SrcIpAddr=column_ifexists('LocalAddressIP4_s', customFields.SrcIpAddr),\r\n        ConnectionFlags=column_ifexists('ConnectionFlags_s', customFields.ConnectionFlags),\r\n        DstIpPort=column_ifexists('RemotePort_s', customFields.DstIpPort),\r\n        SrcIpPort=column_ifexists('LocalPort_s', customFields.SrcIpPort),\r\n        Protocol=column_ifexists('Protocol_s', customFields.Protocol),\r\n        DstIpAddr=column_ifexists('RemoteAddressIP4_s', customFields.DstIpAddr),\r\n        ConnectionDirection=column_ifexists('ConnectionDirection_s', customFields.ConnectionDirection),\r\n        InContext=column_ifexists('InContext_s', customFields.InContext),\r\n        NetworkContainmentState=column_ifexists('NetworkContainmentState_s', customFields.NetworkContainmentState),\r\n        ConfigIDBase=column_ifexists('ConfigIDBase_s', customFields.ConfigIDBase),\r\n        SensorStateBitMap=column_ifexists('SensorStateBitMap_s', customFields.SensorStateBitMap),\r\n        ConfigurationVersion=column_ifexists('ConfigurationVersion_s', customFields.ConfigurationVersion),\r\n        ConfigIDPlatform=column_ifexists('ConfigIDPlatform_s', customFields.ConfigIDPlatform),\r\n        ConfigIDBuild=column_ifexists('ConfigIDBuild_s', customFields.ConfigIDBuild),\r\n        ProvisionState=column_ifexists('ProvisionState_s', customFields.ProvisionState),\r\n        Size=column_ifexists('Size_s', customFields.Size),\r\n        IsOnNetwork=column_ifexists('IsOnNetwork_s', customFields.IsOnNetwork),\r\n        DiskParentDeviceInstanceId=column_ifexists('DiskParentDeviceInstanceId_s', customFields.DiskParentDeviceInstanceId),\r\n        TemporaryFileName=column_ifexists('TemporaryFileName_s', customFields.TemporaryFileName),\r\n        FileEcpBitmask=column_ifexists('FileEcpBitmask_s', customFields.FileEcpBitmask),\r\n        IsOnRemovableDisk=column_ifexists('IsOnRemovableDisk_s', customFields.IsOnRemovableDisk),\r\n        ModuleCharacteristics=column_ifexists('ModuleCharacteristics_s', customFields.ModuleCharacteristics),\r\n        OriginalEventTimeStamp=column_ifexists('OriginalEventTimeStamp_s', customFields.OriginalEventTimeStamp),\r\n        MappedFromUserMode=column_ifexists('MappedFromUserMode_s', customFields.MappedFromUserMode),\r\n        TreeId=column_ifexists('TreeId_s', customFields.TreeId),\r\n        PrimaryModule=column_ifexists('PrimaryModule_s', customFields.PrimaryModule),\r\n        UserIsAdmin=column_ifexists('UserIsAdmin_s', customFields.UserIsAdmin),\r\n        LogoffTime=column_ifexists('LogoffTime_s', customFields.LogoffTime),\r\n        LogonTime=column_ifexists('LogonTime_s', customFields.LogonTime),\r\n        LogonDomain=column_ifexists('LogonDomain_s', customFields.LogonDomain),\r\n        RemoteAccount=column_ifexists('RemoteAccount_s', customFields.RemoteAccount),\r\n        UserFlags=column_ifexists('UserFlags_s', customFields.UserFlags),\r\n        LogonServer=column_ifexists('LogonServer_s', customFields.LogonServer),\r\n        DstUserName=column_ifexists('UserName_s', customFields.DstUserName),\r\n        LogonType=column_ifexists('LogonType_s', customFields.LogonType),\r\n        AuthenticationPackage=column_ifexists('AuthenticationPackage_s', customFields.AuthenticationPackage),\r\n        UserPrincipal=column_ifexists('UserPrincipal_s', customFields.UserPrincipal),\r\n        PasswordLastSet=column_ifexists('PasswordLastSet_s', customFields.PasswordLastSet),\r\n        UserLogoffType=column_ifexists('UserLogoffType_s', customFields.UserLogoffType),\r\n        UserLogonFlags=column_ifexists('UserLogonFlags_s', customFields.UserLogonFlags),\r\n        Parameter2=column_ifexists('Parameter2_s', customFields.Parameter2),\r\n        Parameter1=column_ifexists('Parameter1_s', customFields.Parameter1),\r\n        Parameter3=column_ifexists('Parameter3_s', customFields.Parameter3),\r\n        Line=column_ifexists('Line_s', customFields.Line),\r\n        ErrorStatus=column_ifexists('ErrorStatus_s', customFields.ErrorStatus),\r\n        Facility=column_ifexists('Facility_s', customFields.Facility),\r\n        File=column_ifexists('File_s', customFields.File),\r\n        PublicKeys=column_ifexists('PublicKeys_s', customFields.PublicKeys),\r\n        HandleCreated=column_ifexists('HandleCreated_s', customFields.HandleCreated),\r\n        ExtendedKeyUsages=column_ifexists('ExtendedKeyUsages_s', customFields.ExtendedKeyUsages),\r\n        FileSigningTime=column_ifexists('FileSigningTime_s', customFields.FileSigningTime),\r\n        Object1Name=column_ifexists('Object1Name_s', customFields.Object1Name),\r\n        Object1Type=column_ifexists('Object1Type_s', customFields.Object1Type),\r\n        Certificate=column_ifexists('Certificate_s', customFields.Certificate),\r\n        RpcClientProcessId=column_ifexists('RpcClientProcessId_s', customFields.RpcClientProcessId),\r\n        SyntheticPR2Flags=column_ifexists('SyntheticPR2Flags_s', customFields.SyntheticPR2Flags),\r\n        MachOSubType=column_ifexists('MachOSubType_s', customFields.MachOSubType),\r\n        SessionProcessId=column_ifexists('SessionProcessId_s', customFields.SessionProcessId),\r\n        SVUID=column_ifexists('SVUID_s', customFields.SVUID),\r\n        ProcessGroupId=column_ifexists('ProcessGroupId_s', customFields.ProcessGroupId),\r\n        GID=column_ifexists('GID_s', customFields.GID),\r\n        SVGID=column_ifexists('SVGID_s', customFields.SVGID),\r\n        UID=column_ifexists('UID_s', customFields.UID),\r\n        RGID=column_ifexists('RGID_s', customFields.RGID),\r\n        RUID=column_ifexists('RUID_s', customFields.RUID),\r\n        NeighborList=column_ifexists('NeighborList_s', customFields.NeighborList),\r\n        DownloadServer=column_ifexists('DownloadServer_s', customFields.DownloadServer),\r\n        DownloadPath=column_ifexists('DownloadPath_s', customFields.DownloadPath),\r\n        DownloadPort=column_ifexists('DownloadPort_s', customFields.DownloadPort),\r\n        CompletionEventId=column_ifexists('CompletionEventId_s', customFields.CompletionEventId),\r\n        IsTransactedFile=column_ifexists('IsTransactedFile_s', customFields.IsTransactedFile),\r\n        WindowStation=column_ifexists('WindowStation_s', customFields.WindowStation),\r\n        BoundingLimitCount=column_ifexists('BoundingLimitCount_s', customFields.BoundingLimitCount),\r\n        ProcessBehaviorBitfield=column_ifexists('ProcessBehaviorBitfield_s', customFields.ProcessBehaviorBitfield),\r\n        Desktop=column_ifexists('Desktop_s', customFields.Desktop),\r\n        PatternId=column_ifexists('PatternId_s', customFields.PatternId),\r\n        ExclusionType=column_ifexists('ExclusionType_s', customFields.ExclusionType),\r\n        ExclusionSource=column_ifexists('ExclusionSource_s', customFields.ExclusionSource),\r\n        DriverLoadFlags=column_ifexists('DriverLoadFlags_s', customFields.DriverLoadFlags),\r\n        CompanyName=column_ifexists('CompanyName_s', customFields.CompanyName),\r\n        OriginalFilename=column_ifexists('OriginalFilename_s', customFields.OriginalFilename),\r\n        FileVersion=column_ifexists('FileVersion_s', customFields.FileVersion),\r\n        GrandParentBaseFileName=column_ifexists('GrandParentBaseFileName_s', customFields.GrandParentBaseFileName),\r\n        ShowWindowFlags=column_ifexists('ShowWindowFlags_s', customFields.ShowWindowFlags),\r\n        ThreadStartAddress=column_ifexists('ThreadStartAddress_s', customFields.ThreadStartAddress),\r\n        InjectedThreadFlag=column_ifexists('InjectedThreadFlag_s', customFields.InjectedThreadFlag),\r\n        UserThread=column_ifexists('UserThread_s', customFields.UserThread),\r\n        TargetThreadModule=column_ifexists('TargetThreadModule_s', customFields.TargetThreadModule),\r\n        TargetThreadId=column_ifexists('TargetThreadId_s', customFields.TargetThreadId),\r\n        ThreadStartContext=column_ifexists('ThreadStartContext_s', customFields.ThreadStartContext),\r\n        SourceThreadStartAddress=column_ifexists('SourceThreadStartAddress_s', customFields.SourceThreadStartAddress),\r\n        InterfaceGuid=column_ifexists('InterfaceGuid_g', customFields.InterfaceGuid),\r\n        InterfaceVersion=column_ifexists('InterfaceVersion_s', customFields.InterfaceVersion),\r\n        RpcClientThreadId=column_ifexists('RpcClientThreadId_s', customFields.RpcClientThreadId),\r\n        TaskXml=column_ifexists('TaskXml_s', customFields.TaskXml),\r\n        TaskAuthor=column_ifexists('TaskAuthor_s', customFields.TaskAuthor),\r\n        TaskName=column_ifexists('TaskName_s', customFields.TaskName),\r\n        RpcOpNum=column_ifexists('RpcOpNum_s', customFields.RpcOpNum),\r\n        TaskExecArguments=column_ifexists('TaskExecArguments_s', customFields.TaskExecArguments),\r\n        TaskExecCommand=column_ifexists('TaskExecCommand_s', customFields.TaskExecCommand),\r\n        RpcNestingLevel=column_ifexists('RpcNestingLevel_s', customFields.RpcNestingLevel),\r\n        ErrorLocation=column_ifexists('ErrorLocation_s', customFields.ErrorLocation),\r\n        ErrorReason=column_ifexists('ErrorReason_s', customFields.ErrorReason),\r\n        Parameter64_1=column_ifexists('Parameter64_1_s', customFields.Parameter64_1),\r\n        ErrorSource=column_ifexists('ErrorSource_s', customFields.ErrorSource),\r\n        ParameterSizedBuffer_1=column_ifexists('ParameterSizedBuffer_1_g', customFields.ParameterSizedBuffer_1),\r\n        ErrorCode=column_ifexists('ErrorCode_s', customFields.ErrorCode),\r\n        DeviceProductId=column_ifexists('DeviceProductId_s', customFields.DeviceProductId),\r\n        DeviceVersion=column_ifexists('DeviceVersion_s', customFields.DeviceVersion),\r\n        DeviceTimeStamp=column_ifexists('DeviceTimeStamp_s', customFields.DeviceTimeStamp),\r\n        DeviceInstanceId=column_ifexists('DeviceInstanceId_s', customFields.DeviceInstanceId),\r\n        DeviceDescriptorSetHash=column_ifexists('DeviceDescriptorSetHash_s', customFields.DeviceDescriptorSetHash),\r\n        DeviceVendorId=column_ifexists('DeviceVendorId_s', customFields.DeviceVendorId),\r\n        DeviceManufacturer=column_ifexists('DeviceManufacturer_s', customFields.DeviceManufacturer),\r\n        DeviceProduct=column_ifexists('DeviceProduct_s', customFields.DeviceProduct),\r\n        GroupRid=column_ifexists('GroupRid_s', customFields.GroupRid),\r\n        UserRid=column_ifexists('UserRid_s', customFields.UserRid),\r\n        DomainSid=column_ifexists('DomainSid_s', customFields.DomainSid),\r\n        LightningLatencyState=column_ifexists('LightningLatencyState_s', customFields.LightningLatencyState),\r\n        UnixMode=column_ifexists('UnixMode_s', customFields.UnixMode),\r\n        VnodeType=column_ifexists('VnodeType_s', customFields.VnodeType),\r\n        TargetDirectoryName=column_ifexists('TargetDirectoryName_s', customFields.TargetDirectoryName),\r\n        ApiReturnValue=column_ifexists('ApiReturnValue_s', customFields.ApiReturnValue),\r\n        ServiceDisplayName=column_ifexists('ServiceDisplayName_s', customFields.ServiceDisplayName),\r\n        LinkName=column_ifexists('LinkName_s', customFields.LinkName),\r\n        VersionInfo=column_ifexists('VersionInfo_s', customFields.VersionInfo),\r\n        LanguageId=column_ifexists('LanguageId_s', customFields.LanguageId),\r\n        AsepFlags=column_ifexists('AsepFlags_s', customFields.AsepFlags),\r\n        RegObjectName=column_ifexists('RegObjectName_s', customFields.RegObjectName),\r\n        Data1=column_ifexists('Data1_s', customFields.Data1),\r\n        RegOperationType=column_ifexists('RegOperationType_s', customFields.RegOperationType),\r\n        ProcessArgs=column_ifexists('TargetCommandLineParameters_s', customFields.ProcessArgs),\r\n        RegStringValue=column_ifexists('RegStringValue_s', customFields.RegStringValue),\r\n        RegType=column_ifexists('RegType_s', customFields.RegType),\r\n        AsepClass=column_ifexists('AsepClass_s', customFields.AsepClass),\r\n        AsepIndex=column_ifexists('AsepIndex_s', customFields.AsepIndex),\r\n        RegValueName=column_ifexists('RegValueName_s', customFields.RegValueName),\r\n        AsepValueType=column_ifexists('AsepValueType_s', customFields.AsepValueType),\r\n        LocalSession=column_ifexists('LocalSession_s', customFields.LocalSession),\r\n        DstDvcHostname=column_ifexists('ClientComputerName_s', customFields.DstDvcHostname),\r\n        PrivilegesBitmask=column_ifexists('PrivilegesBitmask_s', customFields.PrivilegesBitmask),\r\n        EnabledPrivilegesBitmask=column_ifexists('EnabledPrivilegesBitmask_s', customFields.EnabledPrivilegesBitmask),\r\n        UserGroupsBitmask=column_ifexists('UserGroupsBitmask_s', customFields.UserGroupsBitmask),\r\n        Timeout=column_ifexists('Timeout_s', customFields.Timeout),\r\n        ProcessCount=column_ifexists('ProcessCount_s', customFields.ProcessCount),\r\n        SuppressType=column_ifexists('SuppressType_s', customFields.SuppressType),\r\n        BoundedCount=column_ifexists('BoundedCount_s', customFields.BoundedCount),\r\n        IP6Records=column_ifexists('IP6Records_s', customFields.IP6Records),\r\n        FirstIP6Record=column_ifexists('FirstIP6Record_s', customFields.FirstIP6Record),\r\n        WmiQuery=column_ifexists('WmiQuery_s', customFields.WmiQuery),\r\n        WmiNamespaceName=column_ifexists('WmiNamespaceName_s', customFields.WmiNamespaceName),\r\n        RegClassificationIndex=column_ifexists('RegClassificationIndex_s', customFields.RegClassificationIndex),\r\n        RegClassificationFlags=column_ifexists('RegClassificationFlags_s', customFields.RegClassificationFlags),\r\n        RegClassification=column_ifexists('RegClassification_s', customFields.RegClassification),\r\n        SystemTableIndex=column_ifexists('SystemTableIndex_s', customFields.SystemTableIndex),\r\n        ScreenshotType=column_ifexists('ScreenshotType_s', customFields.ScreenshotType),\r\n        SubStatus=column_ifexists('SubStatus_s', customFields.SubStatus),\r\n        UmppaInjectAbortCount=column_ifexists('UmppaInjectAbortCount_s', customFields.UmppaInjectAbortCount),\r\n        UmppaInjectFailedCount=column_ifexists('UmppaInjectFailedCount_s', customFields.UmppaInjectFailedCount),\r\n        UmppaInjectionType=column_ifexists('UmppaInjectionType_s', customFields.UmppaInjectionType),\r\n        UmppaInjectLoadFailCount=column_ifexists('UmppaInjectLoadFailCount_s', customFields.UmppaInjectLoadFailCount),\r\n        UmppaInjectCfgCheckCount=column_ifexists('UmppaInjectCfgCheckCount_s', customFields.UmppaInjectCfgCheckCount),\r\n        UmppaInjectExtensionErrorCount=column_ifexists('UmppaInjectExtensionErrorCount_s', customFields.UmppaInjectExtensionErrorCount),\r\n        UmppaInjectInvalidThreadCount=column_ifexists('UmppaInjectInvalidThreadCount_s', customFields.UmppaInjectInvalidThreadCount),\r\n        UmppaInjectFileSectionCount=column_ifexists('UmppaInjectFileSectionCount_s', customFields.UmppaInjectFileSectionCount),\r\n        TotalCount=column_ifexists('TotalCount_s', customFields.TotalCount),\r\n        UmppaInjectLoadErrorCount=column_ifexists('UmppaInjectLoadErrorCount_s', customFields.UmppaInjectLoadErrorCount),\r\n        UmppaInjectBadAlertCount=column_ifexists('UmppaInjectBadAlertCount_s', customFields.UmppaInjectBadAlertCount),\r\n        UmppaInjectApcInsertionCount=column_ifexists('UmppaInjectApcInsertionCount_s', customFields.UmppaInjectApcInsertionCount),\r\n        UmppaInjectCopyFailCount=column_ifexists('UmppaInjectCopyFailCount_s', customFields.UmppaInjectCopyFailCount),\r\n        FirewallRule=column_ifexists('FirewallRule_s', customFields.FirewallRule),\r\n        RegNumericValue=column_ifexists('RegNumericValue_s', customFields.RegNumericValue),\r\n        VolumeDriveLetter=column_ifexists('VolumeDriveLetter_s', customFields.VolumeDriveLetter),\r\n        VolumeSnapshotName=column_ifexists('VolumeSnapshotName_s', customFields.VolumeSnapshotName),\r\n        VolumeName=column_ifexists('VolumeName_s', customFields.VolumeName),\r\n        UserCanonical=column_ifexists('UserCanonical_s', customFields.UserCanonical),\r\n        LogonId=column_ifexists('LogonId_s', customFields.LogonId),\r\n        ConfigStateData=column_ifexists('ConfigStateData_s', customFields.ConfigStateData),\r\n        FirewallProfile=column_ifexists('FirewallProfile_s', customFields.FirewallProfile),\r\n        FirewallOption=column_ifexists('FirewallOption_s', customFields.FirewallOption),\r\n        FirewallOptionNumericValue=column_ifexists('FirewallOptionNumericValue_s', customFields.FirewallOptionNumericValue),\r\n        SmbShareName=column_ifexists('SmbShareName_s', customFields.SmbShareName),\r\n        TargetSHA256HashData=column_ifexists('TargetSHA256HashData_s', customFields.TargetSHA256HashData),\r\n        IsCpuDataCommonOnAllCores=column_ifexists('IsCpuDataCommonOnAllCores_s', customFields.IsCpuDataCommonOnAllCores),\r\n        SpibarDataFrap=column_ifexists('SpibarDataFrap_s', customFields.SpibarDataFrap),\r\n        EfiVariableDbxSha256Hash=column_ifexists('EfiVariableDbxSha256Hash_s', customFields.EfiVariableDbxSha256Hash),\r\n        PciConfigDataBgsm=column_ifexists('PciConfigDataBgsm_s', customFields.PciConfigDataBgsm),\r\n        PciConfigDataDpr=column_ifexists('PciConfigDataDpr_s', customFields.PciConfigDataDpr),\r\n        CpuDataCommonSmrrSupported=column_ifexists('CpuDataCommonSmrrSupported_s', customFields.CpuDataCommonSmrrSupported),\r\n        SpibarDataHsfc=column_ifexists('SpibarDataHsfc_s', customFields.SpibarDataHsfc),\r\n        EfiVariableSecureBoot=column_ifexists('EfiVariableSecureBoot_s', customFields.EfiVariableSecureBoot),\r\n        PciConfigDataMesegMask=column_ifexists('PciConfigDataMesegMask_s', customFields.PciConfigDataMesegMask),\r\n        PciConfigDataTolud=column_ifexists('PciConfigDataTolud_s', customFields.PciConfigDataTolud),\r\n        EfiVariableDbxAttributes=column_ifexists('EfiVariableDbxAttributes_s', customFields.EfiVariableDbxAttributes),\r\n        PciConfigDataPavpc=column_ifexists('PciConfigDataPavpc_s', customFields.PciConfigDataPavpc),\r\n        EfiVariableCustomModeAttributes=column_ifexists('EfiVariableCustomModeAttributes_s', customFields.EfiVariableCustomModeAttributes),\r\n        SpibarDataFreg3=column_ifexists('SpibarDataFreg3_s', customFields.SpibarDataFreg3),\r\n        SpibarDataFreg4=column_ifexists('SpibarDataFreg4_s', customFields.SpibarDataFreg4),\r\n        SpibarDataFreg1=column_ifexists('SpibarDataFreg1_s', customFields.SpibarDataFreg1),\r\n        SpibarDataFreg2=column_ifexists('SpibarDataFreg2_s', customFields.SpibarDataFreg2),\r\n        SpibarDataFreg0=column_ifexists('SpibarDataFreg0_s', customFields.SpibarDataFreg0),\r\n        EfiSupported=column_ifexists('EfiSupported_s', customFields.EfiSupported),\r\n        EfiVariablePkAttributes=column_ifexists('EfiVariablePkAttributes_s', customFields.EfiVariablePkAttributes),\r\n        CpuDataCommonPrmrrUncorePhysicalMask=column_ifexists('CpuDataCommonPrmrrUncorePhysicalMask_s', customFields.CpuDataCommonPrmrrUncorePhysicalMask),\r\n        PciConfigDataGenPmconA=column_ifexists('PciConfigDataGenPmconA_s', customFields.PciConfigDataGenPmconA),\r\n        PciConfigDataTsegmb=column_ifexists('PciConfigDataTsegmb_s', customFields.PciConfigDataTsegmb),\r\n        SpibarDataVscc0=column_ifexists('SpibarDataVscc0_s', customFields.SpibarDataVscc0),\r\n        EfiVariablePkSha256Hash=column_ifexists('EfiVariablePkSha256Hash_s', customFields.EfiVariablePkSha256Hash),\r\n        SpibarDataVscc1=column_ifexists('SpibarDataVscc1_s', customFields.SpibarDataVscc1),\r\n        CpuDataCommonSmrrPhysicalMask=column_ifexists('CpuDataCommonSmrrPhysicalMask_s', customFields.CpuDataCommonSmrrPhysicalMask),\r\n        NorthBridgeDeviceId=column_ifexists('NorthBridgeDeviceId_s', customFields.NorthBridgeDeviceId),\r\n        IsNorthBridgeSupported=column_ifexists('IsNorthBridgeSupported_s', customFields.IsNorthBridgeSupported),\r\n        PciConfigDataTom=column_ifexists('PciConfigDataTom_s', customFields.PciConfigDataTom),\r\n        EfiVariableKekSha256Hash=column_ifexists('EfiVariableKekSha256Hash_s', customFields.EfiVariableKekSha256Hash),\r\n        SouthBridgeVendorId=column_ifexists('SouthBridgeVendorId_s', customFields.SouthBridgeVendorId),\r\n        EfiVariableSignatureSupport=column_ifexists('EfiVariableSignatureSupport_s', customFields.EfiVariableSignatureSupport),\r\n        MmioDataTco1Cnt=column_ifexists('MmioDataTco1Cnt_s', customFields.MmioDataTco1Cnt),\r\n        EfiVariableKekAttributes=column_ifexists('EfiVariableKekAttributes_s', customFields.EfiVariableKekAttributes),\r\n        FirmwareAnalysisCpuSupported=column_ifexists('FirmwareAnalysisCpuSupported_s', customFields.FirmwareAnalysisCpuSupported),\r\n        MmioDataSmiEn=column_ifexists('MmioDataSmiEn_s', customFields.MmioDataSmiEn),\r\n        CpuDataCommonPrmrrUncoreSupported=column_ifexists('CpuDataCommonPrmrrUncoreSupported_s', customFields.CpuDataCommonPrmrrUncoreSupported),\r\n        NorthBridgeVendorId=column_ifexists('NorthBridgeVendorId_s', customFields.NorthBridgeVendorId),\r\n        CpuDataCommonMsrApicBase=column_ifexists('CpuDataCommonMsrApicBase_s', customFields.CpuDataCommonMsrApicBase),\r\n        EfiVariableDbAttributes=column_ifexists('EfiVariableDbAttributes_s', customFields.EfiVariableDbAttributes),\r\n        SpibarDataPr2=column_ifexists('SpibarDataPr2_s', customFields.SpibarDataPr2),\r\n        SpibarDataBfpr=column_ifexists('SpibarDataBfpr_s', customFields.SpibarDataBfpr),\r\n        SpibarDataPr1=column_ifexists('SpibarDataPr1_s', customFields.SpibarDataPr1),\r\n        EfiVariableSecureBootAttributes=column_ifexists('EfiVariableSecureBootAttributes_s', customFields.EfiVariableSecureBootAttributes),\r\n        SpibarDataPr0=column_ifexists('SpibarDataPr0_s', customFields.SpibarDataPr0),\r\n        IsSouthBridgeSupported=column_ifexists('IsSouthBridgeSupported_s', customFields.IsSouthBridgeSupported),\r\n        PciConfigDataHfsts1=column_ifexists('PciConfigDataHfsts1_s', customFields.PciConfigDataHfsts1),\r\n        CpuDataCommonMsrFeatureControl=column_ifexists('CpuDataCommonMsrFeatureControl_s', customFields.CpuDataCommonMsrFeatureControl),\r\n        PciConfigDataRemaplimit=column_ifexists('PciConfigDataRemaplimit_s', customFields.PciConfigDataRemaplimit),\r\n        CpuDataCommonSiliconDebugFeatureControl=column_ifexists('CpuDataCommonSiliconDebugFeatureControl_s', customFields.CpuDataCommonSiliconDebugFeatureControl),\r\n        CpuDataCommonSmrrPhysicalBase=column_ifexists('CpuDataCommonSmrrPhysicalBase_s', customFields.CpuDataCommonSmrrPhysicalBase),\r\n        SouthBridgeDeviceId=column_ifexists('SouthBridgeDeviceId_s', customFields.SouthBridgeDeviceId),\r\n        CpuDataCommonPrmrrPhysicalMask=column_ifexists('CpuDataCommonPrmrrPhysicalMask_s', customFields.CpuDataCommonPrmrrPhysicalMask),\r\n        EfiVariableDbSha256Hash=column_ifexists('EfiVariableDbSha256Hash_s', customFields.EfiVariableDbSha256Hash),\r\n        SpibarDataHsfs=column_ifexists('SpibarDataHsfs_s', customFields.SpibarDataHsfs),\r\n        PciConfigDataRemapbase=column_ifexists('PciConfigDataRemapbase_s', customFields.PciConfigDataRemapbase),\r\n        EfiVariableCustomMode=column_ifexists('EfiVariableCustomMode_s', customFields.EfiVariableCustomMode),\r\n        PciConfigDataGgc=column_ifexists('PciConfigDataGgc_s', customFields.PciConfigDataGgc),\r\n        PciConfigDataTouud=column_ifexists('PciConfigDataTouud_s', customFields.PciConfigDataTouud),\r\n        SpibarDataPr4=column_ifexists('SpibarDataPr4_s', customFields.SpibarDataPr4),\r\n        SpibarDataPr3=column_ifexists('SpibarDataPr3_s', customFields.SpibarDataPr3),\r\n        CpuDataCommonPrmrrSupported=column_ifexists('CpuDataCommonPrmrrSupported_s', customFields.CpuDataCommonPrmrrSupported),\r\n        PciConfigDataSmramc=column_ifexists('PciConfigDataSmramc_s', customFields.PciConfigDataSmramc),\r\n        EfiVariableSignatureSupportAttributes=column_ifexists('EfiVariableSignatureSupportAttributes_s', customFields.EfiVariableSignatureSupportAttributes),\r\n        PciConfigDataBdsm=column_ifexists('PciConfigDataBdsm_s', customFields.PciConfigDataBdsm),\r\n        EfiVariableSetupModeAttributes=column_ifexists('EfiVariableSetupModeAttributes_s', customFields.EfiVariableSetupModeAttributes),\r\n        EfiVariableSetupMode=column_ifexists('EfiVariableSetupMode_s', customFields.EfiVariableSetupMode),\r\n        PciConfigDataBiosCntl=column_ifexists('PciConfigDataBiosCntl_s', customFields.PciConfigDataBiosCntl),\r\n        PciConfigDataMesegBase=column_ifexists('PciConfigDataMesegBase_s', customFields.PciConfigDataMesegBase),\r\n        SourceFileName=column_ifexists('SourceFileName_s', customFields.SourceFileName),\r\n        NewFileIdentifier=column_ifexists('NewFileIdentifier_s', customFields.NewFileIdentifier),\r\n        FeatureVector=column_ifexists('FeatureVector_s', customFields.FeatureVector),\r\n        ModelPrediction=column_ifexists('ModelPrediction_s', customFields.ModelPrediction),\r\n        Malicious=column_ifexists('Malicious_s', customFields.Malicious),\r\n        FeatureExtractionVersion=column_ifexists('FeatureExtractionVersion_s', customFields.FeatureExtractionVersion),\r\n        FXFileSize=column_ifexists('FXFileSize_s', customFields.FXFileSize),\r\n        MLModelVersion=column_ifexists('MLModelVersion_s', customFields.MLModelVersion),\r\n        FontBufferLength=column_ifexists('FontBufferLength_s', customFields.FontBufferLength),\r\n        FontFileCount=column_ifexists('FontFileCount_s', customFields.FontFileCount),\r\n        FontLoadOperation=column_ifexists('FontLoadOperation_s', customFields.FontLoadOperation),\r\n        FontBuffer=column_ifexists('FontBuffer_s', customFields.FontBuffer),\r\n        FontFileName=column_ifexists('FontFileName_s', customFields.FontFileName),\r\n        TemplateInstanceId=column_ifexists('TemplateInstanceId_s', customFields.TemplateInstanceId),\r\n        PatternDisposition=column_ifexists('PatternDisposition_s', customFields.PatternDisposition),\r\n        ServicePackMajor=column_ifexists('ServicePackMajor_s', customFields.ServicePackMajor),\r\n        ProductSku=column_ifexists('ProductSku_s', customFields.ProductSku),\r\n        PointerSize=column_ifexists('PointerSize_s', customFields.PointerSize),\r\n        ProductName=column_ifexists('ProductName_s', customFields.ProductName),\r\n        AgentVersion=column_ifexists('AgentVersion_s', customFields.AgentVersion),\r\n        ServicePackMinor=column_ifexists('ServicePackMinor_s', customFields.ServicePackMinor),\r\n        SuiteMask=column_ifexists('SuiteMask_s', customFields.SuiteMask),\r\n        SubBuildNumber=column_ifexists('SubBuildNumber_s', customFields.SubBuildNumber),\r\n        PlatformId=column_ifexists('PlatformId_s', customFields.PlatformId),\r\n        BuildType=column_ifexists('BuildType_s', customFields.BuildType),\r\n        MajorVersion=column_ifexists('MajorVersion_s', customFields.MajorVersion),\r\n        ProductType=column_ifexists('ProductType_s', customFields.ProductType),\r\n        MinorVersion=column_ifexists('MinorVersion_s', customFields.MinorVersion),\r\n        CheckedBuild=column_ifexists('CheckedBuild_s', customFields.CheckedBuild),\r\n        BuildNumber=column_ifexists('BuildNumber_s', customFields.BuildNumber),\r\n        RFMState=column_ifexists('RFMState_s', customFields.RFMState),\r\n        FirmwareAnalysisEclControlInterfaceVersion=column_ifexists('FirmwareAnalysisEclControlInterfaceVersion_s', customFields.FirmwareAnalysisEclControlInterfaceVersion),\r\n        FirmwareAnalysisEclConsumerInterfaceVersion=column_ifexists('FirmwareAnalysisEclConsumerInterfaceVersion_s', customFields.FirmwareAnalysisEclConsumerInterfaceVersion),\r\n        BootTimeFunctionalityLevel=column_ifexists('BootTimeFunctionalityLevel_s', customFields.BootTimeFunctionalityLevel),\r\n        ReasonOfFunctionalityLevel=column_ifexists('ReasonOfFunctionalityLevel_s', customFields.ReasonOfFunctionalityLevel),\r\n        CurrentFunctionalityLevel=column_ifexists('CurrentFunctionalityLevel_s', customFields.CurrentFunctionalityLevel),\r\n        PciAttachmentState=column_ifexists('PciAttachmentState_s', customFields.PciAttachmentState),\r\n        LocalAddressIP6=column_ifexists('LocalAddressIP6_s', customFields.LocalAddressIP6),\r\n        RemoteAddressIP6=column_ifexists('RemoteAddressIP6_s', customFields.RemoteAddressIP6),\r\n        RegBinaryValue=column_ifexists('RegBinaryValue_s', customFields.RegBinaryValue),\r\n        ServiceDescription=column_ifexists('ServiceDescription_s', customFields.ServiceDescription),\r\n        ServiceSecurity=column_ifexists('ServiceSecurity_s', customFields.ServiceSecurity),\r\n        ServiceImagePath=column_ifexists('ServiceImagePath_s', customFields.ServiceImagePath),\r\n        ServiceStart=column_ifexists('ServiceStart_s', customFields.ServiceStart),\r\n        ServiceType=column_ifexists('ServiceType_s', customFields.ServiceType),\r\n        ServiceFailureActions=column_ifexists('ServiceFailureActions_s', customFields.ServiceFailureActions),\r\n        ServiceErrorControl=column_ifexists('ServiceErrorControl_s', customFields.ServiceErrorControl),\r\n        SymbolicLinkName=column_ifexists('SymbolicLinkName_s', customFields.SymbolicLinkName),\r\n        SymbolicLinkTarget=column_ifexists('SymbolicLinkTarget_s', customFields.SymbolicLinkTarget),\r\n        DevicePropertyClassName=column_ifexists('DevicePropertyClassName_s', customFields.DevicePropertyClassName),\r\n        DeviceActiveConfigurationNumber=column_ifexists('DeviceActiveConfigurationNumber_s', customFields.DeviceActiveConfigurationNumber),\r\n        DevicePropertyClassGuid=column_ifexists('DevicePropertyClassGuid_g', customFields.DevicePropertyClassGuid),\r\n        DeviceUsbSubclass=column_ifexists('DeviceUsbSubclass_s', customFields.DeviceUsbSubclass),\r\n        ParentHubInstanceId=column_ifexists('ParentHubInstanceId_s', customFields.ParentHubInstanceId),\r\n        DeviceConnectionStatus=column_ifexists('DeviceConnectionStatus_s', customFields.DeviceConnectionStatus),\r\n        DeviceUsbClass=column_ifexists('DeviceUsbClass_s', customFields.DeviceUsbClass),\r\n        ParentHubPort=column_ifexists('ParentHubPort_s', customFields.ParentHubPort),\r\n        DevicePropertyManufacturer=column_ifexists('DevicePropertyManufacturer_s', customFields.DevicePropertyManufacturer),\r\n        DevicePropertyLocationInformation=column_ifexists('DevicePropertyLocationInformation_s', customFields.DevicePropertyLocationInformation),\r\n        DeviceProtocol=column_ifexists('DeviceProtocol_s', customFields.DeviceProtocol),\r\n        DevicePropertyDeviceDescription=column_ifexists('DevicePropertyDeviceDescription_s', customFields.DevicePropertyDeviceDescription),\r\n        DeviceUsbVersion=column_ifexists('DeviceUsbVersion_s', customFields.DeviceUsbVersion),\r\n        ModuleBaseAddress=column_ifexists('ModuleBaseAddress_s', customFields.ModuleBaseAddress),\r\n        ModuleSize=column_ifexists('ModuleSize_s', customFields.ModuleSize),\r\n        IsOnClearCaseMvfs=column_ifexists('IsOnClearCaseMvfs_s', customFields.IsOnClearCaseMvfs),\r\n        DllCharacteristics=column_ifexists('DllCharacteristics_s', customFields.DllCharacteristics),\r\n        ActiveCpuCount=column_ifexists('ActiveCpuCount_s', customFields.ActiveCpuCount),\r\n        MemoryTotal=column_ifexists('MemoryTotal_s', customFields.MemoryTotal),\r\n        BillingType=column_ifexists('BillingType_s', customFields.BillingType),\r\n        ConnectionCipher=column_ifexists('ConnectionCipher_s', customFields.ConnectionCipher),\r\n        ConnectType=column_ifexists('ConnectType_s', customFields.ConnectType),\r\n        ConnectionProtocol=column_ifexists('ConnectionProtocol_s', customFields.ConnectionProtocol),\r\n        ConnectionHash=column_ifexists('ConnectionHash_s', customFields.ConnectionHash),\r\n        ConnectTime=column_ifexists('ConnectTime_s', customFields.ConnectTime),\r\n        ConnectionHashStrength=column_ifexists('ConnectionHashStrength_s', customFields.ConnectionHashStrength),\r\n        FailedConnectCount=column_ifexists('FailedConnectCount_s', customFields.FailedConnectCount),\r\n        ConnectionCipherStrength=column_ifexists('ConnectionCipherStrength_s', customFields.ConnectionCipherStrength),\r\n        ConnectionExchangeStrength=column_ifexists('ConnectionExchangeStrength_s', customFields.ConnectionExchangeStrength),\r\n        ConnectionExchange=column_ifexists('ConnectionExchange_s', customFields.ConnectionExchange),\r\n        PreviousConnectTime=column_ifexists('PreviousConnectTime_s', customFields.PreviousConnectTime),\r\n        FalconServiceServletErrors=column_ifexists('FalconServiceServletErrors_s', customFields.FalconServiceServletErrors),\r\n        FalconServiceComponent=column_ifexists('FalconServiceComponent_s', customFields.FalconServiceComponent),\r\n        FalconServiceServletStarts=column_ifexists('FalconServiceServletStarts_s', customFields.FalconServiceServletStarts),\r\n        FalconServiceState=column_ifexists('FalconServiceState_s', customFields.FalconServiceState),\r\n        ScriptContent=column_ifexists('ScriptContent_s', customFields.ScriptContent),\r\n        OriginalContentLength=column_ifexists('OriginalContentLength_s', customFields.OriginalContentLength),\r\n        ScriptingLanguageId=column_ifexists('ScriptingLanguageId_s', customFields.ScriptingLanguageId),\r\n        ParentImageFileName=column_ifexists('ParentImageFileName_s', customFields.ParentImageFileName),\r\n        GrandparentImageFileName=column_ifexists('GrandparentImageFileName_s', customFields.GrandparentImageFileName),\r\n        ScriptContentName=column_ifexists('ScriptContentName_s', customFields.ScriptContentName),\r\n        HostProcessType=column_ifexists('HostProcessType_s', customFields.HostProcessType),\r\n        ProcessParentCommandLine=column_ifexists('ParentCommandLine_s', customFields.ProcessParentCommandLine),\r\n        ContentSHA256HashData=column_ifexists('ContentSHA256HashData_s', customFields.ContentSHA256HashData),\r\n        ProcessGrandparentCommandLine=column_ifexists('GrandparentCommandLine_s', customFields.ProcessGrandparentCommandLine)\r\n    | project\r\n        TimeGenerated, \r\n        EventVendor,\r\n        EventProduct,\r\n        FileMode,\r\n        DeviceSerialNumber,\r\n        IcmpCode,\r\n        IcmpType,\r\n        LastUpdateInstalledTime,\r\n        RebootRequired,\r\n        PendingUpdateIds,\r\n        InstalledUpdateIds,\r\n        InstalledUpdateExtendedStatus,\r\n        SupersededUpdateIds,\r\n        ConfigurationDescriptorValue,\r\n        ConfigurationDescriptorAttributes,\r\n        DeviceDescriptorUniqueIdentifier,\r\n        ConfigurationDescriptorName,\r\n        ConfigurationDescriptorNumInterfaces,\r\n        ConfigurationDescriptorMaxPowerDraw,\r\n        ScreenshotsTakenCount,\r\n        ExitCode,\r\n        ParentProcessId,\r\n        DstUserIdentity,\r\n        NetworkListenCount,\r\n        SuspiciousRawDiskReadCount,\r\n        NetworkBindCount,\r\n        NetworkRecvAcceptCount,\r\n        ContextData,\r\n        Id,\r\n        NewExecutableWrittenCount,\r\n        ExeAndServiceCount,\r\n        NetworkCloseCount,\r\n        SuspectStackCount,\r\n        CLICreationCount,\r\n        UnsignedModuleLoadCount,\r\n        UserTime,\r\n        EventMessage,\r\n        RawProcessId,\r\n        ContextTimeStamp,\r\n        AllocateVirtualMemoryCount,\r\n        ContextProcessId,\r\n        ServiceEventCount,\r\n        SnapshotFileOpenCount,\r\n        RemovableDiskFileWrittenCount,\r\n        InjectedDllCount,\r\n        ModuleLoadCount,\r\n        UserMemoryProtectExecutableCount,\r\n        NetworkCapableAsepWriteCount,\r\n        TargetProcessId,\r\n        DnsRequestCount,\r\n        ArchiveFileWrittenCount,\r\n        Entitlements,\r\n        Name,\r\n        ProcessStartTime,\r\n        SetThreadContextCount,\r\n        SuspiciousCredentialModuleLoadCount,\r\n        DvcInterfaceGuid,\r\n        Cid,\r\n        FileDeletedCount,\r\n        UserMemoryAllocateExecutableCount,\r\n        DirectoryCreatedCount,\r\n        NetworkConnectCountUdp,\r\n        QueueApcCount,\r\n        ContextThreadId,\r\n        Aip,\r\n        SuspiciousFontLoadCount,\r\n        ConHostId,\r\n        NetworkConnectCount,\r\n        BinaryExecutableWrittenCount,\r\n        CycleTime,\r\n        DvcOs,\r\n        ConHostProcessId,\r\n        PrivilegedProcessHandleCount,\r\n        MaxThreadCount,\r\n        ImageSubsystem,\r\n        GenericFileWrittenCount,\r\n        EffectiveTransmissionClass,\r\n        ScriptEngineInvocationCount,\r\n        RunDllInvocationCount,\r\n        timestamp,\r\n        CreateProcessCount,\r\n        KernelTime,\r\n        DirectoryEnumeratedCount,\r\n        ConfigStateHash,\r\n        AsepWrittenCount,\r\n        SuspiciousDnsRequestCount,\r\n        DocumentFileWrittenCount,\r\n        ProtectVirtualMemoryCount,\r\n        ProcessHashSha256,\r\n        UserMemoryProtectExecutableRemoteCount,\r\n        ConfigBuild,\r\n        UserMemoryAllocateExecutableRemoteCount,\r\n        ExecutableDeletedCount,\r\n        RegKeySecurityDecreasedCount,\r\n        InjectedThreadCount,\r\n        NetworkModuleLoadCount,\r\n        WindowTitle,\r\n        ProcessCreateFlags,\r\n        IntegrityLevel,\r\n        SourceProcessId,\r\n        ProcessHashSha1,\r\n        TokenType,\r\n        ProcessEndTime,\r\n        AuthenticodeHashData,\r\n        ParentBaseFileName,\r\n        SessionId,\r\n        Tags,\r\n        ProcessHashMd5,\r\n        ProcessSxsFlags,\r\n        AuthenticationId,\r\n        WindowFlags,\r\n        ProcessCommandLine,\r\n        ParentAuthenticationId,\r\n        FileName,\r\n        SourceThreadId,\r\n        ProcessParameterFlags,\r\n        SignInfoFlags,\r\n        ChannelVersion,\r\n        ChannelVersionRequired,\r\n        ChannelId,\r\n        DnsResponseType,\r\n        IP4Records,\r\n        CNAMERecords,\r\n        QueryStatus,\r\n        InterfaceIndex,\r\n        DualRequest,\r\n        FirstIP4Record,\r\n        UrlDomain,\r\n        RespondingDnsServer,\r\n        RequestType,\r\n        FirewallRuleId,\r\n        Options,\r\n        MinorFunction,\r\n        FileIdentifier,\r\n        Information,\r\n        ShareAccess,\r\n        FileObject,\r\n        FilePermission,\r\n        Status,\r\n        IrpFlags,\r\n        MajorFunction,\r\n        DesiredAccess,\r\n        OperationFlags,\r\n        TargetFileName,\r\n        CallStackModuleNamesVersion,\r\n        CsaProcessDataCollectionInstanceId,\r\n        CallStackModuleNames,\r\n        CreateProcessType,\r\n        EtwRawProcessId,\r\n        EventMax,\r\n        EtwRawThreadId,\r\n        Flags,\r\n        EventMin,\r\n        RawThreadId,\r\n        SrcIpAddr,\r\n        ConnectionFlags,\r\n        DstIpPort,\r\n        SrcIpPort,\r\n        Protocol,\r\n        DstIpAddr,\r\n        ConnectionDirection,\r\n        InContext,\r\n        NetworkContainmentState,\r\n        ConfigIDBase,\r\n        SensorStateBitMap,\r\n        ConfigurationVersion,\r\n        ConfigIDPlatform,\r\n        ConfigIDBuild,\r\n        ProvisionState,\r\n        Size,\r\n        IsOnNetwork,\r\n        DiskParentDeviceInstanceId,\r\n        TemporaryFileName,\r\n        FileEcpBitmask,\r\n        IsOnRemovableDisk,\r\n        ModuleCharacteristics,\r\n        OriginalEventTimeStamp,\r\n        MappedFromUserMode,\r\n        TreeId,\r\n        PrimaryModule,\r\n        UserIsAdmin,\r\n        LogoffTime,\r\n        LogonTime,\r\n        LogonDomain,\r\n        RemoteAccount,\r\n        UserFlags,\r\n        LogonServer,\r\n        DstUserName,\r\n        LogonType,\r\n        AuthenticationPackage,\r\n        UserPrincipal,\r\n        PasswordLastSet,\r\n        UserLogoffType,\r\n        UserLogonFlags,\r\n        Parameter2,\r\n        Parameter1,\r\n        Parameter3,\r\n        Line,\r\n        ErrorStatus,\r\n        Facility,\r\n        File,\r\n        PublicKeys,\r\n        HandleCreated,\r\n        ExtendedKeyUsages,\r\n        FileSigningTime,\r\n        Object1Name,\r\n        Object1Type,\r\n        Certificate,\r\n        RpcClientProcessId,\r\n        SyntheticPR2Flags,\r\n        MachOSubType,\r\n        SessionProcessId,\r\n        SVUID,\r\n        ProcessGroupId,\r\n        GID,\r\n        SVGID,\r\n        UID,\r\n        RGID,\r\n        RUID,\r\n        NeighborList,\r\n        DownloadServer,\r\n        DownloadPath,\r\n        DownloadPort,\r\n        CompletionEventId,\r\n        IsTransactedFile,\r\n        WindowStation,\r\n        BoundingLimitCount,\r\n        ProcessBehaviorBitfield,\r\n        Desktop,\r\n        PatternId,\r\n        ExclusionType,\r\n        ExclusionSource,\r\n        DriverLoadFlags,\r\n        CompanyName,\r\n        OriginalFilename,\r\n        FileVersion,\r\n        GrandParentBaseFileName,\r\n        ShowWindowFlags,\r\n        ThreadStartAddress,\r\n        InjectedThreadFlag,\r\n        UserThread,\r\n        TargetThreadModule,\r\n        TargetThreadId,\r\n        ThreadStartContext,\r\n        SourceThreadStartAddress,\r\n        InterfaceGuid,\r\n        InterfaceVersion,\r\n        RpcClientThreadId,\r\n        TaskXml,\r\n        TaskAuthor,\r\n        TaskName,\r\n        RpcOpNum,\r\n        TaskExecArguments,\r\n        TaskExecCommand,\r\n        RpcNestingLevel,\r\n        ErrorLocation,\r\n        ErrorReason,\r\n        Parameter64_1,\r\n        ErrorSource,\r\n        ParameterSizedBuffer_1,\r\n        ErrorCode,\r\n        DeviceProductId,\r\n        DeviceVersion,\r\n        DeviceTimeStamp,\r\n        DeviceInstanceId,\r\n        DeviceDescriptorSetHash,\r\n        DeviceVendorId,\r\n        DeviceManufacturer,\r\n        DeviceProduct,\r\n        GroupRid,\r\n        UserRid,\r\n        DomainSid,\r\n        LightningLatencyState,\r\n        UnixMode,\r\n        VnodeType,\r\n        TargetDirectoryName,\r\n        ApiReturnValue,\r\n        ServiceDisplayName,\r\n        LinkName,\r\n        VersionInfo,\r\n        LanguageId,\r\n        AsepFlags,\r\n        RegObjectName,\r\n        Data1,\r\n        RegOperationType,\r\n        ProcessArgs,\r\n        RegStringValue,\r\n        RegType,\r\n        AsepClass,\r\n        AsepIndex,\r\n        RegValueName,\r\n        AsepValueType,\r\n        LocalSession,\r\n        DstDvcHostname,\r\n        PrivilegesBitmask,\r\n        EnabledPrivilegesBitmask,\r\n        UserGroupsBitmask,\r\n        Timeout,\r\n        ProcessCount,\r\n        SuppressType,\r\n        BoundedCount,\r\n        IP6Records,\r\n        FirstIP6Record,\r\n        WmiQuery,\r\n        WmiNamespaceName,\r\n        RegClassificationIndex,\r\n        RegClassificationFlags,\r\n        RegClassification,\r\n        SystemTableIndex,\r\n        ScreenshotType,\r\n        SubStatus,\r\n        UmppaInjectAbortCount,\r\n        UmppaInjectFailedCount,\r\n        UmppaInjectionType,\r\n        UmppaInjectLoadFailCount,\r\n        UmppaInjectCfgCheckCount,\r\n        UmppaInjectExtensionErrorCount,\r\n        UmppaInjectInvalidThreadCount,\r\n        UmppaInjectFileSectionCount,\r\n        TotalCount,\r\n        UmppaInjectLoadErrorCount,\r\n        UmppaInjectBadAlertCount,\r\n        UmppaInjectApcInsertionCount,\r\n        UmppaInjectCopyFailCount,\r\n        FirewallRule,\r\n        RegNumericValue,\r\n        VolumeDriveLetter,\r\n        VolumeSnapshotName,\r\n        VolumeName,\r\n        UserCanonical,\r\n        LogonId,\r\n        ConfigStateData,\r\n        FirewallProfile,\r\n        FirewallOption,\r\n        FirewallOptionNumericValue,\r\n        SmbShareName,\r\n        TargetSHA256HashData,\r\n        IsCpuDataCommonOnAllCores,\r\n        SpibarDataFrap,\r\n        EfiVariableDbxSha256Hash,\r\n        PciConfigDataBgsm,\r\n        PciConfigDataDpr,\r\n        CpuDataCommonSmrrSupported,\r\n        SpibarDataHsfc,\r\n        EfiVariableSecureBoot,\r\n        PciConfigDataMesegMask,\r\n        PciConfigDataTolud,\r\n        EfiVariableDbxAttributes,\r\n        PciConfigDataPavpc,\r\n        EfiVariableCustomModeAttributes,\r\n        SpibarDataFreg3,\r\n        SpibarDataFreg4,\r\n        SpibarDataFreg1,\r\n        SpibarDataFreg2,\r\n        SpibarDataFreg0,\r\n        EfiSupported,\r\n        EfiVariablePkAttributes,\r\n        CpuDataCommonPrmrrUncorePhysicalMask,\r\n        PciConfigDataGenPmconA,\r\n        PciConfigDataTsegmb,\r\n        SpibarDataVscc0,\r\n        EfiVariablePkSha256Hash,\r\n        SpibarDataVscc1,\r\n        CpuDataCommonSmrrPhysicalMask,\r\n        NorthBridgeDeviceId,\r\n        IsNorthBridgeSupported,\r\n        PciConfigDataTom,\r\n        EfiVariableKekSha256Hash,\r\n        SouthBridgeVendorId,\r\n        EfiVariableSignatureSupport,\r\n        MmioDataTco1Cnt,\r\n        EfiVariableKekAttributes,\r\n        FirmwareAnalysisCpuSupported,\r\n        MmioDataSmiEn,\r\n        CpuDataCommonPrmrrUncoreSupported,\r\n        NorthBridgeVendorId,\r\n        CpuDataCommonMsrApicBase,\r\n        EfiVariableDbAttributes,\r\n        SpibarDataPr2,\r\n        SpibarDataBfpr,\r\n        SpibarDataPr1,\r\n        EfiVariableSecureBootAttributes,\r\n        SpibarDataPr0,\r\n        IsSouthBridgeSupported,\r\n        PciConfigDataHfsts1,\r\n        CpuDataCommonMsrFeatureControl,\r\n        PciConfigDataRemaplimit,\r\n        CpuDataCommonSiliconDebugFeatureControl,\r\n        CpuDataCommonSmrrPhysicalBase,\r\n        SouthBridgeDeviceId,\r\n        CpuDataCommonPrmrrPhysicalMask,\r\n        EfiVariableDbSha256Hash,\r\n        SpibarDataHsfs,\r\n        PciConfigDataRemapbase,\r\n        EfiVariableCustomMode,\r\n        PciConfigDataGgc,\r\n        PciConfigDataTouud,\r\n        SpibarDataPr4,\r\n        SpibarDataPr3,\r\n        CpuDataCommonPrmrrSupported,\r\n        PciConfigDataSmramc,\r\n        EfiVariableSignatureSupportAttributes,\r\n        PciConfigDataBdsm,\r\n        EfiVariableSetupModeAttributes,\r\n        EfiVariableSetupMode,\r\n        PciConfigDataBiosCntl,\r\n        PciConfigDataMesegBase,\r\n        SourceFileName,\r\n        NewFileIdentifier,\r\n        FeatureVector,\r\n        ModelPrediction,\r\n        Malicious,\r\n        FeatureExtractionVersion,\r\n        FXFileSize,\r\n        MLModelVersion,\r\n        FontBufferLength,\r\n        FontFileCount,\r\n        FontLoadOperation,\r\n        FontBuffer,\r\n        FontFileName,\r\n        TemplateInstanceId,\r\n        PatternDisposition,\r\n        ServicePackMajor,\r\n        ProductSku,\r\n        PointerSize,\r\n        ProductName,\r\n        AgentVersion,\r\n        ServicePackMinor,\r\n        SuiteMask,\r\n        SubBuildNumber,\r\n        PlatformId,\r\n        BuildType,\r\n        MajorVersion,\r\n        ProductType,\r\n        MinorVersion,\r\n        CheckedBuild,\r\n        BuildNumber,\r\n        RFMState,\r\n        FirmwareAnalysisEclControlInterfaceVersion,\r\n        FirmwareAnalysisEclConsumerInterfaceVersion,\r\n        BootTimeFunctionalityLevel,\r\n        ReasonOfFunctionalityLevel,\r\n        CurrentFunctionalityLevel,\r\n        PciAttachmentState,\r\n        LocalAddressIP6,\r\n        RemoteAddressIP6,\r\n        RegBinaryValue,\r\n        ServiceDescription,\r\n        ServiceSecurity,\r\n        ServiceImagePath,\r\n        ServiceStart,\r\n        ServiceType,\r\n        ServiceFailureActions,\r\n        ServiceErrorControl,\r\n        SymbolicLinkName,\r\n        SymbolicLinkTarget,\r\n        DevicePropertyClassName,\r\n        DeviceActiveConfigurationNumber,\r\n        DevicePropertyClassGuid,\r\n        DeviceUsbSubclass,\r\n        ParentHubInstanceId,\r\n        DeviceConnectionStatus,\r\n        DeviceUsbClass,\r\n        ParentHubPort,\r\n        DevicePropertyManufacturer,\r\n        DevicePropertyLocationInformation,\r\n        DeviceProtocol,\r\n        DevicePropertyDeviceDescription,\r\n        DeviceUsbVersion,\r\n        ModuleBaseAddress,\r\n        ModuleSize,\r\n        IsOnClearCaseMvfs,\r\n        DllCharacteristics,\r\n        ActiveCpuCount,\r\n        MemoryTotal,\r\n        BillingType,\r\n        ConnectionCipher,\r\n        ConnectType,\r\n        ConnectionProtocol,\r\n        ConnectionHash,\r\n        ConnectTime,\r\n        ConnectionHashStrength,\r\n        FailedConnectCount,\r\n        ConnectionCipherStrength,\r\n        ConnectionExchangeStrength,\r\n        ConnectionExchange,\r\n        PreviousConnectTime,\r\n        FalconServiceServletErrors,\r\n        FalconServiceComponent,\r\n        FalconServiceServletStarts,\r\n        FalconServiceState,\r\n        ScriptContent,\r\n        OriginalContentLength,\r\n        ScriptingLanguageId,\r\n        ParentImageFileName,\r\n        GrandparentImageFileName,\r\n        ScriptContentName,\r\n        HostProcessType,\r\n        ProcessParentCommandLine,\r\n        ContentSHA256HashData,\r\n        ProcessGrandparentCommandLine\r\n};\r\nCrowdstrikeReplicatorLogs_view\r\n",
                "version": 1,
                "tags": [
                  {
                    "name": "description",
                    "value": "CrowdstrikeReplicator"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
              "apiVersion": "2022-01-01-preview",
              "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',concat('Parser-', last(split(resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'CrowdstrikeReplicator'),'/'))))]",
              "dependsOn": [
                "[concat(parameters('workspace'),'/','CrowdstrikeReplicator')]"
              ],
              "properties": {
                "parentId": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('workspace'), 'CrowdstrikeReplicator')]",
                "contentId": "CrowdstrikeReplicator-Parser",
                "kind": "Parser",
                "version": "1.0.0",
                "source": {
                  "name": "CrowdStrike Falcon Endpoint Protection",
                  "kind": "Solution",
                  "sourceId": "azuresentinel.azure-sentinel-solution-crowdstrikefalconep"
                },
                "author": {
                  "name": "Microsoft",
                  "email": "support@microsoft.com"
                },
                "support": {
                  "name": "Microsoft Corporation",
                  "email": "support@microsoft.com",
                  "tier": "Microsoft",
                  "link": "https://support.microsoft.com"
                }
              }
            }
          ]
        },
        "packageKind": "Solution",
        "PackageVersion": "2.0.7"
      }
    }
  ]
}